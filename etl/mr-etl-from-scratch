#!/bin/bash

# Here short description of this script
# This is just a template to be used for writing new bash scripts

###
# Based on Google Style Guide: https://google-styleguide.googlecode.com/svn/trunk/shell.xml
# General remarks
# * Executables should have no extension (strongly preferred) or a .sh extension. 
# * Libraries must have a .sh extension and should not be executable
# * SUID and SGID are forbidden on shell scripts. 
# * All error messages should go to STDERR. 
# * Write todos like this: # TODO(renzok): Handle the unlikely edge cases (bug ####)
# * Indent 2 spaces. No tabs. 80 chars max per line
# * Put ; do and ; then on the same line as the while, for or if. 
# * Quoting: https://google-styleguide.googlecode.com/svn/trunk/shell.xml?showone=Quoting#Quoting
# * Function Names: Lower-case, with underscores to separate words. 
# ** Separate libraries with ::. Parentheses are required after the function name. 
# * prefer shell builtin over separate process
##


##
# Coding tips and tricks:
# http://stackoverflow.com/questions/1167746/how-to-assign-a-heredoc-value-to-a-variable-in-bash
#

# Exit immediately if a command exits with a non-zero status.
# this might cause problems e.g. using read to read a heredoc cause read to always return non-zero
# set -o errexit
# Treat unset variables as an error when substituting.
set -o nounset

# 1. section: global constants (all words upper case separated by underscore)
# declare -r CONSTANT_VARIABLE='value'
declare TMP_FILE_PREFIX=${TMPDIR:-/tmp}/prog.$$
# 2. section: functions



function cleanup() {
    rm -f ${TMP_FILE_PREFIX}.*
    
    #echo "always implement this" && exit 100   
}


function usage() {
  cat <<EOF

Usage: $0

 TODO
EOF
}


# Single function
function main() {

  #the optional paramters string starting with ':' for silent errors
  local -r OPTS=':'

  while builtin getopts ${OPTS} opt "${@}"; do
 
      case $opt in
	  h) usage ; exit 0
	     ;;

	\?)
	    echo ${opt} ${OPTIND} 'is an invalid option'; usage; exit ${INVALID_OPTION}
	    ;;

        :)
	   echo 'required argument not found for option -'${OPTARG}; usage; exit ${INVALID_OPTION}
	    ;;
        *) echo "Too many options. Can not happen actually :)"
           ;;

    esac
  done

  declare -r DB_BOX=pg-test-db;
  declare -r MR_TRANSFORM_BOX=mr-transform

  # building images
  sudo docker build -t renzok/postgresql:9.3 ~/dockers/postgres/9.3
  
  sudo docker build -t renzok/megdb \
       ~/dockers/megdb
  
  sudo docker build -t renzok/marine-regions-transform \
       ~/dockers/marine-regions/marine-regions-transform
  
  
  # starting DB box
  sudo docker stop ${DB_BOX} 
  sudo docker rm -v ${DB_BOX};
  sudo docker run --name ${DB_BOX} \
     -p 0.0.0.0:5555:5432 \
     -d  renzok/megdb

  # running ephemeral process but persisted data transform
  sudo docker run --name ${MR_TRANSFORM_BOX} \
       --rm \
       --volumes-from mr-data \
       renzok/marine-regions-transform

  # loading and integrating marine regions data

  cleanup

  exit 0
}


# Always check return values and give informative return values. 
# see https://google-styleguide.googlecode.com/svn/trunk/shell.xml?showone=Checking_Return_Values#Checking_Return_Values

# set a trap for (calling) cleanup all stuff before process termination by SIGHUBs
trap "cleanup; exit 1" 1 2 3 13 15
# this is the main executable function at end of script
main "$@"



