BEGIN;
SELECT _v.register_patch( 'baseline', ARRAY['hstore'], NULL );

--
-- PostgreSQL database dump
--

SET statement_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SET check_function_bodies = false;
SET client_min_messages = warning;

--
-- Name: core; Type: SCHEMA; Schema: -; Owner: megdb_admin
--

CREATE SCHEMA core;


ALTER SCHEMA core OWNER TO megdb_admin;

--
-- Name: SCHEMA core; Type: COMMENT; Schema: -; Owner: megdb_admin
--

COMMENT ON SCHEMA core IS 'The central schema for all aspects of MegDb.';


--
-- Name: cv; Type: SCHEMA; Schema: -; Owner: rkottman
--

CREATE SCHEMA cv;


ALTER SCHEMA cv OWNER TO rkottman;

--
-- Name: SCHEMA cv; Type: COMMENT; Schema: -; Owner: rkottman
--

COMMENT ON SCHEMA cv IS 'schema for all lookup tables';


--
-- Name: elayers; Type: SCHEMA; Schema: -; Owner: megdb_admin
--

CREATE SCHEMA elayers;


ALTER SCHEMA elayers OWNER TO megdb_admin;

--
-- Name: SCHEMA elayers; Type: COMMENT; Schema: -; Owner: megdb_admin
--

COMMENT ON SCHEMA elayers IS 'Contains all geospatial environmental data and data for WMS/WFS services ';


--
-- Name: mfdata; Type: SCHEMA; Schema: -; Owner: megdb_admin
--

CREATE SCHEMA mfdata;


ALTER SCHEMA mfdata OWNER TO megdb_admin;

--
-- Name: mflayers; Type: SCHEMA; Schema: -; Owner: megdb_admin
--

CREATE SCHEMA mflayers;


ALTER SCHEMA mflayers OWNER TO megdb_admin;

--
-- Name: mfmetadata; Type: SCHEMA; Schema: -; Owner: megdb_admin
--

CREATE SCHEMA mfmetadata;


ALTER SCHEMA mfmetadata OWNER TO megdb_admin;

--
-- Name: mfresults; Type: SCHEMA; Schema: -; Owner: megdb_admin
--

CREATE SCHEMA mfresults;


ALTER SCHEMA mfresults OWNER TO megdb_admin;

--
-- Name: pfam_23; Type: SCHEMA; Schema: -; Owner: rkottman
--

CREATE SCHEMA pfam_23;


ALTER SCHEMA pfam_23 OWNER TO rkottman;

--
-- Name: pfam_24; Type: SCHEMA; Schema: -; Owner: ikostadi
--

CREATE SCHEMA pfam_24;


ALTER SCHEMA pfam_24 OWNER TO ikostadi;

--
-- Name: SCHEMA pfam_24; Type: COMMENT; Schema: -; Owner: ikostadi
--

COMMENT ON SCHEMA pfam_24 IS 'release 24 of Pfam';


--
-- Name: pfam_stage; Type: SCHEMA; Schema: -; Owner: schema_admin
--

CREATE SCHEMA pfam_stage;


ALTER SCHEMA pfam_stage OWNER TO schema_admin;

--
-- Name: pgq; Type: SCHEMA; Schema: -; Owner: rkottman
--

CREATE SCHEMA pgq;


ALTER SCHEMA pgq OWNER TO rkottman;

--
-- Name: pgq_ext; Type: SCHEMA; Schema: -; Owner: rkottman
--

CREATE SCHEMA pgq_ext;


ALTER SCHEMA pgq_ext OWNER TO rkottman;

--
-- Name: silva_r100_lsu; Type: SCHEMA; Schema: -; Owner: schema_admin
--

CREATE SCHEMA silva_r100_lsu;


ALTER SCHEMA silva_r100_lsu OWNER TO schema_admin;

--
-- Name: silva_r100_ssu; Type: SCHEMA; Schema: -; Owner: schema_admin
--

CREATE SCHEMA silva_r100_ssu;


ALTER SCHEMA silva_r100_ssu OWNER TO schema_admin;

--
-- Name: silva_r102_lsu; Type: SCHEMA; Schema: -; Owner: schema_admin
--

CREATE SCHEMA silva_r102_lsu;


ALTER SCHEMA silva_r102_lsu OWNER TO schema_admin;

--
-- Name: silva_r102_ssu; Type: SCHEMA; Schema: -; Owner: schema_admin
--

CREATE SCHEMA silva_r102_ssu;


ALTER SCHEMA silva_r102_ssu OWNER TO schema_admin;

--
-- Name: silva_r103_; Type: SCHEMA; Schema: -; Owner: epruesse
--

CREATE SCHEMA silva_r103_;


ALTER SCHEMA silva_r103_ OWNER TO epruesse;

--
-- Name: silva_r103_lsu; Type: SCHEMA; Schema: -; Owner: epruesse
--

CREATE SCHEMA silva_r103_lsu;


ALTER SCHEMA silva_r103_lsu OWNER TO epruesse;

--
-- Name: silva_r103_ssu; Type: SCHEMA; Schema: -; Owner: epruesse
--

CREATE SCHEMA silva_r103_ssu;


ALTER SCHEMA silva_r103_ssu OWNER TO epruesse;

--
-- Name: stage_r8; Type: SCHEMA; Schema: -; Owner: curation_admin
--

CREATE SCHEMA stage_r8;


ALTER SCHEMA stage_r8 OWNER TO curation_admin;

--
-- Name: SCHEMA stage_r8; Type: COMMENT; Schema: -; Owner: curation_admin
--

COMMENT ON SCHEMA stage_r8 IS 'All new staged data for MegDb version r8';


--
-- Name: web; Type: SCHEMA; Schema: -; Owner: megxuser
--

CREATE SCHEMA web;


ALTER SCHEMA web OWNER TO megxuser;

--
-- Name: SCHEMA web; Type: COMMENT; Schema: -; Owner: megxuser
--

COMMENT ON SCHEMA web IS 'To accomodate data that is presented in the web.';


--
-- Name: web_r8; Type: SCHEMA; Schema: -; Owner: megxuser
--

CREATE SCHEMA web_r8;


ALTER SCHEMA web_r8 OWNER TO megxuser;

--
-- Name: SCHEMA web_r8; Type: COMMENT; Schema: -; Owner: megxuser
--

COMMENT ON SCHEMA web_r8 IS 'To accomodate data that is presented in the web.';


SET search_path = core, pg_catalog;

--
-- Name: date_resolution; Type: TYPE; Schema: core; Owner: rkottman
--

CREATE TYPE date_resolution AS ENUM (
    'microseconds',
    'milliseconds',
    'second',
    'minute',
    'hour',
    'day',
    'week',
    'month',
    'quarter',
    'year',
    'decade',
    'century',
    'millennium'
);


ALTER TYPE core.date_resolution OWNER TO rkottman;

--
-- Name: gender; Type: DOMAIN; Schema: core; Owner: rkottman
--

CREATE DOMAIN gender AS "char" NOT NULL DEFAULT '0'::"char"
	CONSTRAINT gender_check CHECK (((VALUE)::text = ANY (ARRAY['0'::text, '1'::text, '2'::text, '9'::text])));


ALTER DOMAIN core.gender OWNER TO rkottman;

--
-- Name: DOMAIN gender; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON DOMAIN gender IS 'ISO gender code for sex. 0=unknown; 1=male; 2=female; 9=not applicable';


--
-- Name: http; Type: DOMAIN; Schema: core; Owner: rkottman
--

CREATE DOMAIN http AS text NOT NULL DEFAULT ''::text
	CONSTRAINT http_check CHECK (((VALUE ~* '^(http://)([^/?#]*)?([^?#]*)(\?([^#]*))?(#(.*))?'::text) OR (VALUE = ''::text)));


ALTER DOMAIN core.http OWNER TO rkottman;

--
-- Name: nuc_seq; Type: DOMAIN; Schema: core; Owner: rkottman
--

CREATE DOMAIN nuc_seq AS text NOT NULL
	CONSTRAINT nuc_seq_check CHECK ((VALUE ~* '^[acgt]*$'::text));


ALTER DOMAIN core.nuc_seq OWNER TO rkottman;

--
-- Name: DOMAIN nuc_seq; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON DOMAIN nuc_seq IS 'Sequence of a,g,c,t';


--
-- Name: pp_wod_interpolations; Type: TYPE; Schema: core; Owner: ikostadi
--

CREATE TYPE pp_wod_interpolations AS (
	yr text,
	mon text,
	temperature text,
	salinity text,
	oxygen text,
	phosphate text,
	silicate text,
	nitrate text,
	nitrite text,
	ph text,
	chlorophyll text,
	plankton_biomass text,
	alkalinity text
);


ALTER TYPE core.pp_wod_interpolations OWNER TO ikostadi;

--
-- Name: proj_status; Type: TYPE; Schema: core; Owner: rkottman
--

CREATE TYPE proj_status AS ENUM (
    '',
    'incomplete',
    'complete'
);


ALTER TYPE core.proj_status OWNER TO rkottman;

--
-- Name: tax_path; Type: TYPE; Schema: core; Owner: ikostadi
--

CREATE TYPE tax_path AS (
	taxid text,
	tax_path text,
	rank_path text
);


ALTER TYPE core.tax_path OWNER TO ikostadi;

--
-- Name: uri; Type: DOMAIN; Schema: core; Owner: rkottman
--

CREATE DOMAIN uri AS text
	CONSTRAINT uri_check CHECK ((VALUE ~* '^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?'::text));


ALTER DOMAIN core.uri OWNER TO rkottman;

--
-- Name: url; Type: DOMAIN; Schema: core; Owner: rkottman
--

CREATE DOMAIN url AS text
	CONSTRAINT url_check CHECK ((VALUE ~* '^(([^:/?#]+):)(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?'::text));


ALTER DOMAIN core.url OWNER TO rkottman;

SET search_path = elayers, pg_catalog;

--
-- Name: wod_interpolations; Type: TYPE; Schema: elayers; Owner: rkottman
--

CREATE TYPE wod_interpolations AS (
	yr smallint,
	mon smallint,
	temperature double precision,
	salinity double precision,
	oxygen double precision,
	phosphate double precision,
	silicate double precision,
	nitrate double precision,
	nitrite double precision,
	ph double precision,
	chlorophyll double precision,
	plankton_biomass double precision,
	alkalinity double precision
);


ALTER TYPE elayers.wod_interpolations OWNER TO rkottman;

SET search_path = mfresults, pg_catalog;

--
-- Name: temp_raw_type; Type: TYPE; Schema: mfresults; Owner: rkottman
--

CREATE TYPE temp_raw_type AS (
	idw_temp double precision,
	month smallint,
	year smallint
);


ALTER TYPE mfresults.temp_raw_type OWNER TO rkottman;

SET search_path = pgq, pg_catalog;

--
-- Name: ret_batch_event; Type: TYPE; Schema: pgq; Owner: rkottman
--

CREATE TYPE ret_batch_event AS (
	ev_id bigint,
	ev_time timestamp with time zone,
	ev_txid bigint,
	ev_retry integer,
	ev_type text,
	ev_data text,
	ev_extra1 text,
	ev_extra2 text,
	ev_extra3 text,
	ev_extra4 text
);


ALTER TYPE pgq.ret_batch_event OWNER TO rkottman;

--
-- Name: ret_batch_info; Type: TYPE; Schema: pgq; Owner: rkottman
--

CREATE TYPE ret_batch_info AS (
	queue_name text,
	consumer_name text,
	batch_start timestamp with time zone,
	batch_end timestamp with time zone,
	prev_tick_id bigint,
	tick_id bigint,
	lag interval
);


ALTER TYPE pgq.ret_batch_info OWNER TO rkottman;

--
-- Name: ret_consumer_info; Type: TYPE; Schema: pgq; Owner: rkottman
--

CREATE TYPE ret_consumer_info AS (
	queue_name text,
	consumer_name text,
	lag interval,
	last_seen interval,
	last_tick bigint,
	current_batch bigint,
	next_tick bigint
);


ALTER TYPE pgq.ret_consumer_info OWNER TO rkottman;

--
-- Name: ret_queue_info; Type: TYPE; Schema: pgq; Owner: rkottman
--

CREATE TYPE ret_queue_info AS (
	queue_name text,
	queue_ntables integer,
	queue_cur_table integer,
	queue_rotation_period interval,
	queue_switch_time timestamp with time zone,
	queue_external_ticker boolean,
	queue_ticker_max_count integer,
	queue_ticker_max_lag interval,
	queue_ticker_idle_period interval,
	ticker_lag interval
);


ALTER TYPE pgq.ret_queue_info OWNER TO rkottman;

SET search_path = silva_r100_lsu, pg_catalog;

--
-- Name: circular_type; Type: TYPE; Schema: silva_r100_lsu; Owner: pyilmaz
--

CREATE TYPE circular_type AS ENUM (
    'yes',
    'no'
);


ALTER TYPE silva_r100_lsu.circular_type OWNER TO pyilmaz;

--
-- Name: complement_type; Type: TYPE; Schema: silva_r100_lsu; Owner: pyilmaz
--

CREATE TYPE complement_type AS ENUM (
    'yes',
    'no'
);


ALTER TYPE silva_r100_lsu.complement_type OWNER TO pyilmaz;

--
-- Name: straintype_type; Type: TYPE; Schema: silva_r100_lsu; Owner: pyilmaz
--

CREATE TYPE straintype_type AS ENUM (
    '-1',
    '0',
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7'
);


ALTER TYPE silva_r100_lsu.straintype_type OWNER TO pyilmaz;

SET search_path = silva_r100_ssu, pg_catalog;

--
-- Name: circular_type; Type: TYPE; Schema: silva_r100_ssu; Owner: pyilmaz
--

CREATE TYPE circular_type AS ENUM (
    'yes',
    'no'
);


ALTER TYPE silva_r100_ssu.circular_type OWNER TO pyilmaz;

--
-- Name: complement_type; Type: TYPE; Schema: silva_r100_ssu; Owner: pyilmaz
--

CREATE TYPE complement_type AS ENUM (
    'yes',
    'no'
);


ALTER TYPE silva_r100_ssu.complement_type OWNER TO pyilmaz;

--
-- Name: straintype_type; Type: TYPE; Schema: silva_r100_ssu; Owner: pyilmaz
--

CREATE TYPE straintype_type AS ENUM (
    '-1',
    '0',
    '1',
    '2',
    '3',
    '4',
    '5',
    '6',
    '7'
);


ALTER TYPE silva_r100_ssu.straintype_type OWNER TO pyilmaz;

SET search_path = silva_r102_lsu, pg_catalog;

--
-- Name: circular_type; Type: TYPE; Schema: silva_r102_lsu; Owner: pyilmaz
--

CREATE TYPE circular_type AS ENUM (
    'yes',
    'no'
);


ALTER TYPE silva_r102_lsu.circular_type OWNER TO pyilmaz;

SET search_path = silva_r102_ssu, pg_catalog;

--
-- Name: circular_type; Type: TYPE; Schema: silva_r102_ssu; Owner: pyilmaz
--

CREATE TYPE circular_type AS ENUM (
    'yes',
    'no'
);


ALTER TYPE silva_r102_ssu.circular_type OWNER TO pyilmaz;

SET search_path = core, pg_catalog;

--
-- Name: audit_table(); Type: FUNCTION; Schema: core; Owner: rkottman
--

CREATE FUNCTION audit_table() RETURNS trigger
    LANGUAGE plpgsql
    SET search_path TO core
    AS $_$
   
   DECLARE 
     op CONSTANT varchar(1) := substring(TG_OP from 1 for 1);
     mytable CONSTANT text := TG_TABLE_SCHEMA||'.'||TG_TABLE_NAME;
     audit_table CONSTANT text := mytable||'_audit';
     changed_cols text[] := '{}';
     test_value boolean;
     rec record;
   BEGIN

     IF (op = 'I') THEN --INSERT operation
        --Try to audit the action
          EXECUTE 'INSERT INTO '||audit_table||' SELECT '||quote_literal(op)||','||quote_literal(changed_cols)||',"current_user"(),now(),$1.*' USING NEW;          
     ELSIF (op = 'U') THEN
       
      --Fetch all columns of the auditted table
      FOR rec IN
        SELECT ordinal_position, column_name, data_type
        FROM information_schema.columns
        WHERE
            table_schema = quote_ident(TG_TABLE_SCHEMA)
        AND table_name = quote_ident(TG_TABLE_NAME)
        ORDER BY ordinal_position
      LOOP
       --Check the new and the old value of the same column are different  
       --TODO: is text conversion to do the comparison safe for all data types???
       EXECUTE 'SELECT CASE WHEN $1.' || rec.column_name || '::'||rec.data_type||' != $2.'||rec.column_name ||'::'||rec.data_type||' THEN TRUE ELSE FALSE END' INTO test_value USING NEW,OLD;

        IF (test_value AND rec.column_name!='ver') THEN
        --If the valus are different and the column is not version, then add the name of the column to the list of changed columns
        changed_cols := changed_cols || rec.column_name::text;
        --RAISE DEBUG 'value of % changed',rec.column_name;
        END IF;
      END LOOP;

         --Try to audit the action
         EXECUTE 'INSERT INTO '||audit_table||' SELECT '||quote_literal(op)||','||quote_literal(changed_cols)||',"current_user"(),now(),$1.*' USING NEW;
        
     ELSIF (op = 'D') THEN --DELETE operation
         --Try to audit the action
         EXECUTE 'INSERT INTO '||audit_table||' SELECT '||quote_literal(op)||','||quote_literal(changed_cols)||',"current_user"(),now(),$1.*' USING OLD;

     END IF;
    RETURN NULL; --does not matter for AFTER trigger
   END;
$_$;


ALTER FUNCTION core.audit_table() OWNER TO rkottman;

--
-- Name: blast_run_status(text, numeric); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION blast_run_status(s_id text, j_id numeric) RETURNS text
    LANGUAGE plpgsql
    AS $$
  DECLARE
    status text;
  BEGIN 

  
  SELECT into status
   CASE 
    WHEN (time_finished='infinity' AND (now()-time_submitted)>interval '5 hours') 
        OR (time_finished!='infinity' AND result::text = '<e/>'::text)
    THEN 'error' 
    ELSE  CASE 
              WHEN time_finished='infinity' THEN 'running' 
              ELSE 'finished' END
      END 

  FROM core.blast_run
  WHERE sid=s_id AND jid=j_id;


  RETURN COALESCE(status,'no such job');
  END;
$$;


ALTER FUNCTION core.blast_run_status(s_id text, j_id numeric) OWNER TO ikostadi;

--
-- Name: create_audit_table(text, text); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION create_audit_table(schemaname text, tablename text) RETURNS void
    LANGUAGE plpgsql
    SET search_path TO core
    AS $$

   DECLARE
     mytable CONSTANT text := schemaname||'.'||tablename; --the table to be audited
     audit_table CONSTANT text := mytable||'_audit'; --the audit table (where previous version of the records are stored); name convention is: attach '_audit' after the table name

   BEGIN
     --RAISE DEBUG 'AT= %',audit_table;
     BEGIN
       --try to add the id and version columns
       EXECUTE 'ALTER TABLE ' || mytable || ' ADD COLUMN ver smallint NOT NULL DEFAULT 1,
ADD COLUMN id bigserial UNIQUE NOT NULL;'; 
     EXCEPTION
       WHEN duplicate_column THEN --if id and ver columns exist, warn the user to check if they fulfil the requirements
         RAISE WARNING 'Table % already has column id or ver. An audit table will be created, nevertheless. Please, verify that the existing columns  fulfil the requirements for auditing (ver smallint NOT NULL DEFAULT 1, id bigserial UNIQUE NOT NULL)',mytable;
     END;

     BEGIN
       --Try to create the audit table, making sure curators can insert and nobody can update or delete
       EXECUTE 'CREATE TABLE '  || audit_table || ' (
             mod_type varchar(1) NOT NULL CHECK (mod_type ~ ''[IUD]''), --modification type, i.e. operation
             mod_cols text[] NOT NULL DEFAULT ''{}'', --which columns were modifed
             logname varchar NOT NULL DEFAULT "current_user"() REFERENCES core.logins (logname), --who performed the modification
             mod_time timestamp with time zone NOT NULL DEFAULT now(), --when was the entity modified
             LIKE '||mytable||'); --copy all columns of the original table
             GRANT INSERT ON TABLE '||audit_table||' TO curators;
             CREATE TRIGGER pp_audit_trg  AFTER INSERT OR UPDATE OR DELETE ON ' || mytable || ' FOR EACH ROW EXECUTE PROCEDURE core.audit_table();';
   
       EXCEPTION 
         --if the table exists, then complain and break off
         WHEN duplicate_table THEN
         RAISE EXCEPTION 'An audit table % already exists for table %', audit_table, mytable;
       
     END;
     RAISE NOTICE 'Created audit table % for table %',audit_table,mytable;
RETURN; 

  END;
$$;


ALTER FUNCTION core.create_audit_table(schemaname text, tablename text) OWNER TO ikostadi;

--
-- Name: dna_id_check(); Type: FUNCTION; Schema: core; Owner: rkottman
--

CREATE FUNCTION dna_id_check() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO core
    AS $$
  DECLARE
  r RECORD;

  BEGIN
  -- is the input did a secondary id?
    SELECT * INTO STRICT r FROM dna_id_maps WHERE sid = NEW.did AND sid_type = NEW.did_type;
    IF FOUND THEN
       --the insert uses a secondary id therefore  we just switch it around
      RAISE NOTICE 'Found % % is secondary key for % %', NEW.did, NEW.did_type, r.pid, r.pid_type;
      NEW.did := r.pid;
      NEW.did_type := r.pid_type;
      RETURN NEW;
    END IF;

    EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE DEBUG 
            'No existing secondary id found for % %', NEW.did, NEW.did_type;
            RETURN NEW;
        WHEN TOO_MANY_ROWS THEN
            RAISE EXCEPTION 'Not unique % % ', NEW.did, NEW.did_type;
            RETURN NEW;
  END;
$$;


ALTER FUNCTION core.dna_id_check() OWNER TO rkottman;

--
-- Name: dyn_exec(text); Type: FUNCTION; Schema: core; Owner: rkottman
--

CREATE FUNCTION dyn_exec(stm text) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
EXECUTE stm;
END;
$$;


ALTER FUNCTION core.dyn_exec(stm text) OWNER TO rkottman;

--
-- Name: FUNCTION dyn_exec(stm text); Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON FUNCTION dyn_exec(stm text) IS 'Executes dynamic sql statements from text argument';


--
-- Name: encode_uri(text); Type: FUNCTION; Schema: core; Owner: rkottman
--

CREATE FUNCTION encode_uri(t text) RETURNS text
    LANGUAGE plpgsql
    AS $$
   DECLARE
result text;
   BEGIN
      IF t ISNULL THEN
	result:='';
      END IF;
      IF t = '' THEN
        result = 'unclassified';
      ELSe
	result := replace(t, ' ', '_');
      END IF;
      
      RETURN result;
   END;
$$;


ALTER FUNCTION core.encode_uri(t text) OWNER TO rkottman;

--
-- Name: flag_entity_by_id(text, text, bigint, smallint, character varying, text); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION flag_entity_by_id(schemaname text, tablename text, myid bigint, myver smallint, myflag character varying, mylogname text) RETURNS void
    LANGUAGE plpgsql
    SET search_path TO core
    AS $$
   DECLARE 
     mytable CONSTANT text := (schemaname||'.'||tablename);
     test_id bigint DEFAULT NULL;
  BEGIN
--TODO: semantic logic on the flags; e.g. if someone tags entity as manually curated ALL inconsistent flags get disabled

-- Check if an entity with the provided id exists in the table given
BEGIN
   EXECUTE 'SELECT id FROM ' ||mytable||' WHERE id = '||myid INTO STRICT test_id;
   EXCEPTION
        WHEN NO_DATA_FOUND THEN
            RAISE EXCEPTION 'entity with id % was not found in table %', myid, mytable;
        WHEN TOO_MANY_ROWS THEN
            RAISE EXCEPTION 'entity id % is not unique in table %', myid,  mytable;
END;

BEGIN   
   -- Try to flag en entity with a certain flag
   INSERT INTO flagged_entities (flagged_table,id,flag,ver,logname) VALUES (
   mytable,myid,myflag,myver,mylogname);
   
   EXCEPTION WHEN unique_violation THEN
     RAISE NOTICE 'user % has already flagged entity with id %  version % from table % with the flag %, skipping', mylogname,myid,myver,mytable,'"'||myflag||'"';
   -- If the flag already exists for this version of the entity, silently ignore the action (i.e. DO NOTHING) and exit
   RETURN;
END;

   -- If the flag was successfully added, increment its counter in the flags table
   UPDATE flags SET flag_count=flag_count+1 WHERE flag=myflag;
END;
$$;


ALTER FUNCTION core.flag_entity_by_id(schemaname text, tablename text, myid bigint, myver smallint, myflag character varying, mylogname text) OWNER TO ikostadi;

--
-- Name: FUNCTION flag_entity_by_id(schemaname text, tablename text, myid bigint, myver smallint, myflag character varying, mylogname text); Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON FUNCTION flag_entity_by_id(schemaname text, tablename text, myid bigint, myver smallint, myflag character varying, mylogname text) IS 'used to add flag-entity relationships (i.e. add flags to entites)';


--
-- Name: get_sample_measure(integer, text, text); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION get_sample_measure(samid integer, param_name text, uom text) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
   DECLARE
   result numeric;
   BEGIN

       result := round(avg(sm.vals[1]), 1)::numeric
       FROM core.sample_measures sm
       WHERE sm.sid = samid AND sm.param = param_name AND sm.unit=uom
       GROUP BY material, conducted, conducted_res, device, unit;

   return result;

   END;

$$;


ALTER FUNCTION core.get_sample_measure(samid integer, param_name text, uom text) OWNER TO ikostadi;

--
-- Name: id_maps_tf(); Type: FUNCTION; Schema: core; Owner: rkottman
--

CREATE FUNCTION id_maps_tf() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO core
    AS $$
  DECLARE
  r RECORD;
  id text;
  id_type text; 
  BEGIN
     -- check if primary id already exists or primary id is already secondary id 
     EXECUTE 
       'SELECT * FROM '|| quote_ident(TG_TABLE_NAME) || 
       ' WHERE (sid = '|| quote_literal(NEW.pid) || ' AND ' 
          || 'sid_type = ' || quote_literal(NEW.pid_type) || ') OR 
             (pid = '|| quote_literal(NEW.pid) || ' AND pid_type = ' || quote_literal(NEW.pid_type) ||')'
        INTO r ;
     
    IF FOUND THEN
      -- the insert uses a secondary id therefore switching it around
      RAISE EXCEPTION 
        'Found % % is already primary or secondary key for % %', NEW.pid, NEW.pid_type, r.pid, r.pid_type;
      RETURN NEW;
    ELSIF NOT FOUND THEN
      RAISE NOTICE 'No secondary found accept as new primary key';
      IF isPreferredId(TG_TABLE_NAME::text, NEW.sid_type)  THEN
        RAISE NOTICE 'Exchanging secondary id with primary id';
        id := NEW.pid;
        id_type = NEW.pid_type;
        NEW.pid := NEW.sid;
        NEW.pid_type := NEW.sid_type;
        NEW.sid := id;
        NEW.sid_type := id_type; 
      END IF;
    END IF;
    RETURN NEW;
    EXCEPTION
        WHEN TOO_MANY_ROWS THEN
            RAISE EXCEPTION 'Not unique % %', NEW.pid, NEW.pid_type;
            RETURN NEW;
  END;
$$;


ALTER FUNCTION core.id_maps_tf() OWNER TO rkottman;

--
-- Name: is_active_user(character varying, text); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION is_active_user(uname character varying, upass text) RETURNS boolean
    LANGUAGE plpgsql COST 10
    SET search_path TO core
    AS $$

BEGIN

PERFORM true FROM core.logins WHERE logname=uname and pass=md5(upass);

IF FOUND THEN
  RETURN TRUE;
END IF;

RETURN FALSE;

 END;
$$;


ALTER FUNCTION core.is_active_user(uname character varying, upass text) OWNER TO ikostadi;

--
-- Name: isolates_b_trg(); Type: FUNCTION; Schema: core; Owner: rkottman
--

CREATE FUNCTION isolates_b_trg() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
  /* Basically creates the isolates.label entry from the concatenation of genus, species, strain attributes. 
   * Does trimming on all, initcap on genus, and lower on species.
   * 
   * @author rkottman@mpi-bremen.de
   */

  DECLARE
    tname CONSTANT text := 'isolates';

  BEGIN
   -- only works for core.samples table
    IF TG_TABLE_NAME != tname THEN
      RAISE EXCEPTION 'This trigger functions is only working on table %!',tname;
      RETURN NULL;
    END IF;
  
    -- for both situations
    IF TG_OP = 'UPDATE' OR TG_OP = 'INSERT' THEN
      NEW.genus := initcap(trim(NEW.genus));
      NEW.species := lower(trim(NEW.species));
      --now can create the correct full species name
      NEW.label := trim(NEW.genus || ' ' || NEW.species || ' ' || trim(NEW.strain));
      RAISE DEBUG 'NEW species name=%',NEW.label;
    END IF;

            
   RETURN NEW;
  END;
$$;


ALTER FUNCTION core.isolates_b_trg() OWNER TO rkottman;

--
-- Name: ispreferredid(regclass, text); Type: FUNCTION; Schema: core; Owner: rkottman
--

CREATE FUNCTION ispreferredid(tab regclass, id_type text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO core
    AS $$
  DECLARE
    pref boolean;
  BEGIN 
    SELECT INTO pref preferred from id_types WHERE code = id_type AND preferred = true;
    IF FOUND THEN
      RETURN pref;
    END IF;

    RETURN false;
  END;
$$;


ALTER FUNCTION core.ispreferredid(tab regclass, id_type text) OWNER TO rkottman;

--
-- Name: pangaea_url(public.geometry); Type: FUNCTION; Schema: core; Owner: rkottman
--

CREATE FUNCTION pangaea_url(geom public.geometry) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
   DECLARE
     p CONSTANT text  = 'http://www.pangaea.de/search?count=10&q=&env=All';
     
BEGIN

    RETURN p || '&minlat='::text || (y(geom) - 1::double precision) 
             || '&maxlat='::text || (y(geom) + 1::double precision) 
             || '&minlon='::text || (x(geom) - 1::double precision) 
             || '&maxlat='::text || (x(geom) + 1::double precision); 

END;
$$;


ALTER FUNCTION core.pangaea_url(geom public.geometry) OWNER TO rkottman;

--
-- Name: parse_latlon(text); Type: FUNCTION; Schema: core; Owner: tschweer
--

CREATE FUNCTION parse_latlon(i text) RETURNS public.geometry
    LANGUAGE plpgsql IMMUTABLE
    AS $$
   DECLARE
     lon double precision;
     lat double precision;
     p text;
     r geometry;
   BEGIN
      IF i ISNULL THEN
        RETURN r;
      END IF;
      
      p:=upper(i);
      lat:=substring(p from E'^([1-9]?[0-9](\\.[0-9]+)?) [NS]')::double precision;
        --90 bis 90
      lon:=substring(p from E' ((([1]?[0-9])?[0-9])(\\.[0-9]+)?) [WE]')::double precision;
        --180 bis -180
      IF lat IS NULL OR lon IS NULL THEN
        RAISE DEBUG 'Longitude or Latitude is wrong';
        RETURN NULL;
      END IF;

      IF lat > 90 OR lat < -90 THEN
        RAISE DEBUG 'Latitude is out of range=%. Should be between -90 to 90', lat;
        RETURN NULL;
      END IF;

      IF lon > 180 OR lon < -180 THEN
        RAISE DEBUG 'Longitude is out of range=%. Should be between -180 to 180', lon;
        RETURN NULL;
      END IF;

      IF position('S' in p) > 0 THEN
        lat := lat * -1;
      END IF; 

      IF position('W' in p) > 0 THEN
        lon := lon * -1;
      END IF; 

      r := st_pointfromtext(('Point ('::text || lon || ' ' || lat || ')'::text), -1);
            
      RETURN r;
   END;
$$;


ALTER FUNCTION core.parse_latlon(i text) OWNER TO tschweer;

--
-- Name: pp_chlorophyll(integer); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION pp_chlorophyll(sid integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
   DECLARE
   BEGIN
      RETURN core.pp_sample_measure(sid, 'chlorophyll'::text, 'microg/kg'::text);
   END;
$$;


ALTER FUNCTION core.pp_chlorophyll(sid integer) OWNER TO ikostadi;

--
-- Name: pp_depth(integer); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION pp_depth(sid integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
   DECLARE
   BEGIN
      RETURN core.pp_sample_measure(sid, 'depth'::text, 'm'::text);
   END;
$$;


ALTER FUNCTION core.pp_depth(sid integer) OWNER TO ikostadi;

--
-- Name: pp_evalue(numeric); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION pp_evalue(i numeric) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $_$
   DECLARE
     e text; --exponent
     b text; --base
     r text; --final result
   BEGIN
   
      IF (i>=0.01 OR i=0) THEN
        RETURN i::text;
      END IF;
      e := length((regexp_matches(substring(i::text from 3),'^0+'))[1])+1;
      b := round(regexp_replace(((regexp_matches(i::text,'[1-9]+$'))[1]),'^(.{1})',E'\\1\.')::double precision); 
      r := b::text || 'E-' || e::text;
                 
      RETURN r;
   END;
$_$;


ALTER FUNCTION core.pp_evalue(i numeric) OWNER TO ikostadi;

--
-- Name: pp_geom(public.geometry); Type: FUNCTION; Schema: core; Owner: rkottman
--

CREATE FUNCTION pp_geom(g public.geometry) RETURNS text
    LANGUAGE plpgsql
    SET search_path TO core, public
    AS $$
   DECLARE
result text;
   BEGIN
      IF g ISNULL THEN
	result:='NA';
      ELSE
	select case when st_y(g) <= 0 then abs(st_y(g)) || ' S ' else st_y(g) || ' N ' end
        || case when st_x(g) <= 0 then abs(st_x(g)) || ' W' else st_x(g) || ' E' end
	 into result;
      END IF;
      
      RETURN result;
   END;
$$;


ALTER FUNCTION core.pp_geom(g public.geometry) OWNER TO rkottman;

--
-- Name: pp_oxygen(integer); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION pp_oxygen(sid integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
   DECLARE
   BEGIN
      RETURN core.pp_sample_measure(sid, 'oxygen'::text, 'microg/l'::text);
   END;
$$;


ALTER FUNCTION core.pp_oxygen(sid integer) OWNER TO ikostadi;

--
-- Name: pp_salinity(integer); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION pp_salinity(sid integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
   DECLARE
   BEGIN
      RETURN core.pp_sample_measure(sid, 'salinity'::text, 'psu'::text);
   END;
$$;


ALTER FUNCTION core.pp_salinity(sid integer) OWNER TO ikostadi;

--
-- Name: pp_sample_measure(integer, text, text); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION pp_sample_measure(samid integer, param_name text, uom text) RETURNS text
    LANGUAGE plpgsql
    AS $$
   DECLARE
   result text;
   BEGIN

       result := round(avg(sm.vals[1]), 1)::text || ' '::text || sm.unit::text
        FROM core.sample_measures sm
       WHERE sm.sid = samid AND sm.param = param_name AND sm.unit=uom
       GROUP BY material, conducted, conducted_res, device, unit;



return COALESCE(result,'NA'::text);

   END;

$$;


ALTER FUNCTION core.pp_sample_measure(samid integer, param_name text, uom text) OWNER TO ikostadi;

--
-- Name: pp_temperature(integer); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION pp_temperature(sid integer) RETURNS text
    LANGUAGE plpgsql
    AS $$
   DECLARE
   BEGIN
      RETURN core.pp_sample_measure(sid, 'temperature'::text, 'degree Celsius'::text);
   END;
$$;


ALTER FUNCTION core.pp_temperature(sid integer) OWNER TO ikostadi;

--
-- Name: pp_wod05_idw_ip(real, real, real, real); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION pp_wod05_idw_ip(lon real, lat real, depth real, buffer real) RETURNS SETOF pp_wod_interpolations
    LANGUAGE plpgsql
    AS $$
-- inverse distance interpolation of WOD data
-- depth in meters, buffer in decimal degrees
DECLARE
  
BEGIN
    RETURN QUERY
    SELECT 
yr::text,
mon::text,
COALESCE(round(temperature::numeric,3)::text,'NA') AS temperature,
COALESCE(round(salinity::numeric,3)::text,'NA') AS salinity,
COALESCE(round(oxygen::numeric,3)::text,'NA') AS oxygen,
COALESCE(round(phosphate::numeric,3)::text,'NA') AS phosphate,
COALESCE(round(silicate::numeric,3)::text,'NA') AS silicate,
COALESCE(round(nitrate::numeric,3)::text,'NA') AS nitrate,
COALESCE(round(nitrite::numeric,3)::text,'NA') AS nitrite,
COALESCE(round(ph::numeric,3)::text,'NA') AS ph,
COALESCE(round(chlorophyll::numeric,3)::text,'NA') AS chlorophyll,
COALESCE(round(plankton_biomass::numeric,3)::text,'NA') AS plankton_biomass,
COALESCE(round(alkalinity::numeric,3)::text,'NA') AS alkalinity

FROM elayers.wod05_idw_ip(lon,lat,depth,buffer);
END;
$$;


ALTER FUNCTION core.pp_wod05_idw_ip(lon real, lat real, depth real, buffer real) OWNER TO ikostadi;

--
-- Name: project_pk_next(); Type: FUNCTION; Schema: core; Owner: rkottman
--

CREATE FUNCTION project_pk_next() RETURNS integer
    LANGUAGE plpgsql
    AS $$
   DECLARE
      next_pk integer;
   BEGIN
      UPDATE counter set projects = projects + 1;
      SELECT INTO next_pk projects from counter;
      
      RETURN next_pk;
   END;
$$;


ALTER FUNCTION core.project_pk_next() OWNER TO rkottman;

--
-- Name: project_sample_next(integer); Type: FUNCTION; Schema: core; Owner: rkottman
--

CREATE FUNCTION project_sample_next(project_id integer) RETURNS integer
    LANGUAGE plpgsql
    AS $$
DECLARE
   next_pk integer;
BEGIN
   UPDATE projects set samples = samples + 1
      WHERE id = project_id;
   SELECT INTO next_pk samples from projects
      WHERE id = project_id;
      
   RETURN next_pk;
END;
$$;


ALTER FUNCTION core.project_sample_next(project_id integer) OWNER TO rkottman;

--
-- Name: samples_b_trg(); Type: FUNCTION; Schema: core; Owner: rkottman
--

CREATE FUNCTION samples_b_trg() RETURNS trigger
    LANGUAGE plpgsql
    SET search_path TO core
    AS $_$
/*
 * In case a positive sample pool number the label is systematically changed accordingly. 
 *
 * @author rkottman@mpi-bremen.de
 */
 BEGIN
   -- only works for core.samples table
   IF TG_TABLE_NAME != 'samples' THEN
     RAISE EXCEPTION 'This trigger functions is only working on table=samples.';
     RETURN NULL;
   END IF;

   IF NEW.pool > 0 THEN
     -- if we do an update we have to make sure that no label suffix for pooling exist
     IF TG_OP = 'UPDATE' THEN
       NEW.label = regexp_replace(NEW.label,'-p[0-9]+$', '');
     END IF;
     -- now we can at the new pool suffix
     NEW.label = NEW.label || '-p' || NEW.pool;
     RAISE DEBUG 'New label=%',NEW.label;
   END IF;
            
   RETURN NEW;
 END;

$_$;


ALTER FUNCTION core.samples_b_trg() OWNER TO rkottman;

--
-- Name: search_tax_path(text); Type: FUNCTION; Schema: core; Owner: pyilmaz
--

CREATE FUNCTION search_tax_path(sarg text) RETURNS SETOF tax_path
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
  DECLARE
    result core.tax_path;
  BEGIN 
    SELECT INTO result taxid FROM ikostadi.tax_paths
     WHERE tax_path @ (sarg||'*%@')::ltxtquery LIMIT 1;
       
    IF FOUND THEN
      RETURN QUERY SELECT taxid,pp_tax_path,pp_rank_path FROM ikostadi.tax_paths
        WHERE tax_path @ (sarg||'*%@')::ltxtquery;
    ELSE 
      RETURN QUERY SELECT taxid,pp_tax_path,pp_rank_path FROM ikostadi.tax_paths 
        WHERE pp_tax_path LIKE '%'||sarg||'%';
    END IF;

    RETURN;
  END;
$$;


ALTER FUNCTION core.search_tax_path(sarg text) OWNER TO pyilmaz;

--
-- Name: set_samples_pk(); Type: FUNCTION; Schema: core; Owner: rkottman
--

CREATE FUNCTION set_samples_pk() RETURNS trigger
    LANGUAGE plpgsql
    SET search_path TO core, public
    AS $$
          BEGIN
            IF TG_TABLE_NAME = 'samples' THEN
              NEW.sid = project_sample_next(NEW.project);
             
            ELSEIF TG_TABLE_NAME = 'isolates' THEN 
              NEW.id = project_sample_next(NEW.project);
            ELSE 
              RAISE EXCEPTION 'Not a registered table for this trigger';
            END IF;
            
            RETURN NEW;
          END;
          $$;


ALTER FUNCTION core.set_samples_pk() OWNER TO rkottman;

--
-- Name: update_date_finished(); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION update_date_finished() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
   BEGIN
   NEW.time_finished = now();
   RETURN NEW;  
   END;
$$;


ALTER FUNCTION core.update_date_finished() OWNER TO ikostadi;

--
-- Name: update_version(); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION update_version() RETURNS trigger
    LANGUAGE plpgsql
    SET search_path TO core
    AS $$
   DECLARE
     op CONSTANT varchar(1) := substring(TG_OP from 1 for 1);
   BEGIN

     IF (op = 'I') THEN --at INSERT time, simply set theversion number to 1
      NEW.ver := 1;
      RETURN NEW;

     ELSIF (op = 'U') THEN --at UPDATE
       NEW.id := OLD.id; --keep the id the same
       NEW.ver = OLD.ver; --keep the version the same for the following changes-check
       
       IF (NEW = OLD) THEN --id and version being equal, are there actual changes to the rest of the data
           --if nothing else than the version changed, then silently skip the update
           RETURN NULL;
       END IF;

       NEW.ver := OLD.ver+1; --increment version number by 1
       RETURN NEW;
     END IF;

     RETURN NULL; --should not happen, so abort in this case (should only happen if the trigger was specified BEFORE DELETE)

   END;
$$;


ALTER FUNCTION core.update_version() OWNER TO ikostadi;

--
-- Name: woa_url_query(text, text, text); Type: FUNCTION; Schema: core; Owner: ikostadi
--

CREATE FUNCTION woa_url_query(lat text, lon text, dp text) RETURNS text
    LANGUAGE plpgsql
    AS $$
   DECLARE
   BEGIN
      RETURN 'latitude=' || lat || '&longitude=' || lon || '&depth='|| dp || '&parameter=all&season=0';
   END;
$$;


ALTER FUNCTION core.woa_url_query(lat text, lon text, dp text) OWNER TO ikostadi;

SET search_path = elayers, pg_catalog;

--
-- Name: chlorophyll_ip(double precision, double precision, smallint, smallint); Type: FUNCTION; Schema: elayers; Owner: ikostadi
--

CREATE FUNCTION chlorophyll_ip(x double precision, y double precision, yr smallint, season smallint) RETURNS real
    LANGUAGE plpgsql
    SET search_path TO public, elayers
    AS $$
-- Interpolates chlorophyll values based on data in the chlorophyll table
-- Usage: SELECT chlorophyll_ip(30, -150, 2004, 6);
-- TODO: make max_cv, min_ss function parameters and 30 resp. 10 default values
DECLARE
  max_cv integer := 30; --Maximum coefficient of variation (%) tolerated  
  min_ss integer := 10; --Minimum sampling_size required 
  result real;
BEGIN

  SELECT INTO result 
              avg( c.val::real ) 
         FROM chlorophyll c
        WHERE c.yr=yr
          AND c.season=season
          AND (st_DISTANCE ( ST_makepoint(x,y), c.geom)=0 )
          AND c.sampling_size > min_ss
          AND c.max_covar < max_cv;


  RETURN result;

END $$;


ALTER FUNCTION elayers.chlorophyll_ip(x double precision, y double precision, yr smallint, season smallint) OWNER TO ikostadi;

--
-- Name: FUNCTION chlorophyll_ip(x double precision, y double precision, yr smallint, season smallint); Type: COMMENT; Schema: elayers; Owner: ikostadi
--

COMMENT ON FUNCTION chlorophyll_ip(x double precision, y double precision, yr smallint, season smallint) IS 'Interpolates chlorophyll values based on data in the chlorophyll table';


--
-- Name: is_marine(point); Type: FUNCTION; Schema: elayers; Owner: ikostadi
--

CREATE FUNCTION is_marine(inp point) RETURNS boolean
    LANGUAGE plpgsql STABLE STRICT
    AS $$
BEGIN
   PERFORM ST_Within(inp,o.geom) FROM elayers.ocean_limits as o WHERE ST_Within(inp,o.geom) IS TRUE;
   RETURN FOUND; 
     
END;
$$;


ALTER FUNCTION elayers.is_marine(inp point) OWNER TO ikostadi;

--
-- Name: is_marine(public.geometry); Type: FUNCTION; Schema: elayers; Owner: ikostadi
--

CREATE FUNCTION is_marine(inp public.geometry) RETURNS boolean
    LANGUAGE plpgsql STABLE STRICT
    AS $$
BEGIN
   PERFORM ST_Within(inp,o.geom) FROM elayers.ocean_limits as o WHERE ST_Within(inp,o.geom) IS TRUE;
   RETURN FOUND; 
     
END;
$$;


ALTER FUNCTION elayers.is_marine(inp public.geometry) OWNER TO ikostadi;

--
-- Name: FUNCTION is_marine(inp public.geometry); Type: COMMENT; Schema: elayers; Owner: ikostadi
--

COMMENT ON FUNCTION is_marine(inp public.geometry) IS 'returns true if a geometry is within the borders of the ocean, false otherwise';


--
-- Name: woa05_idw_ip(double precision, double precision, real, text, smallint); Type: FUNCTION; Schema: elayers; Owner: ikostadi
--

CREATE FUNCTION woa05_idw_ip(x double precision, y double precision, depth real, param text, season smallint) RETURNS numeric
    LANGUAGE plpgsql
    AS $$
-- interplates param from WOA tables
-- TODO: parameter check e.g. depth for valid values 
DECLARE

res numeric;

grid_up real;
grid_down real;

val_up numeric;
val_down numeric;

loc geometry;

BEGIN
  IF param = '' THEN
    RAISE EXCEPTION 'A non empty parameter must be given';
  END IF;
  
  --determine distance to upper and lower standard levels and their depth
  SELECT INTO grid_up max(sl.depth::real) FROM elayers.standard_levels sl WHERE sl.depth::real <= depth;
  SELECT INTO grid_down min(sl.depth::real) FROM elayers.standard_levels sl WHERE sl.depth::real >= depth;

  EXECUTE 'SELECT sum(1::numeric/ dist * val) / sum(1::numeric/dist)   
          FROM (SELECT * ,
                       CASE WHEN abs(' || depth || '- depth::real) = 0 THEN 1 ELSE abs(' || depth || ' - depth::real) END as dist
                   FROM elayers.woa05_' || param || ' AS foo 
                 WHERE foo.season = ' || season || ' AND foo.depth IN (' || grid_up || ', ' || grid_down || ')
               ) AS p
         WHERE ST_Distance(ST_MakePoint(' || x || '::double precision,' || y || '::double precision) , p.geom) = 0
      GROUP BY season;' INTO res;

  RETURN res;

END$$;


ALTER FUNCTION elayers.woa05_idw_ip(x double precision, y double precision, depth real, param text, season smallint) OWNER TO ikostadi;

--
-- Name: FUNCTION woa05_idw_ip(x double precision, y double precision, depth real, param text, season smallint); Type: COMMENT; Schema: elayers; Owner: ikostadi
--

COMMENT ON FUNCTION woa05_idw_ip(x double precision, y double precision, depth real, param text, season smallint) IS 'Interpolates param from WOA tables';


--
-- Name: wod05_idw_ip(real, real, real, real); Type: FUNCTION; Schema: elayers; Owner: rkottman
--

CREATE FUNCTION wod05_idw_ip(lon real, lat real, depth real, buffer real) RETURNS SETOF wod_interpolations
    LANGUAGE plpgsql
    SET search_path TO elayers
    AS $$
-- inverse distance interpolation of WOD data
-- depth in meters, buffer in decimal degrees
DECLARE
  
BEGIN
    RETURN QUERY
      SELECT
        yr,
        mon,
        sum((1/dist) * temperature)/sum(1/dist) as temperature,
        sum((1/dist) * salinity)/sum(1/dist) as salinity,
        sum((1/dist) * oxygen)/sum(1/dist) as oxygen,
        sum((1/dist) * phosphate)/sum(1/dist) as phosphate,
        sum((1/dist) * silicate)/sum(1/dist) as silicate,
        sum((1/dist) * nitrate)/sum(1/dist) as nitrate,
        sum((1/dist) * nitrite)/sum(1/dist) as nitrite,
        sum((1/dist) * ph)/sum(1/dist) as ph,
        sum((1/dist) * chlorophyll)/sum(1/dist) as chlorophyll,
        sum((1/dist) * plankton_biomass)/sum(1/dist) as plankton_biomass,
        sum((1/dist) * alkalinity)/sum(1/dist) as alkalinity
        
       FROM (SELECT CASE 
                    WHEN (((( lon - longitude) ^ 2.0) + ((lat - latitude) ^ 2.0)) ^ 0.5) = 0 
                    THEN 1 
                    ELSE (((( lon - longitude) ^ 2.0) + ((lat - latitude) ^ 2.0)) ^ 0.5) END as dist,
                     foo.*
               FROM wod_within_buffer(lon,lat,depth,buffer) AS foo) as final 
           GROUP BY yr, mon;
  RETURN;
END;
$$;


ALTER FUNCTION elayers.wod05_idw_ip(lon real, lat real, depth real, buffer real) OWNER TO rkottman;

--
-- Name: FUNCTION wod05_idw_ip(lon real, lat real, depth real, buffer real); Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON FUNCTION wod05_idw_ip(lon real, lat real, depth real, buffer real) IS 'inverse distance interpolation of WOD data';


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: wod05_osd_all; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE wod05_osd_all (
    cruise character varying(255),
    station bigint,
    type character varying(255),
    mon_day_yr character varying(255),
    hh_mm character varying(255),
    longitude real,
    latitude real,
    bot_depth real,
    depth real,
    temperature real,
    salinity real,
    oxygen real,
    phosphate real,
    silicate real,
    nitrate real,
    nitrite real,
    ph real,
    chlorophyll real,
    plankton_biomass real,
    alkalinity real,
    nitrate_nitrite real,
    yr smallint,
    mon smallint,
    wod05_id integer DEFAULT (-1) NOT NULL
);


ALTER TABLE elayers.wod05_osd_all OWNER TO rkottman;

--
-- Name: wod_within_buffer(real, real, real, real); Type: FUNCTION; Schema: elayers; Owner: ikostadi
--

CREATE FUNCTION wod_within_buffer(lon real, lat real, depth real, buffer real) RETURNS SETOF wod05_osd_all
    LANGUAGE plpgsql
    SET search_path TO elayers
    AS $_$
-- selects data points from WOD according to given geospatial volume
-- mainly helper function for wod05_idw_ip
-- TODO: better depth buffer determination
DECLARE
  lon real := $1; -- need it as non constant variable
  u_depth real; --upper depth
  l_depth real; --lower depth
BEGIN

  IF depth NOT BETWEEN 0 AND 11000 THEN
    RAISE EXCEPTION 'Invalid depth % must be between 0 and 11000', depth;

    ELSIF lat NOT BETWEEN -90 AND 90 THEN
      RAISE EXCEPTION 'Invalid latitude % must be between -90 and 90', lat;
    ELSIF lon NOT BETWEEN -180 AND 180 THEN
      RAISE EXCEPTION 'Invalid longitude % must be between -180 and 180', lat;
  END IF;


  IF lon < 0 THEN
    --if negative transform because in wod05_osd_all table long values  are 0 to 360
    lon:= ((lon * -1) - 360) * -1;  
  END IF;

  IF depth BETWEEN 0 AND 5 THEN
    u_depth := 0;
    l_depth := 10;
  ELSIF depth BETWEEN 6 AND 10 THEN
    u_depth := depth - 5;
    l_depth := depth + 5;
  ELSIF depth BETWEEN 11 AND 30 THEN
    u_depth := depth - 5;
    l_depth := depth + 5;
  ELSIF depth BETWEEN 31 AND 50 THEN
    u_depth := depth - 10;
    l_depth := depth + 10;
  ELSIF depth BETWEEN 51 AND 125 THEN
    u_depth := depth - 12.5;
    l_depth := depth + 12.5;
  ELSIF depth BETWEEN 126 AND 300 THEN
    u_depth := depth - 25;
    l_depth := depth + 25;
  ELSIF depth BETWEEN 301 AND 1500 THEN
    u_depth := depth - 50;
    l_depth := depth + 50;
  ELSIF depth BETWEEN 1501 AND 2000 THEN
    u_depth := depth - 125;
    l_depth := depth + 125;
  ELSIF depth BETWEEN 2001 AND 9000 THEN -- end of WOD standard depths
    u_depth := depth - 250;
    l_depth := depth + 250;
  ELSIF depth BETWEEN 9001 AND 10911 THEN  -- max depth (Marianne)
    u_depth := depth - 250;
    l_depth := depth + 250;
END IF;

  RETURN QUERY SELECT * FROM wod05_osd_all as wod
                       WHERE (((((((wod.longitude>= (( lon - buffer)))
			AND (wod.longitude <= (lon + buffer))))
			AND (wod.latitude >= ((lat - buffer))))
			AND (wod.latitude <= ((lat + buffer))))
			AND (wod.depth >= (u_depth))) -- top depth
			AND (wod.depth <= (l_depth))); --lower depth

  RETURN;
END;
$_$;


ALTER FUNCTION elayers.wod_within_buffer(lon real, lat real, depth real, buffer real) OWNER TO ikostadi;

--
-- Name: FUNCTION wod_within_buffer(lon real, lat real, depth real, buffer real); Type: COMMENT; Schema: elayers; Owner: ikostadi
--

COMMENT ON FUNCTION wod_within_buffer(lon real, lat real, depth real, buffer real) IS 'selects data points from WOD according to given geospatial volume
-- mainly helper function for wod05_idw_ip';


SET search_path = mfdata, pg_catalog;

--
-- Name: add_minmax(integer); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION add_minmax(integer) RETURNS real
    LANGUAGE plpgsql
    AS $$DECLARE

mini float4;
maxi float4;


BEGIN

CREATE TABLE aa_minmax_temp (Var_period text, Var_depth text, Minimum float4, Maximum float4);
mini :=  min(temp_0000) FROM temp_00_grid;
maxi :=  max(temp_0000) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_00_grid;
maxi :=  max(temp_0010) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_00_grid;
maxi :=  max(temp_0020) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_00_grid;
maxi :=  max(temp_0030) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_00_grid;
maxi :=  max(temp_0050) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_00_grid;
maxi :=  max(temp_0075) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_00_grid;
maxi :=  max(temp_0100) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_00_grid;
maxi :=  max(temp_0125) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_00_grid;
maxi :=  max(temp_0150) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_00_grid;
maxi :=  max(temp_0200) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_00_grid;
maxi :=  max(temp_0250) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_00_grid;
maxi :=  max(temp_0300) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_00_grid;
maxi :=  max(temp_0400) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_00_grid;
maxi :=  max(temp_0500) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_00_grid;
maxi :=  max(temp_0600) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_00_grid;
maxi :=  max(temp_0700) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_00_grid;
maxi :=  max(temp_0800) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_00_grid;
maxi :=  max(temp_0900) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_00_grid;
maxi :=  max(temp_1000) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_00_grid;
maxi :=  max(temp_1100) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_00_grid;
maxi :=  max(temp_1200) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_00_grid;
maxi :=  max(temp_1300) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_00_grid;
maxi :=  max(temp_1400) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_1500) FROM temp_00_grid;
maxi :=  max(temp_1500) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_1500', mini, maxi);

mini :=  min(temp_1750) FROM temp_00_grid;
maxi :=  max(temp_1750) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_1750', mini, maxi);

mini :=  min(temp_2000) FROM temp_00_grid;
maxi :=  max(temp_2000) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_2000', mini, maxi);

mini :=  min(temp_2500) FROM temp_00_grid;
maxi :=  max(temp_2500) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_2500', mini, maxi);

mini :=  min(temp_3000) FROM temp_00_grid;
maxi :=  max(temp_3000) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_3000', mini, maxi);

mini :=  min(temp_3500) FROM temp_00_grid;
maxi :=  max(temp_3500) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_3500', mini, maxi);

mini :=  min(temp_4000) FROM temp_00_grid;
maxi :=  max(temp_4000) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_4000', mini, maxi);

mini :=  min(temp_4500) FROM temp_00_grid;
maxi :=  max(temp_4500) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_4500', mini, maxi);

mini :=  min(temp_5000) FROM temp_00_grid;
maxi :=  max(temp_5000) FROM temp_00_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_00_grid', 'temp_5000', mini, maxi);

mini :=  min(temp_0000) FROM temp_01_grid;
maxi :=  max(temp_0000) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_01_grid;
maxi :=  max(temp_0010) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_01_grid;
maxi :=  max(temp_0020) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_01_grid;
maxi :=  max(temp_0030) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_01_grid;
maxi :=  max(temp_0050) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_01_grid;
maxi :=  max(temp_0075) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_01_grid;
maxi :=  max(temp_0100) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_01_grid;
maxi :=  max(temp_0125) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_01_grid;
maxi :=  max(temp_0150) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_01_grid;
maxi :=  max(temp_0200) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_01_grid;
maxi :=  max(temp_0250) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_01_grid;
maxi :=  max(temp_0300) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_01_grid;
maxi :=  max(temp_0400) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_01_grid;
maxi :=  max(temp_0500) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_01_grid;
maxi :=  max(temp_0600) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_01_grid;
maxi :=  max(temp_0700) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_01_grid;
maxi :=  max(temp_0800) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_01_grid;
maxi :=  max(temp_0900) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_01_grid;
maxi :=  max(temp_1000) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_01_grid;
maxi :=  max(temp_1100) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_01_grid;
maxi :=  max(temp_1200) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_01_grid;
maxi :=  max(temp_1300) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_01_grid;
maxi :=  max(temp_1400) FROM temp_01_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_01_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_0000) FROM temp_02_grid;
maxi :=  max(temp_0000) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_02_grid;
maxi :=  max(temp_0010) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_02_grid;
maxi :=  max(temp_0020) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_02_grid;
maxi :=  max(temp_0030) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_02_grid;
maxi :=  max(temp_0050) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_02_grid;
maxi :=  max(temp_0075) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_02_grid;
maxi :=  max(temp_0100) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_02_grid;
maxi :=  max(temp_0125) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_02_grid;
maxi :=  max(temp_0150) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_02_grid;
maxi :=  max(temp_0200) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_02_grid;
maxi :=  max(temp_0250) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_02_grid;
maxi :=  max(temp_0300) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_02_grid;
maxi :=  max(temp_0400) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_02_grid;
maxi :=  max(temp_0500) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_02_grid;
maxi :=  max(temp_0600) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_02_grid;
maxi :=  max(temp_0700) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_02_grid;
maxi :=  max(temp_0800) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_02_grid;
maxi :=  max(temp_0900) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_02_grid;
maxi :=  max(temp_1000) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_02_grid;
maxi :=  max(temp_1100) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_02_grid;
maxi :=  max(temp_1200) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_02_grid;
maxi :=  max(temp_1300) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_02_grid;
maxi :=  max(temp_1400) FROM temp_02_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_02_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_0000) FROM temp_03_grid;
maxi :=  max(temp_0000) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_03_grid;
maxi :=  max(temp_0010) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_03_grid;
maxi :=  max(temp_0020) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_03_grid;
maxi :=  max(temp_0030) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_03_grid;
maxi :=  max(temp_0050) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_03_grid;
maxi :=  max(temp_0075) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_03_grid;
maxi :=  max(temp_0100) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_03_grid;
maxi :=  max(temp_0125) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_03_grid;
maxi :=  max(temp_0150) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_03_grid;
maxi :=  max(temp_0200) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_03_grid;
maxi :=  max(temp_0250) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_03_grid;
maxi :=  max(temp_0300) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_03_grid;
maxi :=  max(temp_0400) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_03_grid;
maxi :=  max(temp_0500) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_03_grid;
maxi :=  max(temp_0600) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_03_grid;
maxi :=  max(temp_0700) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_03_grid;
maxi :=  max(temp_0800) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_03_grid;
maxi :=  max(temp_0900) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_03_grid;
maxi :=  max(temp_1000) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_03_grid;
maxi :=  max(temp_1100) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_03_grid;
maxi :=  max(temp_1200) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_03_grid;
maxi :=  max(temp_1300) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_03_grid;
maxi :=  max(temp_1400) FROM temp_03_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_03_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_0000) FROM temp_04_grid;
maxi :=  max(temp_0000) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_04_grid;
maxi :=  max(temp_0010) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_04_grid;
maxi :=  max(temp_0020) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_04_grid;
maxi :=  max(temp_0030) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_04_grid;
maxi :=  max(temp_0050) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_04_grid;
maxi :=  max(temp_0075) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_04_grid;
maxi :=  max(temp_0100) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_04_grid;
maxi :=  max(temp_0125) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_04_grid;
maxi :=  max(temp_0150) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_04_grid;
maxi :=  max(temp_0200) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_04_grid;
maxi :=  max(temp_0250) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_04_grid;
maxi :=  max(temp_0300) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_04_grid;
maxi :=  max(temp_0400) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_04_grid;
maxi :=  max(temp_0500) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_04_grid;
maxi :=  max(temp_0600) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_04_grid;
maxi :=  max(temp_0700) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_04_grid;
maxi :=  max(temp_0800) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_04_grid;
maxi :=  max(temp_0900) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_04_grid;
maxi :=  max(temp_1000) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_04_grid;
maxi :=  max(temp_1100) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_04_grid;
maxi :=  max(temp_1200) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_04_grid;
maxi :=  max(temp_1300) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_04_grid;
maxi :=  max(temp_1400) FROM temp_04_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_04_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_0000) FROM temp_05_grid;
maxi :=  max(temp_0000) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_05_grid;
maxi :=  max(temp_0010) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_05_grid;
maxi :=  max(temp_0020) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_05_grid;
maxi :=  max(temp_0030) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_05_grid;
maxi :=  max(temp_0050) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_05_grid;
maxi :=  max(temp_0075) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_05_grid;
maxi :=  max(temp_0100) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_05_grid;
maxi :=  max(temp_0125) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_05_grid;
maxi :=  max(temp_0150) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_05_grid;
maxi :=  max(temp_0200) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_05_grid;
maxi :=  max(temp_0250) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_05_grid;
maxi :=  max(temp_0300) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_05_grid;
maxi :=  max(temp_0400) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_05_grid;
maxi :=  max(temp_0500) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_05_grid;
maxi :=  max(temp_0600) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_05_grid;
maxi :=  max(temp_0700) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_05_grid;
maxi :=  max(temp_0800) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_05_grid;
maxi :=  max(temp_0900) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_05_grid;
maxi :=  max(temp_1000) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_05_grid;
maxi :=  max(temp_1100) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_05_grid;
maxi :=  max(temp_1200) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_05_grid;
maxi :=  max(temp_1300) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_05_grid;
maxi :=  max(temp_1400) FROM temp_05_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_05_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_0000) FROM temp_06_grid;
maxi :=  max(temp_0000) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_06_grid;
maxi :=  max(temp_0010) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_06_grid;
maxi :=  max(temp_0020) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_06_grid;
maxi :=  max(temp_0030) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_06_grid;
maxi :=  max(temp_0050) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_06_grid;
maxi :=  max(temp_0075) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_06_grid;
maxi :=  max(temp_0100) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_06_grid;
maxi :=  max(temp_0125) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_06_grid;
maxi :=  max(temp_0150) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_06_grid;
maxi :=  max(temp_0200) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_06_grid;
maxi :=  max(temp_0250) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_06_grid;
maxi :=  max(temp_0300) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_06_grid;
maxi :=  max(temp_0400) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_06_grid;
maxi :=  max(temp_0500) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_06_grid;
maxi :=  max(temp_0600) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_06_grid;
maxi :=  max(temp_0700) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_06_grid;
maxi :=  max(temp_0800) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_06_grid;
maxi :=  max(temp_0900) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_06_grid;
maxi :=  max(temp_1000) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_06_grid;
maxi :=  max(temp_1100) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_06_grid;
maxi :=  max(temp_1200) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_06_grid;
maxi :=  max(temp_1300) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_06_grid;
maxi :=  max(temp_1400) FROM temp_06_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_06_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_0000) FROM temp_07_grid;
maxi :=  max(temp_0000) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_07_grid;
maxi :=  max(temp_0010) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_07_grid;
maxi :=  max(temp_0020) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_07_grid;
maxi :=  max(temp_0030) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_07_grid;
maxi :=  max(temp_0050) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_07_grid;
maxi :=  max(temp_0075) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_07_grid;
maxi :=  max(temp_0100) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_07_grid;
maxi :=  max(temp_0125) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_07_grid;
maxi :=  max(temp_0150) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_07_grid;
maxi :=  max(temp_0200) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_07_grid;
maxi :=  max(temp_0250) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_07_grid;
maxi :=  max(temp_0300) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_07_grid;
maxi :=  max(temp_0400) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_07_grid;
maxi :=  max(temp_0500) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_07_grid;
maxi :=  max(temp_0600) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_07_grid;
maxi :=  max(temp_0700) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_07_grid;
maxi :=  max(temp_0800) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_07_grid;
maxi :=  max(temp_0900) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_07_grid;
maxi :=  max(temp_1000) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_07_grid;
maxi :=  max(temp_1100) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_07_grid;
maxi :=  max(temp_1200) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_07_grid;
maxi :=  max(temp_1300) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_07_grid;
maxi :=  max(temp_1400) FROM temp_07_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_07_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_0000) FROM temp_08_grid;
maxi :=  max(temp_0000) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_08_grid;
maxi :=  max(temp_0010) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_08_grid;
maxi :=  max(temp_0020) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_08_grid;
maxi :=  max(temp_0030) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_08_grid;
maxi :=  max(temp_0050) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_08_grid;
maxi :=  max(temp_0075) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_08_grid;
maxi :=  max(temp_0100) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_08_grid;
maxi :=  max(temp_0125) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_08_grid;
maxi :=  max(temp_0150) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_08_grid;
maxi :=  max(temp_0200) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_08_grid;
maxi :=  max(temp_0250) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_08_grid;
maxi :=  max(temp_0300) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_08_grid;
maxi :=  max(temp_0400) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_08_grid;
maxi :=  max(temp_0500) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_08_grid;
maxi :=  max(temp_0600) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_08_grid;
maxi :=  max(temp_0700) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_08_grid;
maxi :=  max(temp_0800) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_08_grid;
maxi :=  max(temp_0900) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_08_grid;
maxi :=  max(temp_1000) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_08_grid;
maxi :=  max(temp_1100) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_08_grid;
maxi :=  max(temp_1200) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_08_grid;
maxi :=  max(temp_1300) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_08_grid;
maxi :=  max(temp_1400) FROM temp_08_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_08_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_0000) FROM temp_09_grid;
maxi :=  max(temp_0000) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_09_grid;
maxi :=  max(temp_0010) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_09_grid;
maxi :=  max(temp_0020) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_09_grid;
maxi :=  max(temp_0030) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_09_grid;
maxi :=  max(temp_0050) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_09_grid;
maxi :=  max(temp_0075) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_09_grid;
maxi :=  max(temp_0100) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_09_grid;
maxi :=  max(temp_0125) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_09_grid;
maxi :=  max(temp_0150) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_09_grid;
maxi :=  max(temp_0200) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_09_grid;
maxi :=  max(temp_0250) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_09_grid;
maxi :=  max(temp_0300) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_09_grid;
maxi :=  max(temp_0400) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_09_grid;
maxi :=  max(temp_0500) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_09_grid;
maxi :=  max(temp_0600) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_09_grid;
maxi :=  max(temp_0700) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_09_grid;
maxi :=  max(temp_0800) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_09_grid;
maxi :=  max(temp_0900) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_09_grid;
maxi :=  max(temp_1000) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_09_grid;
maxi :=  max(temp_1100) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_09_grid;
maxi :=  max(temp_1200) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_09_grid;
maxi :=  max(temp_1300) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_09_grid;
maxi :=  max(temp_1400) FROM temp_09_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_09_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_0000) FROM temp_10_grid;
maxi :=  max(temp_0000) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_10_grid;
maxi :=  max(temp_0010) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_10_grid;
maxi :=  max(temp_0020) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_10_grid;
maxi :=  max(temp_0030) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_10_grid;
maxi :=  max(temp_0050) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_10_grid;
maxi :=  max(temp_0075) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_10_grid;
maxi :=  max(temp_0100) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_10_grid;
maxi :=  max(temp_0125) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_10_grid;
maxi :=  max(temp_0150) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_10_grid;
maxi :=  max(temp_0200) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_10_grid;
maxi :=  max(temp_0250) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_10_grid;
maxi :=  max(temp_0300) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_10_grid;
maxi :=  max(temp_0400) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_10_grid;
maxi :=  max(temp_0500) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_10_grid;
maxi :=  max(temp_0600) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_10_grid;
maxi :=  max(temp_0700) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_10_grid;
maxi :=  max(temp_0800) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_10_grid;
maxi :=  max(temp_0900) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_10_grid;
maxi :=  max(temp_1000) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_10_grid;
maxi :=  max(temp_1100) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_10_grid;
maxi :=  max(temp_1200) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_10_grid;
maxi :=  max(temp_1300) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_10_grid;
maxi :=  max(temp_1400) FROM temp_10_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_10_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_0000) FROM temp_11_grid;
maxi :=  max(temp_0000) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_11_grid;
maxi :=  max(temp_0010) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_11_grid;
maxi :=  max(temp_0020) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_11_grid;
maxi :=  max(temp_0030) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_11_grid;
maxi :=  max(temp_0050) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_11_grid;
maxi :=  max(temp_0075) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_11_grid;
maxi :=  max(temp_0100) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_11_grid;
maxi :=  max(temp_0125) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_11_grid;
maxi :=  max(temp_0150) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_11_grid;
maxi :=  max(temp_0200) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_11_grid;
maxi :=  max(temp_0250) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_11_grid;
maxi :=  max(temp_0300) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_11_grid;
maxi :=  max(temp_0400) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_11_grid;
maxi :=  max(temp_0500) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_11_grid;
maxi :=  max(temp_0600) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_11_grid;
maxi :=  max(temp_0700) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_11_grid;
maxi :=  max(temp_0800) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_11_grid;
maxi :=  max(temp_0900) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_11_grid;
maxi :=  max(temp_1000) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_11_grid;
maxi :=  max(temp_1100) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_11_grid;
maxi :=  max(temp_1200) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_11_grid;
maxi :=  max(temp_1300) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_11_grid;
maxi :=  max(temp_1400) FROM temp_11_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_11_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_0000) FROM temp_12_grid;
maxi :=  max(temp_0000) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_12_grid;
maxi :=  max(temp_0010) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_12_grid;
maxi :=  max(temp_0020) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_12_grid;
maxi :=  max(temp_0030) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_12_grid;
maxi :=  max(temp_0050) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_12_grid;
maxi :=  max(temp_0075) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_12_grid;
maxi :=  max(temp_0100) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_12_grid;
maxi :=  max(temp_0125) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_12_grid;
maxi :=  max(temp_0150) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_12_grid;
maxi :=  max(temp_0200) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_12_grid;
maxi :=  max(temp_0250) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_12_grid;
maxi :=  max(temp_0300) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_12_grid;
maxi :=  max(temp_0400) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_12_grid;
maxi :=  max(temp_0500) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_12_grid;
maxi :=  max(temp_0600) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_12_grid;
maxi :=  max(temp_0700) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_12_grid;
maxi :=  max(temp_0800) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_12_grid;
maxi :=  max(temp_0900) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_12_grid;
maxi :=  max(temp_1000) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_12_grid;
maxi :=  max(temp_1100) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_12_grid;
maxi :=  max(temp_1200) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_12_grid;
maxi :=  max(temp_1300) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_12_grid;
maxi :=  max(temp_1400) FROM temp_12_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_12_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_0000) FROM temp_13_grid;
maxi :=  max(temp_0000) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_13_grid;
maxi :=  max(temp_0010) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_13_grid;
maxi :=  max(temp_0020) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_13_grid;
maxi :=  max(temp_0030) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_13_grid;
maxi :=  max(temp_0050) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_13_grid;
maxi :=  max(temp_0075) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_13_grid;
maxi :=  max(temp_0100) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_13_grid;
maxi :=  max(temp_0125) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_13_grid;
maxi :=  max(temp_0150) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_13_grid;
maxi :=  max(temp_0200) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_13_grid;
maxi :=  max(temp_0250) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_13_grid;
maxi :=  max(temp_0300) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_13_grid;
maxi :=  max(temp_0400) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_13_grid;
maxi :=  max(temp_0500) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_13_grid;
maxi :=  max(temp_0600) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_13_grid;
maxi :=  max(temp_0700) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_13_grid;
maxi :=  max(temp_0800) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_13_grid;
maxi :=  max(temp_0900) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_13_grid;
maxi :=  max(temp_1000) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_13_grid;
maxi :=  max(temp_1100) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_13_grid;
maxi :=  max(temp_1200) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_13_grid;
maxi :=  max(temp_1300) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_13_grid;
maxi :=  max(temp_1400) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_1500) FROM temp_13_grid;
maxi :=  max(temp_1500) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_1500', mini, maxi);

mini :=  min(temp_1750) FROM temp_13_grid;
maxi :=  max(temp_1750) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_1750', mini, maxi);

mini :=  min(temp_2000) FROM temp_13_grid;
maxi :=  max(temp_2000) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_2000', mini, maxi);

mini :=  min(temp_2500) FROM temp_13_grid;
maxi :=  max(temp_2500) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_2500', mini, maxi);

mini :=  min(temp_3000) FROM temp_13_grid;
maxi :=  max(temp_3000) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_3000', mini, maxi);

mini :=  min(temp_3500) FROM temp_13_grid;
maxi :=  max(temp_3500) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_3500', mini, maxi);

mini :=  min(temp_4000) FROM temp_13_grid;
maxi :=  max(temp_4000) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_4000', mini, maxi);

mini :=  min(temp_4500) FROM temp_13_grid;
maxi :=  max(temp_4500) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_4500', mini, maxi);

mini :=  min(temp_5000) FROM temp_13_grid;
maxi :=  max(temp_5000) FROM temp_13_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_13_grid', 'temp_5000', mini, maxi);

mini :=  min(temp_0000) FROM temp_14_grid;
maxi :=  max(temp_0000) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_14_grid;
maxi :=  max(temp_0010) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_14_grid;
maxi :=  max(temp_0020) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_14_grid;
maxi :=  max(temp_0030) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_14_grid;
maxi :=  max(temp_0050) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_14_grid;
maxi :=  max(temp_0075) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_14_grid;
maxi :=  max(temp_0100) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_14_grid;
maxi :=  max(temp_0125) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_14_grid;
maxi :=  max(temp_0150) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_14_grid;
maxi :=  max(temp_0200) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_14_grid;
maxi :=  max(temp_0250) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_14_grid;
maxi :=  max(temp_0300) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_14_grid;
maxi :=  max(temp_0400) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_14_grid;
maxi :=  max(temp_0500) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_14_grid;
maxi :=  max(temp_0600) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_14_grid;
maxi :=  max(temp_0700) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_14_grid;
maxi :=  max(temp_0800) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_14_grid;
maxi :=  max(temp_0900) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_14_grid;
maxi :=  max(temp_1000) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_14_grid;
maxi :=  max(temp_1100) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_14_grid;
maxi :=  max(temp_1200) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_14_grid;
maxi :=  max(temp_1300) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_14_grid;
maxi :=  max(temp_1400) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_1500) FROM temp_14_grid;
maxi :=  max(temp_1500) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_1500', mini, maxi);

mini :=  min(temp_1750) FROM temp_14_grid;
maxi :=  max(temp_1750) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_1750', mini, maxi);

mini :=  min(temp_2000) FROM temp_14_grid;
maxi :=  max(temp_2000) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_2000', mini, maxi);

mini :=  min(temp_2500) FROM temp_14_grid;
maxi :=  max(temp_2500) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_2500', mini, maxi);

mini :=  min(temp_3000) FROM temp_14_grid;
maxi :=  max(temp_3000) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_3000', mini, maxi);

mini :=  min(temp_3500) FROM temp_14_grid;
maxi :=  max(temp_3500) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_3500', mini, maxi);

mini :=  min(temp_4000) FROM temp_14_grid;
maxi :=  max(temp_4000) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_4000', mini, maxi);

mini :=  min(temp_4500) FROM temp_14_grid;
maxi :=  max(temp_4500) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_4500', mini, maxi);

mini :=  min(temp_5000) FROM temp_14_grid;
maxi :=  max(temp_5000) FROM temp_14_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_14_grid', 'temp_5000', mini, maxi);

mini :=  min(temp_0000) FROM temp_15_grid;
maxi :=  max(temp_0000) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_15_grid;
maxi :=  max(temp_0010) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_15_grid;
maxi :=  max(temp_0020) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_15_grid;
maxi :=  max(temp_0030) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_15_grid;
maxi :=  max(temp_0050) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_15_grid;
maxi :=  max(temp_0075) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_15_grid;
maxi :=  max(temp_0100) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_15_grid;
maxi :=  max(temp_0125) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_15_grid;
maxi :=  max(temp_0150) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_15_grid;
maxi :=  max(temp_0200) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_15_grid;
maxi :=  max(temp_0250) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_15_grid;
maxi :=  max(temp_0300) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_15_grid;
maxi :=  max(temp_0400) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_15_grid;
maxi :=  max(temp_0500) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_15_grid;
maxi :=  max(temp_0600) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_15_grid;
maxi :=  max(temp_0700) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_15_grid;
maxi :=  max(temp_0800) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_15_grid;
maxi :=  max(temp_0900) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_15_grid;
maxi :=  max(temp_1000) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_15_grid;
maxi :=  max(temp_1100) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_15_grid;
maxi :=  max(temp_1200) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_15_grid;
maxi :=  max(temp_1300) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_15_grid;
maxi :=  max(temp_1400) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_1500) FROM temp_15_grid;
maxi :=  max(temp_1500) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_1500', mini, maxi);

mini :=  min(temp_1750) FROM temp_15_grid;
maxi :=  max(temp_1750) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_1750', mini, maxi);

mini :=  min(temp_2000) FROM temp_15_grid;
maxi :=  max(temp_2000) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_2000', mini, maxi);

mini :=  min(temp_2500) FROM temp_15_grid;
maxi :=  max(temp_2500) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_2500', mini, maxi);

mini :=  min(temp_3000) FROM temp_15_grid;
maxi :=  max(temp_3000) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_3000', mini, maxi);

mini :=  min(temp_3500) FROM temp_15_grid;
maxi :=  max(temp_3500) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_3500', mini, maxi);

mini :=  min(temp_4000) FROM temp_15_grid;
maxi :=  max(temp_4000) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_4000', mini, maxi);

mini :=  min(temp_4500) FROM temp_15_grid;
maxi :=  max(temp_4500) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_4500', mini, maxi);

mini :=  min(temp_5000) FROM temp_15_grid;
maxi :=  max(temp_5000) FROM temp_15_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_15_grid', 'temp_5000', mini, maxi);

mini :=  min(temp_0000) FROM temp_16_grid;
maxi :=  max(temp_0000) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0000', mini, maxi);

mini :=  min(temp_0010) FROM temp_16_grid;
maxi :=  max(temp_0010) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0010', mini, maxi);

mini :=  min(temp_0020) FROM temp_16_grid;
maxi :=  max(temp_0020) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0020', mini, maxi);

mini :=  min(temp_0030) FROM temp_16_grid;
maxi :=  max(temp_0030) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0030', mini, maxi);

mini :=  min(temp_0050) FROM temp_16_grid;
maxi :=  max(temp_0050) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0050', mini, maxi);

mini :=  min(temp_0075) FROM temp_16_grid;
maxi :=  max(temp_0075) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0075', mini, maxi);

mini :=  min(temp_0100) FROM temp_16_grid;
maxi :=  max(temp_0100) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0100', mini, maxi);

mini :=  min(temp_0125) FROM temp_16_grid;
maxi :=  max(temp_0125) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0125', mini, maxi);

mini :=  min(temp_0150) FROM temp_16_grid;
maxi :=  max(temp_0150) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0150', mini, maxi);

mini :=  min(temp_0200) FROM temp_16_grid;
maxi :=  max(temp_0200) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0200', mini, maxi);

mini :=  min(temp_0250) FROM temp_16_grid;
maxi :=  max(temp_0250) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0250', mini, maxi);

mini :=  min(temp_0300) FROM temp_16_grid;
maxi :=  max(temp_0300) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0300', mini, maxi);

mini :=  min(temp_0400) FROM temp_16_grid;
maxi :=  max(temp_0400) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0400', mini, maxi);

mini :=  min(temp_0500) FROM temp_16_grid;
maxi :=  max(temp_0500) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0500', mini, maxi);

mini :=  min(temp_0600) FROM temp_16_grid;
maxi :=  max(temp_0600) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0600', mini, maxi);

mini :=  min(temp_0700) FROM temp_16_grid;
maxi :=  max(temp_0700) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0700', mini, maxi);

mini :=  min(temp_0800) FROM temp_16_grid;
maxi :=  max(temp_0800) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0800', mini, maxi);

mini :=  min(temp_0900) FROM temp_16_grid;
maxi :=  max(temp_0900) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_0900', mini, maxi);

mini :=  min(temp_1000) FROM temp_16_grid;
maxi :=  max(temp_1000) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_1000', mini, maxi);

mini :=  min(temp_1100) FROM temp_16_grid;
maxi :=  max(temp_1100) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_1100', mini, maxi);

mini :=  min(temp_1200) FROM temp_16_grid;
maxi :=  max(temp_1200) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_1200', mini, maxi);

mini :=  min(temp_1300) FROM temp_16_grid;
maxi :=  max(temp_1300) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_1300', mini, maxi);

mini :=  min(temp_1400) FROM temp_16_grid;
maxi :=  max(temp_1400) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_1400', mini, maxi);

mini :=  min(temp_1500) FROM temp_16_grid;
maxi :=  max(temp_1500) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_1500', mini, maxi);

mini :=  min(temp_1750) FROM temp_16_grid;
maxi :=  max(temp_1750) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_1750', mini, maxi);

mini :=  min(temp_2000) FROM temp_16_grid;
maxi :=  max(temp_2000) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_2000', mini, maxi);

mini :=  min(temp_2500) FROM temp_16_grid;
maxi :=  max(temp_2500) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_2500', mini, maxi);

mini :=  min(temp_3000) FROM temp_16_grid;
maxi :=  max(temp_3000) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_3000', mini, maxi);

mini :=  min(temp_3500) FROM temp_16_grid;
maxi :=  max(temp_3500) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_3500', mini, maxi);

mini :=  min(temp_4000) FROM temp_16_grid;
maxi :=  max(temp_4000) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_4000', mini, maxi);

mini :=  min(temp_4500) FROM temp_16_grid;
maxi :=  max(temp_4500) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_4500', mini, maxi);

mini :=  min(temp_5000) FROM temp_16_grid;
maxi :=  max(temp_5000) FROM temp_16_grid;
INSERT INTO aa_minmax_temp VALUES ('temp_16_grid', 'temp_5000', mini, maxi);

CREATE TABLE aa_minmax_sal (Var_period text, Var_depth text, Minimum float4, Maximum float4);
mini :=  min(sal_0000) FROM sal_00_grid;
maxi :=  max(sal_0000) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_00_grid;
maxi :=  max(sal_0010) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_00_grid;
maxi :=  max(sal_0020) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_00_grid;
maxi :=  max(sal_0030) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_00_grid;
maxi :=  max(sal_0050) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_00_grid;
maxi :=  max(sal_0075) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_00_grid;
maxi :=  max(sal_0100) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_00_grid;
maxi :=  max(sal_0125) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_00_grid;
maxi :=  max(sal_0150) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_00_grid;
maxi :=  max(sal_0200) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_00_grid;
maxi :=  max(sal_0250) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_00_grid;
maxi :=  max(sal_0300) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_00_grid;
maxi :=  max(sal_0400) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_00_grid;
maxi :=  max(sal_0500) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_00_grid;
maxi :=  max(sal_0600) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_00_grid;
maxi :=  max(sal_0700) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_00_grid;
maxi :=  max(sal_0800) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_00_grid;
maxi :=  max(sal_0900) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_00_grid;
maxi :=  max(sal_1000) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_00_grid;
maxi :=  max(sal_1100) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_00_grid;
maxi :=  max(sal_1200) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_00_grid;
maxi :=  max(sal_1300) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_00_grid;
maxi :=  max(sal_1400) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_1500) FROM sal_00_grid;
maxi :=  max(sal_1500) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_1500', mini, maxi);

mini :=  min(sal_1750) FROM sal_00_grid;
maxi :=  max(sal_1750) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_1750', mini, maxi);

mini :=  min(sal_2000) FROM sal_00_grid;
maxi :=  max(sal_2000) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_2000', mini, maxi);

mini :=  min(sal_2500) FROM sal_00_grid;
maxi :=  max(sal_2500) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_2500', mini, maxi);

mini :=  min(sal_3000) FROM sal_00_grid;
maxi :=  max(sal_3000) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_3000', mini, maxi);

mini :=  min(sal_3500) FROM sal_00_grid;
maxi :=  max(sal_3500) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_3500', mini, maxi);

mini :=  min(sal_4000) FROM sal_00_grid;
maxi :=  max(sal_4000) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_4000', mini, maxi);

mini :=  min(sal_4500) FROM sal_00_grid;
maxi :=  max(sal_4500) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_4500', mini, maxi);

mini :=  min(sal_5000) FROM sal_00_grid;
maxi :=  max(sal_5000) FROM sal_00_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_00_grid', 'sal_5000', mini, maxi);

mini :=  min(sal_0000) FROM sal_01_grid;
maxi :=  max(sal_0000) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_01_grid;
maxi :=  max(sal_0010) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_01_grid;
maxi :=  max(sal_0020) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_01_grid;
maxi :=  max(sal_0030) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_01_grid;
maxi :=  max(sal_0050) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_01_grid;
maxi :=  max(sal_0075) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_01_grid;
maxi :=  max(sal_0100) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_01_grid;
maxi :=  max(sal_0125) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_01_grid;
maxi :=  max(sal_0150) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_01_grid;
maxi :=  max(sal_0200) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_01_grid;
maxi :=  max(sal_0250) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_01_grid;
maxi :=  max(sal_0300) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_01_grid;
maxi :=  max(sal_0400) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_01_grid;
maxi :=  max(sal_0500) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_01_grid;
maxi :=  max(sal_0600) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_01_grid;
maxi :=  max(sal_0700) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_01_grid;
maxi :=  max(sal_0800) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_01_grid;
maxi :=  max(sal_0900) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_01_grid;
maxi :=  max(sal_1000) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_01_grid;
maxi :=  max(sal_1100) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_01_grid;
maxi :=  max(sal_1200) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_01_grid;
maxi :=  max(sal_1300) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_01_grid;
maxi :=  max(sal_1400) FROM sal_01_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_01_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_0000) FROM sal_02_grid;
maxi :=  max(sal_0000) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_02_grid;
maxi :=  max(sal_0010) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_02_grid;
maxi :=  max(sal_0020) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_02_grid;
maxi :=  max(sal_0030) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_02_grid;
maxi :=  max(sal_0050) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_02_grid;
maxi :=  max(sal_0075) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_02_grid;
maxi :=  max(sal_0100) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_02_grid;
maxi :=  max(sal_0125) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_02_grid;
maxi :=  max(sal_0150) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_02_grid;
maxi :=  max(sal_0200) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_02_grid;
maxi :=  max(sal_0250) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_02_grid;
maxi :=  max(sal_0300) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_02_grid;
maxi :=  max(sal_0400) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_02_grid;
maxi :=  max(sal_0500) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_02_grid;
maxi :=  max(sal_0600) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_02_grid;
maxi :=  max(sal_0700) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_02_grid;
maxi :=  max(sal_0800) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_02_grid;
maxi :=  max(sal_0900) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_02_grid;
maxi :=  max(sal_1000) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_02_grid;
maxi :=  max(sal_1100) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_02_grid;
maxi :=  max(sal_1200) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_02_grid;
maxi :=  max(sal_1300) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_02_grid;
maxi :=  max(sal_1400) FROM sal_02_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_02_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_0000) FROM sal_03_grid;
maxi :=  max(sal_0000) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_03_grid;
maxi :=  max(sal_0010) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_03_grid;
maxi :=  max(sal_0020) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_03_grid;
maxi :=  max(sal_0030) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_03_grid;
maxi :=  max(sal_0050) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_03_grid;
maxi :=  max(sal_0075) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_03_grid;
maxi :=  max(sal_0100) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_03_grid;
maxi :=  max(sal_0125) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_03_grid;
maxi :=  max(sal_0150) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_03_grid;
maxi :=  max(sal_0200) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_03_grid;
maxi :=  max(sal_0250) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_03_grid;
maxi :=  max(sal_0300) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_03_grid;
maxi :=  max(sal_0400) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_03_grid;
maxi :=  max(sal_0500) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_03_grid;
maxi :=  max(sal_0600) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_03_grid;
maxi :=  max(sal_0700) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_03_grid;
maxi :=  max(sal_0800) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_03_grid;
maxi :=  max(sal_0900) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_03_grid;
maxi :=  max(sal_1000) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_03_grid;
maxi :=  max(sal_1100) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_03_grid;
maxi :=  max(sal_1200) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_03_grid;
maxi :=  max(sal_1300) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_03_grid;
maxi :=  max(sal_1400) FROM sal_03_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_03_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_0000) FROM sal_04_grid;
maxi :=  max(sal_0000) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_04_grid;
maxi :=  max(sal_0010) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_04_grid;
maxi :=  max(sal_0020) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_04_grid;
maxi :=  max(sal_0030) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_04_grid;
maxi :=  max(sal_0050) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_04_grid;
maxi :=  max(sal_0075) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_04_grid;
maxi :=  max(sal_0100) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_04_grid;
maxi :=  max(sal_0125) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_04_grid;
maxi :=  max(sal_0150) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_04_grid;
maxi :=  max(sal_0200) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_04_grid;
maxi :=  max(sal_0250) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_04_grid;
maxi :=  max(sal_0300) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_04_grid;
maxi :=  max(sal_0400) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_04_grid;
maxi :=  max(sal_0500) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_04_grid;
maxi :=  max(sal_0600) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_04_grid;
maxi :=  max(sal_0700) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_04_grid;
maxi :=  max(sal_0800) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_04_grid;
maxi :=  max(sal_0900) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_04_grid;
maxi :=  max(sal_1000) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_04_grid;
maxi :=  max(sal_1100) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_04_grid;
maxi :=  max(sal_1200) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_04_grid;
maxi :=  max(sal_1300) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_04_grid;
maxi :=  max(sal_1400) FROM sal_04_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_04_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_0000) FROM sal_05_grid;
maxi :=  max(sal_0000) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_05_grid;
maxi :=  max(sal_0010) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_05_grid;
maxi :=  max(sal_0020) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_05_grid;
maxi :=  max(sal_0030) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_05_grid;
maxi :=  max(sal_0050) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_05_grid;
maxi :=  max(sal_0075) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_05_grid;
maxi :=  max(sal_0100) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_05_grid;
maxi :=  max(sal_0125) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_05_grid;
maxi :=  max(sal_0150) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_05_grid;
maxi :=  max(sal_0200) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_05_grid;
maxi :=  max(sal_0250) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_05_grid;
maxi :=  max(sal_0300) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_05_grid;
maxi :=  max(sal_0400) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_05_grid;
maxi :=  max(sal_0500) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_05_grid;
maxi :=  max(sal_0600) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_05_grid;
maxi :=  max(sal_0700) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_05_grid;
maxi :=  max(sal_0800) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_05_grid;
maxi :=  max(sal_0900) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_05_grid;
maxi :=  max(sal_1000) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_05_grid;
maxi :=  max(sal_1100) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_05_grid;
maxi :=  max(sal_1200) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_05_grid;
maxi :=  max(sal_1300) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_05_grid;
maxi :=  max(sal_1400) FROM sal_05_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_05_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_0000) FROM sal_06_grid;
maxi :=  max(sal_0000) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_06_grid;
maxi :=  max(sal_0010) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_06_grid;
maxi :=  max(sal_0020) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_06_grid;
maxi :=  max(sal_0030) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_06_grid;
maxi :=  max(sal_0050) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_06_grid;
maxi :=  max(sal_0075) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_06_grid;
maxi :=  max(sal_0100) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_06_grid;
maxi :=  max(sal_0125) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_06_grid;
maxi :=  max(sal_0150) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_06_grid;
maxi :=  max(sal_0200) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_06_grid;
maxi :=  max(sal_0250) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_06_grid;
maxi :=  max(sal_0300) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_06_grid;
maxi :=  max(sal_0400) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_06_grid;
maxi :=  max(sal_0500) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_06_grid;
maxi :=  max(sal_0600) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_06_grid;
maxi :=  max(sal_0700) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_06_grid;
maxi :=  max(sal_0800) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_06_grid;
maxi :=  max(sal_0900) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_06_grid;
maxi :=  max(sal_1000) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_06_grid;
maxi :=  max(sal_1100) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_06_grid;
maxi :=  max(sal_1200) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_06_grid;
maxi :=  max(sal_1300) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_06_grid;
maxi :=  max(sal_1400) FROM sal_06_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_06_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_0000) FROM sal_07_grid;
maxi :=  max(sal_0000) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_07_grid;
maxi :=  max(sal_0010) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_07_grid;
maxi :=  max(sal_0020) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_07_grid;
maxi :=  max(sal_0030) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_07_grid;
maxi :=  max(sal_0050) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_07_grid;
maxi :=  max(sal_0075) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_07_grid;
maxi :=  max(sal_0100) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_07_grid;
maxi :=  max(sal_0125) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_07_grid;
maxi :=  max(sal_0150) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_07_grid;
maxi :=  max(sal_0200) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_07_grid;
maxi :=  max(sal_0250) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_07_grid;
maxi :=  max(sal_0300) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_07_grid;
maxi :=  max(sal_0400) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_07_grid;
maxi :=  max(sal_0500) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_07_grid;
maxi :=  max(sal_0600) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_07_grid;
maxi :=  max(sal_0700) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_07_grid;
maxi :=  max(sal_0800) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_07_grid;
maxi :=  max(sal_0900) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_07_grid;
maxi :=  max(sal_1000) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_07_grid;
maxi :=  max(sal_1100) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_07_grid;
maxi :=  max(sal_1200) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_07_grid;
maxi :=  max(sal_1300) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_07_grid;
maxi :=  max(sal_1400) FROM sal_07_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_07_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_0000) FROM sal_08_grid;
maxi :=  max(sal_0000) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_08_grid;
maxi :=  max(sal_0010) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_08_grid;
maxi :=  max(sal_0020) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_08_grid;
maxi :=  max(sal_0030) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_08_grid;
maxi :=  max(sal_0050) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_08_grid;
maxi :=  max(sal_0075) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_08_grid;
maxi :=  max(sal_0100) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_08_grid;
maxi :=  max(sal_0125) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_08_grid;
maxi :=  max(sal_0150) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_08_grid;
maxi :=  max(sal_0200) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_08_grid;
maxi :=  max(sal_0250) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_08_grid;
maxi :=  max(sal_0300) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_08_grid;
maxi :=  max(sal_0400) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_08_grid;
maxi :=  max(sal_0500) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_08_grid;
maxi :=  max(sal_0600) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_08_grid;
maxi :=  max(sal_0700) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_08_grid;
maxi :=  max(sal_0800) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_08_grid;
maxi :=  max(sal_0900) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_08_grid;
maxi :=  max(sal_1000) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_08_grid;
maxi :=  max(sal_1100) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_08_grid;
maxi :=  max(sal_1200) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_08_grid;
maxi :=  max(sal_1300) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_08_grid;
maxi :=  max(sal_1400) FROM sal_08_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_08_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_0000) FROM sal_09_grid;
maxi :=  max(sal_0000) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_09_grid;
maxi :=  max(sal_0010) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_09_grid;
maxi :=  max(sal_0020) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_09_grid;
maxi :=  max(sal_0030) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_09_grid;
maxi :=  max(sal_0050) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_09_grid;
maxi :=  max(sal_0075) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_09_grid;
maxi :=  max(sal_0100) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_09_grid;
maxi :=  max(sal_0125) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_09_grid;
maxi :=  max(sal_0150) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_09_grid;
maxi :=  max(sal_0200) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_09_grid;
maxi :=  max(sal_0250) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_09_grid;
maxi :=  max(sal_0300) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_09_grid;
maxi :=  max(sal_0400) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_09_grid;
maxi :=  max(sal_0500) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_09_grid;
maxi :=  max(sal_0600) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_09_grid;
maxi :=  max(sal_0700) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_09_grid;
maxi :=  max(sal_0800) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_09_grid;
maxi :=  max(sal_0900) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_09_grid;
maxi :=  max(sal_1000) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_09_grid;
maxi :=  max(sal_1100) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_09_grid;
maxi :=  max(sal_1200) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_09_grid;
maxi :=  max(sal_1300) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_09_grid;
maxi :=  max(sal_1400) FROM sal_09_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_09_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_0000) FROM sal_10_grid;
maxi :=  max(sal_0000) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_10_grid;
maxi :=  max(sal_0010) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_10_grid;
maxi :=  max(sal_0020) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_10_grid;
maxi :=  max(sal_0030) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_10_grid;
maxi :=  max(sal_0050) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_10_grid;
maxi :=  max(sal_0075) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_10_grid;
maxi :=  max(sal_0100) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_10_grid;
maxi :=  max(sal_0125) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_10_grid;
maxi :=  max(sal_0150) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_10_grid;
maxi :=  max(sal_0200) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_10_grid;
maxi :=  max(sal_0250) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_10_grid;
maxi :=  max(sal_0300) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_10_grid;
maxi :=  max(sal_0400) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_10_grid;
maxi :=  max(sal_0500) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_10_grid;
maxi :=  max(sal_0600) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_10_grid;
maxi :=  max(sal_0700) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_10_grid;
maxi :=  max(sal_0800) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_10_grid;
maxi :=  max(sal_0900) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_10_grid;
maxi :=  max(sal_1000) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_10_grid;
maxi :=  max(sal_1100) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_10_grid;
maxi :=  max(sal_1200) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_10_grid;
maxi :=  max(sal_1300) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_10_grid;
maxi :=  max(sal_1400) FROM sal_10_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_10_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_0000) FROM sal_11_grid;
maxi :=  max(sal_0000) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_11_grid;
maxi :=  max(sal_0010) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_11_grid;
maxi :=  max(sal_0020) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_11_grid;
maxi :=  max(sal_0030) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_11_grid;
maxi :=  max(sal_0050) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_11_grid;
maxi :=  max(sal_0075) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_11_grid;
maxi :=  max(sal_0100) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_11_grid;
maxi :=  max(sal_0125) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_11_grid;
maxi :=  max(sal_0150) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_11_grid;
maxi :=  max(sal_0200) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_11_grid;
maxi :=  max(sal_0250) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_11_grid;
maxi :=  max(sal_0300) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_11_grid;
maxi :=  max(sal_0400) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_11_grid;
maxi :=  max(sal_0500) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_11_grid;
maxi :=  max(sal_0600) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_11_grid;
maxi :=  max(sal_0700) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_11_grid;
maxi :=  max(sal_0800) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_11_grid;
maxi :=  max(sal_0900) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_11_grid;
maxi :=  max(sal_1000) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_11_grid;
maxi :=  max(sal_1100) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_11_grid;
maxi :=  max(sal_1200) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_11_grid;
maxi :=  max(sal_1300) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_11_grid;
maxi :=  max(sal_1400) FROM sal_11_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_11_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_0000) FROM sal_12_grid;
maxi :=  max(sal_0000) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_12_grid;
maxi :=  max(sal_0010) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_12_grid;
maxi :=  max(sal_0020) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_12_grid;
maxi :=  max(sal_0030) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_12_grid;
maxi :=  max(sal_0050) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_12_grid;
maxi :=  max(sal_0075) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_12_grid;
maxi :=  max(sal_0100) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_12_grid;
maxi :=  max(sal_0125) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_12_grid;
maxi :=  max(sal_0150) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_12_grid;
maxi :=  max(sal_0200) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_12_grid;
maxi :=  max(sal_0250) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_12_grid;
maxi :=  max(sal_0300) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_12_grid;
maxi :=  max(sal_0400) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_12_grid;
maxi :=  max(sal_0500) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_12_grid;
maxi :=  max(sal_0600) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_12_grid;
maxi :=  max(sal_0700) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_12_grid;
maxi :=  max(sal_0800) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_12_grid;
maxi :=  max(sal_0900) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_12_grid;
maxi :=  max(sal_1000) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_12_grid;
maxi :=  max(sal_1100) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_12_grid;
maxi :=  max(sal_1200) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_12_grid;
maxi :=  max(sal_1300) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_12_grid;
maxi :=  max(sal_1400) FROM sal_12_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_12_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_0000) FROM sal_13_grid;
maxi :=  max(sal_0000) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_13_grid;
maxi :=  max(sal_0010) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_13_grid;
maxi :=  max(sal_0020) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_13_grid;
maxi :=  max(sal_0030) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_13_grid;
maxi :=  max(sal_0050) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_13_grid;
maxi :=  max(sal_0075) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_13_grid;
maxi :=  max(sal_0100) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_13_grid;
maxi :=  max(sal_0125) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_13_grid;
maxi :=  max(sal_0150) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_13_grid;
maxi :=  max(sal_0200) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_13_grid;
maxi :=  max(sal_0250) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_13_grid;
maxi :=  max(sal_0300) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_13_grid;
maxi :=  max(sal_0400) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_13_grid;
maxi :=  max(sal_0500) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_13_grid;
maxi :=  max(sal_0600) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_13_grid;
maxi :=  max(sal_0700) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_13_grid;
maxi :=  max(sal_0800) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_13_grid;
maxi :=  max(sal_0900) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_13_grid;
maxi :=  max(sal_1000) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_13_grid;
maxi :=  max(sal_1100) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_13_grid;
maxi :=  max(sal_1200) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_13_grid;
maxi :=  max(sal_1300) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_13_grid;
maxi :=  max(sal_1400) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_1500) FROM sal_13_grid;
maxi :=  max(sal_1500) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_1500', mini, maxi);

mini :=  min(sal_1750) FROM sal_13_grid;
maxi :=  max(sal_1750) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_1750', mini, maxi);

mini :=  min(sal_2000) FROM sal_13_grid;
maxi :=  max(sal_2000) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_2000', mini, maxi);

mini :=  min(sal_2500) FROM sal_13_grid;
maxi :=  max(sal_2500) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_2500', mini, maxi);

mini :=  min(sal_3000) FROM sal_13_grid;
maxi :=  max(sal_3000) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_3000', mini, maxi);

mini :=  min(sal_3500) FROM sal_13_grid;
maxi :=  max(sal_3500) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_3500', mini, maxi);

mini :=  min(sal_4000) FROM sal_13_grid;
maxi :=  max(sal_4000) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_4000', mini, maxi);

mini :=  min(sal_4500) FROM sal_13_grid;
maxi :=  max(sal_4500) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_4500', mini, maxi);

mini :=  min(sal_5000) FROM sal_13_grid;
maxi :=  max(sal_5000) FROM sal_13_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_13_grid', 'sal_5000', mini, maxi);

mini :=  min(sal_0000) FROM sal_14_grid;
maxi :=  max(sal_0000) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_14_grid;
maxi :=  max(sal_0010) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_14_grid;
maxi :=  max(sal_0020) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_14_grid;
maxi :=  max(sal_0030) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_14_grid;
maxi :=  max(sal_0050) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_14_grid;
maxi :=  max(sal_0075) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_14_grid;
maxi :=  max(sal_0100) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_14_grid;
maxi :=  max(sal_0125) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_14_grid;
maxi :=  max(sal_0150) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_14_grid;
maxi :=  max(sal_0200) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_14_grid;
maxi :=  max(sal_0250) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_14_grid;
maxi :=  max(sal_0300) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_14_grid;
maxi :=  max(sal_0400) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_14_grid;
maxi :=  max(sal_0500) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_14_grid;
maxi :=  max(sal_0600) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_14_grid;
maxi :=  max(sal_0700) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_14_grid;
maxi :=  max(sal_0800) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_14_grid;
maxi :=  max(sal_0900) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_14_grid;
maxi :=  max(sal_1000) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_14_grid;
maxi :=  max(sal_1100) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_14_grid;
maxi :=  max(sal_1200) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_14_grid;
maxi :=  max(sal_1300) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_14_grid;
maxi :=  max(sal_1400) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_1500) FROM sal_14_grid;
maxi :=  max(sal_1500) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_1500', mini, maxi);

mini :=  min(sal_1750) FROM sal_14_grid;
maxi :=  max(sal_1750) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_1750', mini, maxi);

mini :=  min(sal_2000) FROM sal_14_grid;
maxi :=  max(sal_2000) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_2000', mini, maxi);

mini :=  min(sal_2500) FROM sal_14_grid;
maxi :=  max(sal_2500) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_2500', mini, maxi);

mini :=  min(sal_3000) FROM sal_14_grid;
maxi :=  max(sal_3000) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_3000', mini, maxi);

mini :=  min(sal_3500) FROM sal_14_grid;
maxi :=  max(sal_3500) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_3500', mini, maxi);

mini :=  min(sal_4000) FROM sal_14_grid;
maxi :=  max(sal_4000) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_4000', mini, maxi);

mini :=  min(sal_4500) FROM sal_14_grid;
maxi :=  max(sal_4500) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_4500', mini, maxi);

mini :=  min(sal_5000) FROM sal_14_grid;
maxi :=  max(sal_5000) FROM sal_14_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_14_grid', 'sal_5000', mini, maxi);

mini :=  min(sal_0000) FROM sal_15_grid;
maxi :=  max(sal_0000) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_15_grid;
maxi :=  max(sal_0010) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_15_grid;
maxi :=  max(sal_0020) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_15_grid;
maxi :=  max(sal_0030) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_15_grid;
maxi :=  max(sal_0050) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_15_grid;
maxi :=  max(sal_0075) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_15_grid;
maxi :=  max(sal_0100) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_15_grid;
maxi :=  max(sal_0125) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_15_grid;
maxi :=  max(sal_0150) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_15_grid;
maxi :=  max(sal_0200) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_15_grid;
maxi :=  max(sal_0250) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_15_grid;
maxi :=  max(sal_0300) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_15_grid;
maxi :=  max(sal_0400) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_15_grid;
maxi :=  max(sal_0500) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_15_grid;
maxi :=  max(sal_0600) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_15_grid;
maxi :=  max(sal_0700) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_15_grid;
maxi :=  max(sal_0800) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_15_grid;
maxi :=  max(sal_0900) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_15_grid;
maxi :=  max(sal_1000) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_15_grid;
maxi :=  max(sal_1100) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_15_grid;
maxi :=  max(sal_1200) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_15_grid;
maxi :=  max(sal_1300) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_15_grid;
maxi :=  max(sal_1400) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_1500) FROM sal_15_grid;
maxi :=  max(sal_1500) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_1500', mini, maxi);

mini :=  min(sal_1750) FROM sal_15_grid;
maxi :=  max(sal_1750) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_1750', mini, maxi);

mini :=  min(sal_2000) FROM sal_15_grid;
maxi :=  max(sal_2000) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_2000', mini, maxi);

mini :=  min(sal_2500) FROM sal_15_grid;
maxi :=  max(sal_2500) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_2500', mini, maxi);

mini :=  min(sal_3000) FROM sal_15_grid;
maxi :=  max(sal_3000) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_3000', mini, maxi);

mini :=  min(sal_3500) FROM sal_15_grid;
maxi :=  max(sal_3500) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_3500', mini, maxi);

mini :=  min(sal_4000) FROM sal_15_grid;
maxi :=  max(sal_4000) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_4000', mini, maxi);

mini :=  min(sal_4500) FROM sal_15_grid;
maxi :=  max(sal_4500) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_4500', mini, maxi);

mini :=  min(sal_5000) FROM sal_15_grid;
maxi :=  max(sal_5000) FROM sal_15_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_15_grid', 'sal_5000', mini, maxi);

mini :=  min(sal_0000) FROM sal_16_grid;
maxi :=  max(sal_0000) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0000', mini, maxi);

mini :=  min(sal_0010) FROM sal_16_grid;
maxi :=  max(sal_0010) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0010', mini, maxi);

mini :=  min(sal_0020) FROM sal_16_grid;
maxi :=  max(sal_0020) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0020', mini, maxi);

mini :=  min(sal_0030) FROM sal_16_grid;
maxi :=  max(sal_0030) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0030', mini, maxi);

mini :=  min(sal_0050) FROM sal_16_grid;
maxi :=  max(sal_0050) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0050', mini, maxi);

mini :=  min(sal_0075) FROM sal_16_grid;
maxi :=  max(sal_0075) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0075', mini, maxi);

mini :=  min(sal_0100) FROM sal_16_grid;
maxi :=  max(sal_0100) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0100', mini, maxi);

mini :=  min(sal_0125) FROM sal_16_grid;
maxi :=  max(sal_0125) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0125', mini, maxi);

mini :=  min(sal_0150) FROM sal_16_grid;
maxi :=  max(sal_0150) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0150', mini, maxi);

mini :=  min(sal_0200) FROM sal_16_grid;
maxi :=  max(sal_0200) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0200', mini, maxi);

mini :=  min(sal_0250) FROM sal_16_grid;
maxi :=  max(sal_0250) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0250', mini, maxi);

mini :=  min(sal_0300) FROM sal_16_grid;
maxi :=  max(sal_0300) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0300', mini, maxi);

mini :=  min(sal_0400) FROM sal_16_grid;
maxi :=  max(sal_0400) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0400', mini, maxi);

mini :=  min(sal_0500) FROM sal_16_grid;
maxi :=  max(sal_0500) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0500', mini, maxi);

mini :=  min(sal_0600) FROM sal_16_grid;
maxi :=  max(sal_0600) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0600', mini, maxi);

mini :=  min(sal_0700) FROM sal_16_grid;
maxi :=  max(sal_0700) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0700', mini, maxi);

mini :=  min(sal_0800) FROM sal_16_grid;
maxi :=  max(sal_0800) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0800', mini, maxi);

mini :=  min(sal_0900) FROM sal_16_grid;
maxi :=  max(sal_0900) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_0900', mini, maxi);

mini :=  min(sal_1000) FROM sal_16_grid;
maxi :=  max(sal_1000) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_1000', mini, maxi);

mini :=  min(sal_1100) FROM sal_16_grid;
maxi :=  max(sal_1100) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_1100', mini, maxi);

mini :=  min(sal_1200) FROM sal_16_grid;
maxi :=  max(sal_1200) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_1200', mini, maxi);

mini :=  min(sal_1300) FROM sal_16_grid;
maxi :=  max(sal_1300) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_1300', mini, maxi);

mini :=  min(sal_1400) FROM sal_16_grid;
maxi :=  max(sal_1400) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_1400', mini, maxi);

mini :=  min(sal_1500) FROM sal_16_grid;
maxi :=  max(sal_1500) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_1500', mini, maxi);

mini :=  min(sal_1750) FROM sal_16_grid;
maxi :=  max(sal_1750) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_1750', mini, maxi);

mini :=  min(sal_2000) FROM sal_16_grid;
maxi :=  max(sal_2000) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_2000', mini, maxi);

mini :=  min(sal_2500) FROM sal_16_grid;
maxi :=  max(sal_2500) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_2500', mini, maxi);

mini :=  min(sal_3000) FROM sal_16_grid;
maxi :=  max(sal_3000) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_3000', mini, maxi);

mini :=  min(sal_3500) FROM sal_16_grid;
maxi :=  max(sal_3500) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_3500', mini, maxi);

mini :=  min(sal_4000) FROM sal_16_grid;
maxi :=  max(sal_4000) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_4000', mini, maxi);

mini :=  min(sal_4500) FROM sal_16_grid;
maxi :=  max(sal_4500) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_4500', mini, maxi);

mini :=  min(sal_5000) FROM sal_16_grid;
maxi :=  max(sal_5000) FROM sal_16_grid;
INSERT INTO aa_minmax_sal VALUES ('sal_16_grid', 'sal_5000', mini, maxi);

CREATE TABLE aa_minmax_oxy_dis (Var_period text, Var_depth text, Minimum float4, Maximum float4);
mini :=  min(oxy_dis_0000) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0500) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0500) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0500', mini, maxi);

mini :=  min(oxy_dis_0600) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0600) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0600', mini, maxi);

mini :=  min(oxy_dis_0700) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0700) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0700', mini, maxi);

mini :=  min(oxy_dis_0800) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0800) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0800', mini, maxi);

mini :=  min(oxy_dis_0900) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_0900) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_0900', mini, maxi);

mini :=  min(oxy_dis_1000) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_1000) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_1000', mini, maxi);

mini :=  min(oxy_dis_1100) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_1100) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_1100', mini, maxi);

mini :=  min(oxy_dis_1200) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_1200) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_1200', mini, maxi);

mini :=  min(oxy_dis_1300) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_1300) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_1300', mini, maxi);

mini :=  min(oxy_dis_1400) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_1400) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_1400', mini, maxi);

mini :=  min(oxy_dis_1500) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_1500) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_1500', mini, maxi);

mini :=  min(oxy_dis_1750) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_1750) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_1750', mini, maxi);

mini :=  min(oxy_dis_2000) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_2000) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_2000', mini, maxi);

mini :=  min(oxy_dis_2500) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_2500) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_2500', mini, maxi);

mini :=  min(oxy_dis_3000) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_3000) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_3000', mini, maxi);

mini :=  min(oxy_dis_3500) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_3500) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_3500', mini, maxi);

mini :=  min(oxy_dis_4000) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_4000) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_4000', mini, maxi);

mini :=  min(oxy_dis_4500) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_4500) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_4500', mini, maxi);

mini :=  min(oxy_dis_5000) FROM oxy_dis_00_grid;
maxi :=  max(oxy_dis_5000) FROM oxy_dis_00_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_00_grid', 'oxy_dis_5000', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_01_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_01_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_01_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_01_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_01_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_01_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_01_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_01_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_01_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_01_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_01_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_01_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_01_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_01_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_01_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_01_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_01_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_01_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_01_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_01_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_01_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_01_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_01_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_01_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_01_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_01_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_01_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_01_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_01_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_01_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_01_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_01_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_01_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_01_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_01_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_01_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_01_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_01_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_01_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_02_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_02_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_02_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_02_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_02_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_02_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_02_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_02_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_02_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_02_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_02_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_02_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_02_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_02_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_02_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_02_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_02_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_02_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_02_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_02_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_02_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_02_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_02_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_02_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_02_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_02_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_02_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_02_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_02_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_02_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_02_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_02_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_02_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_02_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_02_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_02_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_02_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_02_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_02_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_03_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_03_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_03_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_03_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_03_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_03_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_03_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_03_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_03_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_03_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_03_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_03_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_03_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_03_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_03_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_03_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_03_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_03_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_03_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_03_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_03_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_03_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_03_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_03_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_03_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_03_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_03_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_03_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_03_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_03_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_03_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_03_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_03_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_03_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_03_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_03_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_03_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_03_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_03_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_04_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_04_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_04_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_04_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_04_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_04_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_04_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_04_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_04_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_04_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_04_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_04_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_04_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_04_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_04_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_04_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_04_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_04_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_04_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_04_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_04_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_04_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_04_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_04_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_04_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_04_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_04_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_04_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_04_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_04_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_04_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_04_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_04_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_04_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_04_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_04_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_04_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_04_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_04_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_05_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_05_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_05_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_05_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_05_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_05_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_05_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_05_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_05_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_05_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_05_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_05_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_05_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_05_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_05_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_05_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_05_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_05_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_05_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_05_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_05_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_05_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_05_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_05_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_05_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_05_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_05_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_05_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_05_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_05_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_05_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_05_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_05_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_05_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_05_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_05_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_05_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_05_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_05_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_06_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_06_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_06_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_06_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_06_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_06_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_06_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_06_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_06_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_06_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_06_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_06_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_06_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_06_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_06_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_06_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_06_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_06_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_06_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_06_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_06_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_06_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_06_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_06_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_06_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_06_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_06_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_06_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_06_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_06_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_06_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_06_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_06_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_06_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_06_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_06_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_06_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_06_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_06_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_07_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_07_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_07_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_07_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_07_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_07_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_07_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_07_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_07_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_07_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_07_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_07_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_07_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_07_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_07_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_07_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_07_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_07_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_07_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_07_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_07_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_07_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_07_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_07_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_07_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_07_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_07_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_07_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_07_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_07_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_07_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_07_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_07_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_07_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_07_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_07_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_07_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_07_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_07_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_08_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_08_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_08_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_08_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_08_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_08_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_08_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_08_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_08_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_08_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_08_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_08_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_08_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_08_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_08_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_08_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_08_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_08_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_08_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_08_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_08_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_08_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_08_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_08_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_08_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_08_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_08_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_08_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_08_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_08_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_08_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_08_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_08_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_08_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_08_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_08_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_08_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_08_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_08_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_09_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_09_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_09_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_09_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_09_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_09_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_09_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_09_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_09_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_09_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_09_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_09_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_09_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_09_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_09_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_09_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_09_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_09_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_09_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_09_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_09_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_09_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_09_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_09_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_09_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_09_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_09_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_09_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_09_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_09_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_09_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_09_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_09_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_09_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_09_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_09_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_09_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_09_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_09_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_10_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_10_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_10_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_10_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_10_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_10_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_10_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_10_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_10_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_10_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_10_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_10_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_10_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_10_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_10_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_10_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_10_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_10_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_10_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_10_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_10_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_10_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_10_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_10_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_10_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_10_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_10_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_10_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_10_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_10_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_10_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_10_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_10_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_10_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_10_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_10_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_10_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_10_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_10_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_11_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_11_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_11_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_11_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_11_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_11_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_11_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_11_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_11_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_11_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_11_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_11_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_11_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_11_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_11_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_11_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_11_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_11_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_11_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_11_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_11_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_11_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_11_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_11_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_11_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_11_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_11_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_11_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_11_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_11_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_11_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_11_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_11_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_11_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_11_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_11_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_11_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_11_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_11_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_12_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_12_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_12_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_12_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_12_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_12_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_12_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_12_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_12_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_12_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_12_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_12_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_12_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_12_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_12_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_12_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_12_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_12_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_12_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_12_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_12_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_12_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_12_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_12_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_12_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_12_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_12_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_12_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_12_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_12_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_12_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_12_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_12_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_12_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_12_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_12_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_12_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_12_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_12_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0500) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0500) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0500', mini, maxi);

mini :=  min(oxy_dis_0600) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0600) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0600', mini, maxi);

mini :=  min(oxy_dis_0700) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0700) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0700', mini, maxi);

mini :=  min(oxy_dis_0800) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0800) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0800', mini, maxi);

mini :=  min(oxy_dis_0900) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_0900) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_0900', mini, maxi);

mini :=  min(oxy_dis_1000) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_1000) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_1000', mini, maxi);

mini :=  min(oxy_dis_1100) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_1100) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_1100', mini, maxi);

mini :=  min(oxy_dis_1200) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_1200) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_1200', mini, maxi);

mini :=  min(oxy_dis_1300) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_1300) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_1300', mini, maxi);

mini :=  min(oxy_dis_1400) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_1400) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_1400', mini, maxi);

mini :=  min(oxy_dis_1500) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_1500) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_1500', mini, maxi);

mini :=  min(oxy_dis_1750) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_1750) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_1750', mini, maxi);

mini :=  min(oxy_dis_2000) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_2000) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_2000', mini, maxi);

mini :=  min(oxy_dis_2500) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_2500) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_2500', mini, maxi);

mini :=  min(oxy_dis_3000) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_3000) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_3000', mini, maxi);

mini :=  min(oxy_dis_3500) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_3500) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_3500', mini, maxi);

mini :=  min(oxy_dis_4000) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_4000) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_4000', mini, maxi);

mini :=  min(oxy_dis_4500) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_4500) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_4500', mini, maxi);

mini :=  min(oxy_dis_5000) FROM oxy_dis_13_grid;
maxi :=  max(oxy_dis_5000) FROM oxy_dis_13_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_13_grid', 'oxy_dis_5000', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0500) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0500) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0500', mini, maxi);

mini :=  min(oxy_dis_0600) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0600) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0600', mini, maxi);

mini :=  min(oxy_dis_0700) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0700) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0700', mini, maxi);

mini :=  min(oxy_dis_0800) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0800) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0800', mini, maxi);

mini :=  min(oxy_dis_0900) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_0900) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_0900', mini, maxi);

mini :=  min(oxy_dis_1000) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_1000) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_1000', mini, maxi);

mini :=  min(oxy_dis_1100) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_1100) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_1100', mini, maxi);

mini :=  min(oxy_dis_1200) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_1200) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_1200', mini, maxi);

mini :=  min(oxy_dis_1300) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_1300) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_1300', mini, maxi);

mini :=  min(oxy_dis_1400) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_1400) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_1400', mini, maxi);

mini :=  min(oxy_dis_1500) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_1500) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_1500', mini, maxi);

mini :=  min(oxy_dis_1750) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_1750) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_1750', mini, maxi);

mini :=  min(oxy_dis_2000) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_2000) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_2000', mini, maxi);

mini :=  min(oxy_dis_2500) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_2500) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_2500', mini, maxi);

mini :=  min(oxy_dis_3000) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_3000) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_3000', mini, maxi);

mini :=  min(oxy_dis_3500) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_3500) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_3500', mini, maxi);

mini :=  min(oxy_dis_4000) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_4000) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_4000', mini, maxi);

mini :=  min(oxy_dis_4500) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_4500) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_4500', mini, maxi);

mini :=  min(oxy_dis_5000) FROM oxy_dis_14_grid;
maxi :=  max(oxy_dis_5000) FROM oxy_dis_14_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_14_grid', 'oxy_dis_5000', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0500) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0500) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0500', mini, maxi);

mini :=  min(oxy_dis_0600) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0600) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0600', mini, maxi);

mini :=  min(oxy_dis_0700) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0700) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0700', mini, maxi);

mini :=  min(oxy_dis_0800) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0800) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0800', mini, maxi);

mini :=  min(oxy_dis_0900) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_0900) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_0900', mini, maxi);

mini :=  min(oxy_dis_1000) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_1000) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_1000', mini, maxi);

mini :=  min(oxy_dis_1100) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_1100) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_1100', mini, maxi);

mini :=  min(oxy_dis_1200) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_1200) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_1200', mini, maxi);

mini :=  min(oxy_dis_1300) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_1300) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_1300', mini, maxi);

mini :=  min(oxy_dis_1400) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_1400) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_1400', mini, maxi);

mini :=  min(oxy_dis_1500) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_1500) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_1500', mini, maxi);

mini :=  min(oxy_dis_1750) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_1750) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_1750', mini, maxi);

mini :=  min(oxy_dis_2000) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_2000) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_2000', mini, maxi);

mini :=  min(oxy_dis_2500) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_2500) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_2500', mini, maxi);

mini :=  min(oxy_dis_3000) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_3000) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_3000', mini, maxi);

mini :=  min(oxy_dis_3500) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_3500) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_3500', mini, maxi);

mini :=  min(oxy_dis_4000) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_4000) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_4000', mini, maxi);

mini :=  min(oxy_dis_4500) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_4500) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_4500', mini, maxi);

mini :=  min(oxy_dis_5000) FROM oxy_dis_15_grid;
maxi :=  max(oxy_dis_5000) FROM oxy_dis_15_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_15_grid', 'oxy_dis_5000', mini, maxi);

mini :=  min(oxy_dis_0000) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0000) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0000', mini, maxi);

mini :=  min(oxy_dis_0010) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0010) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0010', mini, maxi);

mini :=  min(oxy_dis_0020) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0020) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0020', mini, maxi);

mini :=  min(oxy_dis_0030) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0030) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0030', mini, maxi);

mini :=  min(oxy_dis_0050) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0050) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0050', mini, maxi);

mini :=  min(oxy_dis_0075) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0075) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0075', mini, maxi);

mini :=  min(oxy_dis_0100) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0100) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0100', mini, maxi);

mini :=  min(oxy_dis_0125) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0125) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0125', mini, maxi);

mini :=  min(oxy_dis_0150) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0150) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0150', mini, maxi);

mini :=  min(oxy_dis_0200) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0200) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0200', mini, maxi);

mini :=  min(oxy_dis_0250) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0250) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0250', mini, maxi);

mini :=  min(oxy_dis_0300) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0300) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0300', mini, maxi);

mini :=  min(oxy_dis_0400) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0400) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0400', mini, maxi);

mini :=  min(oxy_dis_0500) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0500) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0500', mini, maxi);

mini :=  min(oxy_dis_0600) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0600) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0600', mini, maxi);

mini :=  min(oxy_dis_0700) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0700) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0700', mini, maxi);

mini :=  min(oxy_dis_0800) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0800) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0800', mini, maxi);

mini :=  min(oxy_dis_0900) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_0900) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_0900', mini, maxi);

mini :=  min(oxy_dis_1000) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_1000) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_1000', mini, maxi);

mini :=  min(oxy_dis_1100) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_1100) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_1100', mini, maxi);

mini :=  min(oxy_dis_1200) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_1200) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_1200', mini, maxi);

mini :=  min(oxy_dis_1300) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_1300) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_1300', mini, maxi);

mini :=  min(oxy_dis_1400) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_1400) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_1400', mini, maxi);

mini :=  min(oxy_dis_1500) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_1500) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_1500', mini, maxi);

mini :=  min(oxy_dis_1750) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_1750) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_1750', mini, maxi);

mini :=  min(oxy_dis_2000) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_2000) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_2000', mini, maxi);

mini :=  min(oxy_dis_2500) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_2500) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_2500', mini, maxi);

mini :=  min(oxy_dis_3000) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_3000) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_3000', mini, maxi);

mini :=  min(oxy_dis_3500) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_3500) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_3500', mini, maxi);

mini :=  min(oxy_dis_4000) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_4000) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_4000', mini, maxi);

mini :=  min(oxy_dis_4500) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_4500) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_4500', mini, maxi);

mini :=  min(oxy_dis_5000) FROM oxy_dis_16_grid;
maxi :=  max(oxy_dis_5000) FROM oxy_dis_16_grid;
INSERT INTO aa_minmax_oxy_dis VALUES ('oxy_dis_16_grid', 'oxy_dis_5000', mini, maxi);

CREATE TABLE aa_minmax_oxy_util (Var_period text, Var_depth text, Minimum float4, Maximum float4);
mini :=  min(oxy_util_0000) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0500) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0500) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0500', mini, maxi);

mini :=  min(oxy_util_0600) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0600) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0600', mini, maxi);

mini :=  min(oxy_util_0700) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0700) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0700', mini, maxi);

mini :=  min(oxy_util_0800) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0800) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0800', mini, maxi);

mini :=  min(oxy_util_0900) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_0900) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_0900', mini, maxi);

mini :=  min(oxy_util_1000) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_1000) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_1000', mini, maxi);

mini :=  min(oxy_util_1100) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_1100) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_1100', mini, maxi);

mini :=  min(oxy_util_1200) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_1200) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_1200', mini, maxi);

mini :=  min(oxy_util_1300) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_1300) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_1300', mini, maxi);

mini :=  min(oxy_util_1400) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_1400) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_1400', mini, maxi);

mini :=  min(oxy_util_1500) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_1500) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_1500', mini, maxi);

mini :=  min(oxy_util_1750) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_1750) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_1750', mini, maxi);

mini :=  min(oxy_util_2000) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_2000) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_2000', mini, maxi);

mini :=  min(oxy_util_2500) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_2500) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_2500', mini, maxi);

mini :=  min(oxy_util_3000) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_3000) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_3000', mini, maxi);

mini :=  min(oxy_util_3500) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_3500) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_3500', mini, maxi);

mini :=  min(oxy_util_4000) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_4000) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_4000', mini, maxi);

mini :=  min(oxy_util_4500) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_4500) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_4500', mini, maxi);

mini :=  min(oxy_util_5000) FROM oxy_util_00_grid;
maxi :=  max(oxy_util_5000) FROM oxy_util_00_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_00_grid', 'oxy_util_5000', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_01_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_01_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_01_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_01_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_01_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_01_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_01_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_01_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_01_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_01_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_01_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_01_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_01_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_01_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_01_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_01_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_01_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_01_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_01_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_01_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_01_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_01_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_01_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_01_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_01_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_01_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_01_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_01_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_01_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_01_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_01_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_01_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_01_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_01_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_01_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_01_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_01_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_01_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_01_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_02_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_02_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_02_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_02_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_02_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_02_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_02_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_02_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_02_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_02_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_02_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_02_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_02_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_02_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_02_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_02_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_02_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_02_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_02_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_02_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_02_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_02_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_02_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_02_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_02_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_02_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_02_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_02_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_02_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_02_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_02_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_02_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_02_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_02_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_02_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_02_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_02_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_02_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_02_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_03_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_03_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_03_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_03_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_03_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_03_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_03_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_03_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_03_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_03_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_03_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_03_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_03_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_03_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_03_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_03_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_03_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_03_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_03_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_03_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_03_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_03_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_03_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_03_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_03_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_03_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_03_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_03_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_03_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_03_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_03_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_03_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_03_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_03_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_03_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_03_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_03_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_03_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_03_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_04_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_04_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_04_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_04_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_04_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_04_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_04_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_04_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_04_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_04_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_04_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_04_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_04_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_04_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_04_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_04_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_04_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_04_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_04_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_04_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_04_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_04_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_04_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_04_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_04_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_04_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_04_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_04_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_04_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_04_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_04_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_04_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_04_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_04_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_04_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_04_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_04_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_04_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_04_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_05_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_05_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_05_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_05_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_05_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_05_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_05_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_05_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_05_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_05_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_05_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_05_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_05_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_05_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_05_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_05_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_05_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_05_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_05_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_05_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_05_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_05_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_05_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_05_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_05_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_05_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_05_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_05_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_05_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_05_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_05_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_05_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_05_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_05_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_05_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_05_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_05_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_05_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_05_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_06_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_06_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_06_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_06_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_06_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_06_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_06_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_06_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_06_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_06_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_06_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_06_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_06_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_06_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_06_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_06_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_06_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_06_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_06_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_06_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_06_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_06_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_06_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_06_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_06_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_06_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_06_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_06_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_06_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_06_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_06_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_06_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_06_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_06_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_06_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_06_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_06_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_06_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_06_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_07_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_07_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_07_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_07_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_07_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_07_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_07_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_07_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_07_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_07_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_07_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_07_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_07_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_07_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_07_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_07_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_07_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_07_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_07_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_07_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_07_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_07_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_07_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_07_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_07_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_07_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_07_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_07_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_07_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_07_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_07_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_07_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_07_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_07_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_07_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_07_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_07_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_07_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_07_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_08_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_08_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_08_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_08_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_08_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_08_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_08_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_08_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_08_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_08_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_08_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_08_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_08_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_08_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_08_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_08_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_08_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_08_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_08_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_08_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_08_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_08_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_08_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_08_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_08_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_08_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_08_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_08_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_08_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_08_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_08_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_08_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_08_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_08_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_08_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_08_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_08_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_08_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_08_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_09_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_09_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_09_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_09_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_09_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_09_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_09_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_09_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_09_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_09_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_09_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_09_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_09_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_09_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_09_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_09_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_09_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_09_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_09_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_09_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_09_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_09_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_09_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_09_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_09_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_09_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_09_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_09_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_09_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_09_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_09_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_09_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_09_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_09_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_09_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_09_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_09_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_09_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_09_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_10_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_10_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_10_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_10_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_10_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_10_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_10_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_10_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_10_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_10_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_10_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_10_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_10_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_10_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_10_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_10_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_10_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_10_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_10_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_10_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_10_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_10_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_10_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_10_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_10_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_10_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_10_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_10_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_10_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_10_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_10_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_10_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_10_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_10_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_10_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_10_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_10_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_10_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_10_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_11_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_11_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_11_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_11_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_11_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_11_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_11_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_11_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_11_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_11_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_11_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_11_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_11_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_11_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_11_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_11_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_11_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_11_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_11_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_11_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_11_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_11_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_11_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_11_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_11_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_11_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_11_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_11_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_11_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_11_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_11_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_11_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_11_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_11_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_11_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_11_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_11_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_11_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_11_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_12_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_12_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_12_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_12_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_12_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_12_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_12_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_12_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_12_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_12_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_12_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_12_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_12_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_12_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_12_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_12_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_12_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_12_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_12_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_12_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_12_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_12_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_12_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_12_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_12_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_12_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_12_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_12_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_12_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_12_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_12_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_12_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_12_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_12_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_12_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_12_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_12_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_12_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_12_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0500) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0500) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0500', mini, maxi);

mini :=  min(oxy_util_0600) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0600) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0600', mini, maxi);

mini :=  min(oxy_util_0700) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0700) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0700', mini, maxi);

mini :=  min(oxy_util_0800) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0800) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0800', mini, maxi);

mini :=  min(oxy_util_0900) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_0900) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_0900', mini, maxi);

mini :=  min(oxy_util_1000) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_1000) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_1000', mini, maxi);

mini :=  min(oxy_util_1100) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_1100) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_1100', mini, maxi);

mini :=  min(oxy_util_1200) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_1200) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_1200', mini, maxi);

mini :=  min(oxy_util_1300) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_1300) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_1300', mini, maxi);

mini :=  min(oxy_util_1400) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_1400) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_1400', mini, maxi);

mini :=  min(oxy_util_1500) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_1500) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_1500', mini, maxi);

mini :=  min(oxy_util_1750) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_1750) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_1750', mini, maxi);

mini :=  min(oxy_util_2000) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_2000) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_2000', mini, maxi);

mini :=  min(oxy_util_2500) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_2500) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_2500', mini, maxi);

mini :=  min(oxy_util_3000) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_3000) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_3000', mini, maxi);

mini :=  min(oxy_util_3500) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_3500) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_3500', mini, maxi);

mini :=  min(oxy_util_4000) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_4000) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_4000', mini, maxi);

mini :=  min(oxy_util_4500) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_4500) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_4500', mini, maxi);

mini :=  min(oxy_util_5000) FROM oxy_util_13_grid;
maxi :=  max(oxy_util_5000) FROM oxy_util_13_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_13_grid', 'oxy_util_5000', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0500) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0500) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0500', mini, maxi);

mini :=  min(oxy_util_0600) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0600) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0600', mini, maxi);

mini :=  min(oxy_util_0700) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0700) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0700', mini, maxi);

mini :=  min(oxy_util_0800) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0800) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0800', mini, maxi);

mini :=  min(oxy_util_0900) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_0900) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_0900', mini, maxi);

mini :=  min(oxy_util_1000) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_1000) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_1000', mini, maxi);

mini :=  min(oxy_util_1100) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_1100) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_1100', mini, maxi);

mini :=  min(oxy_util_1200) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_1200) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_1200', mini, maxi);

mini :=  min(oxy_util_1300) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_1300) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_1300', mini, maxi);

mini :=  min(oxy_util_1400) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_1400) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_1400', mini, maxi);

mini :=  min(oxy_util_1500) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_1500) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_1500', mini, maxi);

mini :=  min(oxy_util_1750) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_1750) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_1750', mini, maxi);

mini :=  min(oxy_util_2000) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_2000) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_2000', mini, maxi);

mini :=  min(oxy_util_2500) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_2500) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_2500', mini, maxi);

mini :=  min(oxy_util_3000) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_3000) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_3000', mini, maxi);

mini :=  min(oxy_util_3500) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_3500) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_3500', mini, maxi);

mini :=  min(oxy_util_4000) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_4000) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_4000', mini, maxi);

mini :=  min(oxy_util_4500) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_4500) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_4500', mini, maxi);

mini :=  min(oxy_util_5000) FROM oxy_util_14_grid;
maxi :=  max(oxy_util_5000) FROM oxy_util_14_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_14_grid', 'oxy_util_5000', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0500) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0500) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0500', mini, maxi);

mini :=  min(oxy_util_0600) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0600) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0600', mini, maxi);

mini :=  min(oxy_util_0700) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0700) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0700', mini, maxi);

mini :=  min(oxy_util_0800) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0800) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0800', mini, maxi);

mini :=  min(oxy_util_0900) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_0900) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_0900', mini, maxi);

mini :=  min(oxy_util_1000) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_1000) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_1000', mini, maxi);

mini :=  min(oxy_util_1100) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_1100) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_1100', mini, maxi);

mini :=  min(oxy_util_1200) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_1200) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_1200', mini, maxi);

mini :=  min(oxy_util_1300) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_1300) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_1300', mini, maxi);

mini :=  min(oxy_util_1400) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_1400) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_1400', mini, maxi);

mini :=  min(oxy_util_1500) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_1500) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_1500', mini, maxi);

mini :=  min(oxy_util_1750) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_1750) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_1750', mini, maxi);

mini :=  min(oxy_util_2000) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_2000) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_2000', mini, maxi);

mini :=  min(oxy_util_2500) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_2500) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_2500', mini, maxi);

mini :=  min(oxy_util_3000) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_3000) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_3000', mini, maxi);

mini :=  min(oxy_util_3500) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_3500) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_3500', mini, maxi);

mini :=  min(oxy_util_4000) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_4000) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_4000', mini, maxi);

mini :=  min(oxy_util_4500) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_4500) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_4500', mini, maxi);

mini :=  min(oxy_util_5000) FROM oxy_util_15_grid;
maxi :=  max(oxy_util_5000) FROM oxy_util_15_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_15_grid', 'oxy_util_5000', mini, maxi);

mini :=  min(oxy_util_0000) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0000) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0000', mini, maxi);

mini :=  min(oxy_util_0010) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0010) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0010', mini, maxi);

mini :=  min(oxy_util_0020) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0020) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0020', mini, maxi);

mini :=  min(oxy_util_0030) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0030) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0030', mini, maxi);

mini :=  min(oxy_util_0050) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0050) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0050', mini, maxi);

mini :=  min(oxy_util_0075) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0075) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0075', mini, maxi);

mini :=  min(oxy_util_0100) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0100) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0100', mini, maxi);

mini :=  min(oxy_util_0125) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0125) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0125', mini, maxi);

mini :=  min(oxy_util_0150) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0150) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0150', mini, maxi);

mini :=  min(oxy_util_0200) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0200) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0200', mini, maxi);

mini :=  min(oxy_util_0250) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0250) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0250', mini, maxi);

mini :=  min(oxy_util_0300) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0300) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0300', mini, maxi);

mini :=  min(oxy_util_0400) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0400) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0400', mini, maxi);

mini :=  min(oxy_util_0500) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0500) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0500', mini, maxi);

mini :=  min(oxy_util_0600) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0600) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0600', mini, maxi);

mini :=  min(oxy_util_0700) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0700) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0700', mini, maxi);

mini :=  min(oxy_util_0800) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0800) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0800', mini, maxi);

mini :=  min(oxy_util_0900) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_0900) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_0900', mini, maxi);

mini :=  min(oxy_util_1000) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_1000) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_1000', mini, maxi);

mini :=  min(oxy_util_1100) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_1100) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_1100', mini, maxi);

mini :=  min(oxy_util_1200) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_1200) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_1200', mini, maxi);

mini :=  min(oxy_util_1300) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_1300) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_1300', mini, maxi);

mini :=  min(oxy_util_1400) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_1400) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_1400', mini, maxi);

mini :=  min(oxy_util_1500) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_1500) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_1500', mini, maxi);

mini :=  min(oxy_util_1750) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_1750) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_1750', mini, maxi);

mini :=  min(oxy_util_2000) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_2000) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_2000', mini, maxi);

mini :=  min(oxy_util_2500) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_2500) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_2500', mini, maxi);

mini :=  min(oxy_util_3000) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_3000) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_3000', mini, maxi);

mini :=  min(oxy_util_3500) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_3500) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_3500', mini, maxi);

mini :=  min(oxy_util_4000) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_4000) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_4000', mini, maxi);

mini :=  min(oxy_util_4500) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_4500) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_4500', mini, maxi);

mini :=  min(oxy_util_5000) FROM oxy_util_16_grid;
maxi :=  max(oxy_util_5000) FROM oxy_util_16_grid;
INSERT INTO aa_minmax_oxy_util VALUES ('oxy_util_16_grid', 'oxy_util_5000', mini, maxi);

CREATE TABLE aa_minmax_oxy_sat (Var_period text, Var_depth text, Minimum float4, Maximum float4);
mini :=  min(oxy_sat_0000) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0500) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0500) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0500', mini, maxi);

mini :=  min(oxy_sat_0600) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0600) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0600', mini, maxi);

mini :=  min(oxy_sat_0700) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0700) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0700', mini, maxi);

mini :=  min(oxy_sat_0800) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0800) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0800', mini, maxi);

mini :=  min(oxy_sat_0900) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_0900) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_0900', mini, maxi);

mini :=  min(oxy_sat_1000) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_1000) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_1000', mini, maxi);

mini :=  min(oxy_sat_1100) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_1100) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_1100', mini, maxi);

mini :=  min(oxy_sat_1200) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_1200) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_1200', mini, maxi);

mini :=  min(oxy_sat_1300) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_1300) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_1300', mini, maxi);

mini :=  min(oxy_sat_1400) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_1400) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_1400', mini, maxi);

mini :=  min(oxy_sat_1500) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_1500) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_1500', mini, maxi);

mini :=  min(oxy_sat_1750) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_1750) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_1750', mini, maxi);

mini :=  min(oxy_sat_2000) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_2000) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_2000', mini, maxi);

mini :=  min(oxy_sat_2500) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_2500) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_2500', mini, maxi);

mini :=  min(oxy_sat_3000) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_3000) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_3000', mini, maxi);

mini :=  min(oxy_sat_3500) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_3500) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_3500', mini, maxi);

mini :=  min(oxy_sat_4000) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_4000) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_4000', mini, maxi);

mini :=  min(oxy_sat_4500) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_4500) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_4500', mini, maxi);

mini :=  min(oxy_sat_5000) FROM oxy_sat_00_grid;
maxi :=  max(oxy_sat_5000) FROM oxy_sat_00_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_00_grid', 'oxy_sat_5000', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_01_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_01_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_01_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_01_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_01_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_01_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_01_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_01_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_01_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_01_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_01_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_01_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_01_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_01_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_01_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_01_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_01_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_01_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_01_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_01_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_01_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_01_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_01_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_01_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_01_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_01_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_01_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_01_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_01_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_01_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_01_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_01_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_01_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_01_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_01_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_01_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_01_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_01_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_01_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_02_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_02_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_02_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_02_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_02_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_02_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_02_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_02_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_02_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_02_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_02_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_02_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_02_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_02_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_02_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_02_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_02_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_02_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_02_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_02_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_02_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_02_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_02_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_02_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_02_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_02_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_02_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_02_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_02_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_02_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_02_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_02_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_02_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_02_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_02_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_02_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_02_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_02_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_02_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_03_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_03_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_03_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_03_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_03_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_03_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_03_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_03_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_03_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_03_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_03_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_03_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_03_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_03_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_03_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_03_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_03_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_03_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_03_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_03_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_03_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_03_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_03_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_03_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_03_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_03_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_03_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_03_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_03_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_03_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_03_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_03_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_03_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_03_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_03_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_03_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_03_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_03_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_03_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_04_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_04_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_04_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_04_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_04_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_04_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_04_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_04_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_04_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_04_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_04_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_04_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_04_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_04_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_04_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_04_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_04_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_04_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_04_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_04_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_04_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_04_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_04_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_04_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_04_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_04_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_04_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_04_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_04_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_04_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_04_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_04_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_04_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_04_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_04_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_04_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_04_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_04_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_04_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_05_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_05_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_05_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_05_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_05_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_05_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_05_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_05_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_05_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_05_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_05_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_05_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_05_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_05_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_05_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_05_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_05_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_05_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_05_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_05_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_05_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_05_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_05_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_05_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_05_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_05_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_05_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_05_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_05_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_05_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_05_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_05_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_05_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_05_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_05_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_05_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_05_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_05_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_05_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_06_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_06_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_06_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_06_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_06_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_06_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_06_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_06_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_06_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_06_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_06_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_06_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_06_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_06_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_06_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_06_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_06_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_06_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_06_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_06_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_06_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_06_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_06_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_06_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_06_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_06_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_06_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_06_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_06_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_06_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_06_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_06_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_06_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_06_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_06_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_06_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_06_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_06_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_06_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_07_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_07_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_07_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_07_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_07_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_07_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_07_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_07_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_07_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_07_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_07_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_07_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_07_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_07_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_07_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_07_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_07_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_07_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_07_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_07_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_07_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_07_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_07_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_07_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_07_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_07_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_07_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_07_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_07_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_07_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_07_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_07_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_07_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_07_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_07_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_07_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_07_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_07_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_07_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_08_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_08_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_08_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_08_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_08_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_08_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_08_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_08_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_08_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_08_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_08_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_08_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_08_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_08_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_08_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_08_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_08_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_08_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_08_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_08_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_08_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_08_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_08_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_08_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_08_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_08_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_08_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_08_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_08_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_08_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_08_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_08_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_08_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_08_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_08_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_08_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_08_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_08_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_08_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_09_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_09_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_09_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_09_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_09_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_09_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_09_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_09_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_09_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_09_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_09_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_09_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_09_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_09_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_09_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_09_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_09_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_09_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_09_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_09_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_09_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_09_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_09_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_09_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_09_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_09_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_09_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_09_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_09_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_09_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_09_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_09_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_09_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_09_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_09_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_09_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_09_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_09_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_09_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_10_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_10_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_10_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_10_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_10_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_10_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_10_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_10_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_10_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_10_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_10_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_10_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_10_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_10_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_10_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_10_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_10_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_10_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_10_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_10_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_10_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_10_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_10_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_10_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_10_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_10_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_10_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_10_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_10_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_10_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_10_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_10_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_10_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_10_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_10_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_10_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_10_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_10_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_10_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_11_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_11_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_11_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_11_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_11_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_11_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_11_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_11_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_11_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_11_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_11_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_11_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_11_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_11_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_11_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_11_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_11_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_11_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_11_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_11_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_11_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_11_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_11_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_11_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_11_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_11_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_11_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_11_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_11_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_11_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_11_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_11_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_11_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_11_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_11_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_11_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_11_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_11_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_11_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_12_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_12_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_12_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_12_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_12_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_12_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_12_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_12_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_12_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_12_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_12_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_12_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_12_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_12_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_12_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_12_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_12_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_12_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_12_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_12_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_12_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_12_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_12_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_12_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_12_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_12_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_12_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_12_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_12_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_12_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_12_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_12_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_12_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_12_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_12_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_12_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_12_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_12_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_12_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0500) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0500) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0500', mini, maxi);

mini :=  min(oxy_sat_0600) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0600) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0600', mini, maxi);

mini :=  min(oxy_sat_0700) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0700) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0700', mini, maxi);

mini :=  min(oxy_sat_0800) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0800) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0800', mini, maxi);

mini :=  min(oxy_sat_0900) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_0900) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_0900', mini, maxi);

mini :=  min(oxy_sat_1000) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_1000) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_1000', mini, maxi);

mini :=  min(oxy_sat_1100) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_1100) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_1100', mini, maxi);

mini :=  min(oxy_sat_1200) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_1200) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_1200', mini, maxi);

mini :=  min(oxy_sat_1300) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_1300) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_1300', mini, maxi);

mini :=  min(oxy_sat_1400) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_1400) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_1400', mini, maxi);

mini :=  min(oxy_sat_1500) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_1500) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_1500', mini, maxi);

mini :=  min(oxy_sat_1750) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_1750) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_1750', mini, maxi);

mini :=  min(oxy_sat_2000) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_2000) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_2000', mini, maxi);

mini :=  min(oxy_sat_2500) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_2500) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_2500', mini, maxi);

mini :=  min(oxy_sat_3000) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_3000) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_3000', mini, maxi);

mini :=  min(oxy_sat_3500) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_3500) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_3500', mini, maxi);

mini :=  min(oxy_sat_4000) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_4000) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_4000', mini, maxi);

mini :=  min(oxy_sat_4500) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_4500) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_4500', mini, maxi);

mini :=  min(oxy_sat_5000) FROM oxy_sat_13_grid;
maxi :=  max(oxy_sat_5000) FROM oxy_sat_13_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_13_grid', 'oxy_sat_5000', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0500) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0500) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0500', mini, maxi);

mini :=  min(oxy_sat_0600) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0600) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0600', mini, maxi);

mini :=  min(oxy_sat_0700) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0700) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0700', mini, maxi);

mini :=  min(oxy_sat_0800) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0800) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0800', mini, maxi);

mini :=  min(oxy_sat_0900) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_0900) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_0900', mini, maxi);

mini :=  min(oxy_sat_1000) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_1000) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_1000', mini, maxi);

mini :=  min(oxy_sat_1100) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_1100) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_1100', mini, maxi);

mini :=  min(oxy_sat_1200) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_1200) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_1200', mini, maxi);

mini :=  min(oxy_sat_1300) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_1300) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_1300', mini, maxi);

mini :=  min(oxy_sat_1400) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_1400) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_1400', mini, maxi);

mini :=  min(oxy_sat_1500) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_1500) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_1500', mini, maxi);

mini :=  min(oxy_sat_1750) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_1750) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_1750', mini, maxi);

mini :=  min(oxy_sat_2000) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_2000) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_2000', mini, maxi);

mini :=  min(oxy_sat_2500) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_2500) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_2500', mini, maxi);

mini :=  min(oxy_sat_3000) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_3000) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_3000', mini, maxi);

mini :=  min(oxy_sat_3500) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_3500) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_3500', mini, maxi);

mini :=  min(oxy_sat_4000) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_4000) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_4000', mini, maxi);

mini :=  min(oxy_sat_4500) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_4500) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_4500', mini, maxi);

mini :=  min(oxy_sat_5000) FROM oxy_sat_14_grid;
maxi :=  max(oxy_sat_5000) FROM oxy_sat_14_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_14_grid', 'oxy_sat_5000', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0500) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0500) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0500', mini, maxi);

mini :=  min(oxy_sat_0600) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0600) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0600', mini, maxi);

mini :=  min(oxy_sat_0700) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0700) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0700', mini, maxi);

mini :=  min(oxy_sat_0800) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0800) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0800', mini, maxi);

mini :=  min(oxy_sat_0900) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_0900) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_0900', mini, maxi);

mini :=  min(oxy_sat_1000) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_1000) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_1000', mini, maxi);

mini :=  min(oxy_sat_1100) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_1100) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_1100', mini, maxi);

mini :=  min(oxy_sat_1200) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_1200) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_1200', mini, maxi);

mini :=  min(oxy_sat_1300) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_1300) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_1300', mini, maxi);

mini :=  min(oxy_sat_1400) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_1400) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_1400', mini, maxi);

mini :=  min(oxy_sat_1500) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_1500) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_1500', mini, maxi);

mini :=  min(oxy_sat_1750) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_1750) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_1750', mini, maxi);

mini :=  min(oxy_sat_2000) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_2000) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_2000', mini, maxi);

mini :=  min(oxy_sat_2500) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_2500) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_2500', mini, maxi);

mini :=  min(oxy_sat_3000) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_3000) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_3000', mini, maxi);

mini :=  min(oxy_sat_3500) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_3500) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_3500', mini, maxi);

mini :=  min(oxy_sat_4000) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_4000) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_4000', mini, maxi);

mini :=  min(oxy_sat_4500) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_4500) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_4500', mini, maxi);

mini :=  min(oxy_sat_5000) FROM oxy_sat_15_grid;
maxi :=  max(oxy_sat_5000) FROM oxy_sat_15_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_15_grid', 'oxy_sat_5000', mini, maxi);

mini :=  min(oxy_sat_0000) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0000) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0000', mini, maxi);

mini :=  min(oxy_sat_0010) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0010) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0010', mini, maxi);

mini :=  min(oxy_sat_0020) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0020) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0020', mini, maxi);

mini :=  min(oxy_sat_0030) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0030) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0030', mini, maxi);

mini :=  min(oxy_sat_0050) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0050) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0050', mini, maxi);

mini :=  min(oxy_sat_0075) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0075) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0075', mini, maxi);

mini :=  min(oxy_sat_0100) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0100) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0100', mini, maxi);

mini :=  min(oxy_sat_0125) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0125) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0125', mini, maxi);

mini :=  min(oxy_sat_0150) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0150) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0150', mini, maxi);

mini :=  min(oxy_sat_0200) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0200) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0200', mini, maxi);

mini :=  min(oxy_sat_0250) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0250) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0250', mini, maxi);

mini :=  min(oxy_sat_0300) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0300) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0300', mini, maxi);

mini :=  min(oxy_sat_0400) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0400) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0400', mini, maxi);

mini :=  min(oxy_sat_0500) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0500) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0500', mini, maxi);

mini :=  min(oxy_sat_0600) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0600) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0600', mini, maxi);

mini :=  min(oxy_sat_0700) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0700) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0700', mini, maxi);

mini :=  min(oxy_sat_0800) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0800) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0800', mini, maxi);

mini :=  min(oxy_sat_0900) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_0900) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_0900', mini, maxi);

mini :=  min(oxy_sat_1000) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_1000) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_1000', mini, maxi);

mini :=  min(oxy_sat_1100) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_1100) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_1100', mini, maxi);

mini :=  min(oxy_sat_1200) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_1200) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_1200', mini, maxi);

mini :=  min(oxy_sat_1300) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_1300) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_1300', mini, maxi);

mini :=  min(oxy_sat_1400) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_1400) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_1400', mini, maxi);

mini :=  min(oxy_sat_1500) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_1500) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_1500', mini, maxi);

mini :=  min(oxy_sat_1750) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_1750) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_1750', mini, maxi);

mini :=  min(oxy_sat_2000) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_2000) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_2000', mini, maxi);

mini :=  min(oxy_sat_2500) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_2500) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_2500', mini, maxi);

mini :=  min(oxy_sat_3000) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_3000) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_3000', mini, maxi);

mini :=  min(oxy_sat_3500) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_3500) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_3500', mini, maxi);

mini :=  min(oxy_sat_4000) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_4000) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_4000', mini, maxi);

mini :=  min(oxy_sat_4500) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_4500) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_4500', mini, maxi);

mini :=  min(oxy_sat_5000) FROM oxy_sat_16_grid;
maxi :=  max(oxy_sat_5000) FROM oxy_sat_16_grid;
INSERT INTO aa_minmax_oxy_sat VALUES ('oxy_sat_16_grid', 'oxy_sat_5000', mini, maxi);

CREATE TABLE aa_minmax_nitr (Var_period text, Var_depth text, Minimum float4, Maximum float4);
mini :=  min(nitr_0000) FROM nitr_00_grid;
maxi :=  max(nitr_0000) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_00_grid;
maxi :=  max(nitr_0010) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_00_grid;
maxi :=  max(nitr_0020) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_00_grid;
maxi :=  max(nitr_0030) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_00_grid;
maxi :=  max(nitr_0050) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_00_grid;
maxi :=  max(nitr_0075) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_00_grid;
maxi :=  max(nitr_0100) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_00_grid;
maxi :=  max(nitr_0125) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_00_grid;
maxi :=  max(nitr_0150) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_00_grid;
maxi :=  max(nitr_0200) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_00_grid;
maxi :=  max(nitr_0250) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_00_grid;
maxi :=  max(nitr_0300) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_00_grid;
maxi :=  max(nitr_0400) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0500) FROM nitr_00_grid;
maxi :=  max(nitr_0500) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0500', mini, maxi);

mini :=  min(nitr_0600) FROM nitr_00_grid;
maxi :=  max(nitr_0600) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0600', mini, maxi);

mini :=  min(nitr_0700) FROM nitr_00_grid;
maxi :=  max(nitr_0700) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0700', mini, maxi);

mini :=  min(nitr_0800) FROM nitr_00_grid;
maxi :=  max(nitr_0800) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0800', mini, maxi);

mini :=  min(nitr_0900) FROM nitr_00_grid;
maxi :=  max(nitr_0900) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_0900', mini, maxi);

mini :=  min(nitr_1000) FROM nitr_00_grid;
maxi :=  max(nitr_1000) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_1000', mini, maxi);

mini :=  min(nitr_1100) FROM nitr_00_grid;
maxi :=  max(nitr_1100) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_1100', mini, maxi);

mini :=  min(nitr_1200) FROM nitr_00_grid;
maxi :=  max(nitr_1200) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_1200', mini, maxi);

mini :=  min(nitr_1300) FROM nitr_00_grid;
maxi :=  max(nitr_1300) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_1300', mini, maxi);

mini :=  min(nitr_1400) FROM nitr_00_grid;
maxi :=  max(nitr_1400) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_1400', mini, maxi);

mini :=  min(nitr_1500) FROM nitr_00_grid;
maxi :=  max(nitr_1500) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_1500', mini, maxi);

mini :=  min(nitr_1750) FROM nitr_00_grid;
maxi :=  max(nitr_1750) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_1750', mini, maxi);

mini :=  min(nitr_2000) FROM nitr_00_grid;
maxi :=  max(nitr_2000) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_2000', mini, maxi);

mini :=  min(nitr_2500) FROM nitr_00_grid;
maxi :=  max(nitr_2500) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_2500', mini, maxi);

mini :=  min(nitr_3000) FROM nitr_00_grid;
maxi :=  max(nitr_3000) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_3000', mini, maxi);

mini :=  min(nitr_3500) FROM nitr_00_grid;
maxi :=  max(nitr_3500) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_3500', mini, maxi);

mini :=  min(nitr_4000) FROM nitr_00_grid;
maxi :=  max(nitr_4000) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_4000', mini, maxi);

mini :=  min(nitr_4500) FROM nitr_00_grid;
maxi :=  max(nitr_4500) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_4500', mini, maxi);

mini :=  min(nitr_5000) FROM nitr_00_grid;
maxi :=  max(nitr_5000) FROM nitr_00_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_00_grid', 'nitr_5000', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_01_grid;
maxi :=  max(nitr_0000) FROM nitr_01_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_01_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_01_grid;
maxi :=  max(nitr_0010) FROM nitr_01_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_01_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_01_grid;
maxi :=  max(nitr_0020) FROM nitr_01_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_01_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_01_grid;
maxi :=  max(nitr_0030) FROM nitr_01_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_01_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_01_grid;
maxi :=  max(nitr_0050) FROM nitr_01_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_01_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_01_grid;
maxi :=  max(nitr_0075) FROM nitr_01_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_01_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_01_grid;
maxi :=  max(nitr_0100) FROM nitr_01_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_01_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_01_grid;
maxi :=  max(nitr_0125) FROM nitr_01_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_01_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_01_grid;
maxi :=  max(nitr_0150) FROM nitr_01_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_01_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_01_grid;
maxi :=  max(nitr_0200) FROM nitr_01_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_01_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_01_grid;
maxi :=  max(nitr_0250) FROM nitr_01_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_01_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_01_grid;
maxi :=  max(nitr_0300) FROM nitr_01_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_01_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_01_grid;
maxi :=  max(nitr_0400) FROM nitr_01_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_01_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_02_grid;
maxi :=  max(nitr_0000) FROM nitr_02_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_02_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_02_grid;
maxi :=  max(nitr_0010) FROM nitr_02_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_02_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_02_grid;
maxi :=  max(nitr_0020) FROM nitr_02_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_02_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_02_grid;
maxi :=  max(nitr_0030) FROM nitr_02_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_02_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_02_grid;
maxi :=  max(nitr_0050) FROM nitr_02_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_02_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_02_grid;
maxi :=  max(nitr_0075) FROM nitr_02_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_02_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_02_grid;
maxi :=  max(nitr_0100) FROM nitr_02_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_02_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_02_grid;
maxi :=  max(nitr_0125) FROM nitr_02_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_02_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_02_grid;
maxi :=  max(nitr_0150) FROM nitr_02_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_02_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_02_grid;
maxi :=  max(nitr_0200) FROM nitr_02_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_02_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_02_grid;
maxi :=  max(nitr_0250) FROM nitr_02_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_02_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_02_grid;
maxi :=  max(nitr_0300) FROM nitr_02_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_02_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_02_grid;
maxi :=  max(nitr_0400) FROM nitr_02_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_02_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_03_grid;
maxi :=  max(nitr_0000) FROM nitr_03_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_03_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_03_grid;
maxi :=  max(nitr_0010) FROM nitr_03_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_03_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_03_grid;
maxi :=  max(nitr_0020) FROM nitr_03_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_03_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_03_grid;
maxi :=  max(nitr_0030) FROM nitr_03_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_03_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_03_grid;
maxi :=  max(nitr_0050) FROM nitr_03_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_03_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_03_grid;
maxi :=  max(nitr_0075) FROM nitr_03_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_03_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_03_grid;
maxi :=  max(nitr_0100) FROM nitr_03_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_03_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_03_grid;
maxi :=  max(nitr_0125) FROM nitr_03_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_03_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_03_grid;
maxi :=  max(nitr_0150) FROM nitr_03_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_03_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_03_grid;
maxi :=  max(nitr_0200) FROM nitr_03_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_03_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_03_grid;
maxi :=  max(nitr_0250) FROM nitr_03_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_03_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_03_grid;
maxi :=  max(nitr_0300) FROM nitr_03_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_03_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_03_grid;
maxi :=  max(nitr_0400) FROM nitr_03_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_03_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_04_grid;
maxi :=  max(nitr_0000) FROM nitr_04_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_04_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_04_grid;
maxi :=  max(nitr_0010) FROM nitr_04_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_04_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_04_grid;
maxi :=  max(nitr_0020) FROM nitr_04_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_04_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_04_grid;
maxi :=  max(nitr_0030) FROM nitr_04_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_04_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_04_grid;
maxi :=  max(nitr_0050) FROM nitr_04_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_04_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_04_grid;
maxi :=  max(nitr_0075) FROM nitr_04_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_04_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_04_grid;
maxi :=  max(nitr_0100) FROM nitr_04_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_04_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_04_grid;
maxi :=  max(nitr_0125) FROM nitr_04_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_04_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_04_grid;
maxi :=  max(nitr_0150) FROM nitr_04_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_04_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_04_grid;
maxi :=  max(nitr_0200) FROM nitr_04_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_04_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_04_grid;
maxi :=  max(nitr_0250) FROM nitr_04_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_04_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_04_grid;
maxi :=  max(nitr_0300) FROM nitr_04_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_04_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_04_grid;
maxi :=  max(nitr_0400) FROM nitr_04_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_04_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_05_grid;
maxi :=  max(nitr_0000) FROM nitr_05_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_05_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_05_grid;
maxi :=  max(nitr_0010) FROM nitr_05_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_05_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_05_grid;
maxi :=  max(nitr_0020) FROM nitr_05_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_05_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_05_grid;
maxi :=  max(nitr_0030) FROM nitr_05_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_05_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_05_grid;
maxi :=  max(nitr_0050) FROM nitr_05_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_05_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_05_grid;
maxi :=  max(nitr_0075) FROM nitr_05_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_05_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_05_grid;
maxi :=  max(nitr_0100) FROM nitr_05_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_05_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_05_grid;
maxi :=  max(nitr_0125) FROM nitr_05_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_05_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_05_grid;
maxi :=  max(nitr_0150) FROM nitr_05_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_05_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_05_grid;
maxi :=  max(nitr_0200) FROM nitr_05_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_05_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_05_grid;
maxi :=  max(nitr_0250) FROM nitr_05_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_05_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_05_grid;
maxi :=  max(nitr_0300) FROM nitr_05_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_05_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_05_grid;
maxi :=  max(nitr_0400) FROM nitr_05_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_05_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_06_grid;
maxi :=  max(nitr_0000) FROM nitr_06_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_06_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_06_grid;
maxi :=  max(nitr_0010) FROM nitr_06_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_06_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_06_grid;
maxi :=  max(nitr_0020) FROM nitr_06_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_06_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_06_grid;
maxi :=  max(nitr_0030) FROM nitr_06_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_06_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_06_grid;
maxi :=  max(nitr_0050) FROM nitr_06_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_06_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_06_grid;
maxi :=  max(nitr_0075) FROM nitr_06_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_06_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_06_grid;
maxi :=  max(nitr_0100) FROM nitr_06_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_06_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_06_grid;
maxi :=  max(nitr_0125) FROM nitr_06_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_06_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_06_grid;
maxi :=  max(nitr_0150) FROM nitr_06_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_06_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_06_grid;
maxi :=  max(nitr_0200) FROM nitr_06_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_06_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_06_grid;
maxi :=  max(nitr_0250) FROM nitr_06_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_06_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_06_grid;
maxi :=  max(nitr_0300) FROM nitr_06_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_06_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_06_grid;
maxi :=  max(nitr_0400) FROM nitr_06_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_06_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_07_grid;
maxi :=  max(nitr_0000) FROM nitr_07_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_07_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_07_grid;
maxi :=  max(nitr_0010) FROM nitr_07_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_07_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_07_grid;
maxi :=  max(nitr_0020) FROM nitr_07_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_07_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_07_grid;
maxi :=  max(nitr_0030) FROM nitr_07_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_07_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_07_grid;
maxi :=  max(nitr_0050) FROM nitr_07_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_07_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_07_grid;
maxi :=  max(nitr_0075) FROM nitr_07_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_07_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_07_grid;
maxi :=  max(nitr_0100) FROM nitr_07_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_07_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_07_grid;
maxi :=  max(nitr_0125) FROM nitr_07_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_07_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_07_grid;
maxi :=  max(nitr_0150) FROM nitr_07_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_07_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_07_grid;
maxi :=  max(nitr_0200) FROM nitr_07_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_07_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_07_grid;
maxi :=  max(nitr_0250) FROM nitr_07_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_07_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_07_grid;
maxi :=  max(nitr_0300) FROM nitr_07_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_07_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_07_grid;
maxi :=  max(nitr_0400) FROM nitr_07_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_07_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_08_grid;
maxi :=  max(nitr_0000) FROM nitr_08_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_08_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_08_grid;
maxi :=  max(nitr_0010) FROM nitr_08_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_08_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_08_grid;
maxi :=  max(nitr_0020) FROM nitr_08_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_08_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_08_grid;
maxi :=  max(nitr_0030) FROM nitr_08_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_08_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_08_grid;
maxi :=  max(nitr_0050) FROM nitr_08_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_08_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_08_grid;
maxi :=  max(nitr_0075) FROM nitr_08_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_08_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_08_grid;
maxi :=  max(nitr_0100) FROM nitr_08_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_08_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_08_grid;
maxi :=  max(nitr_0125) FROM nitr_08_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_08_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_08_grid;
maxi :=  max(nitr_0150) FROM nitr_08_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_08_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_08_grid;
maxi :=  max(nitr_0200) FROM nitr_08_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_08_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_08_grid;
maxi :=  max(nitr_0250) FROM nitr_08_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_08_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_08_grid;
maxi :=  max(nitr_0300) FROM nitr_08_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_08_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_08_grid;
maxi :=  max(nitr_0400) FROM nitr_08_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_08_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_09_grid;
maxi :=  max(nitr_0000) FROM nitr_09_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_09_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_09_grid;
maxi :=  max(nitr_0010) FROM nitr_09_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_09_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_09_grid;
maxi :=  max(nitr_0020) FROM nitr_09_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_09_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_09_grid;
maxi :=  max(nitr_0030) FROM nitr_09_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_09_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_09_grid;
maxi :=  max(nitr_0050) FROM nitr_09_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_09_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_09_grid;
maxi :=  max(nitr_0075) FROM nitr_09_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_09_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_09_grid;
maxi :=  max(nitr_0100) FROM nitr_09_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_09_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_09_grid;
maxi :=  max(nitr_0125) FROM nitr_09_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_09_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_09_grid;
maxi :=  max(nitr_0150) FROM nitr_09_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_09_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_09_grid;
maxi :=  max(nitr_0200) FROM nitr_09_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_09_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_09_grid;
maxi :=  max(nitr_0250) FROM nitr_09_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_09_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_09_grid;
maxi :=  max(nitr_0300) FROM nitr_09_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_09_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_09_grid;
maxi :=  max(nitr_0400) FROM nitr_09_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_09_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_10_grid;
maxi :=  max(nitr_0000) FROM nitr_10_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_10_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_10_grid;
maxi :=  max(nitr_0010) FROM nitr_10_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_10_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_10_grid;
maxi :=  max(nitr_0020) FROM nitr_10_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_10_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_10_grid;
maxi :=  max(nitr_0030) FROM nitr_10_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_10_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_10_grid;
maxi :=  max(nitr_0050) FROM nitr_10_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_10_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_10_grid;
maxi :=  max(nitr_0075) FROM nitr_10_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_10_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_10_grid;
maxi :=  max(nitr_0100) FROM nitr_10_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_10_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_10_grid;
maxi :=  max(nitr_0125) FROM nitr_10_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_10_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_10_grid;
maxi :=  max(nitr_0150) FROM nitr_10_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_10_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_10_grid;
maxi :=  max(nitr_0200) FROM nitr_10_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_10_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_10_grid;
maxi :=  max(nitr_0250) FROM nitr_10_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_10_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_10_grid;
maxi :=  max(nitr_0300) FROM nitr_10_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_10_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_10_grid;
maxi :=  max(nitr_0400) FROM nitr_10_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_10_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_11_grid;
maxi :=  max(nitr_0000) FROM nitr_11_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_11_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_11_grid;
maxi :=  max(nitr_0010) FROM nitr_11_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_11_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_11_grid;
maxi :=  max(nitr_0020) FROM nitr_11_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_11_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_11_grid;
maxi :=  max(nitr_0030) FROM nitr_11_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_11_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_11_grid;
maxi :=  max(nitr_0050) FROM nitr_11_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_11_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_11_grid;
maxi :=  max(nitr_0075) FROM nitr_11_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_11_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_11_grid;
maxi :=  max(nitr_0100) FROM nitr_11_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_11_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_11_grid;
maxi :=  max(nitr_0125) FROM nitr_11_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_11_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_11_grid;
maxi :=  max(nitr_0150) FROM nitr_11_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_11_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_11_grid;
maxi :=  max(nitr_0200) FROM nitr_11_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_11_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_11_grid;
maxi :=  max(nitr_0250) FROM nitr_11_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_11_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_11_grid;
maxi :=  max(nitr_0300) FROM nitr_11_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_11_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_11_grid;
maxi :=  max(nitr_0400) FROM nitr_11_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_11_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_12_grid;
maxi :=  max(nitr_0000) FROM nitr_12_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_12_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_12_grid;
maxi :=  max(nitr_0010) FROM nitr_12_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_12_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_12_grid;
maxi :=  max(nitr_0020) FROM nitr_12_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_12_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_12_grid;
maxi :=  max(nitr_0030) FROM nitr_12_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_12_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_12_grid;
maxi :=  max(nitr_0050) FROM nitr_12_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_12_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_12_grid;
maxi :=  max(nitr_0075) FROM nitr_12_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_12_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_12_grid;
maxi :=  max(nitr_0100) FROM nitr_12_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_12_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_12_grid;
maxi :=  max(nitr_0125) FROM nitr_12_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_12_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_12_grid;
maxi :=  max(nitr_0150) FROM nitr_12_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_12_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_12_grid;
maxi :=  max(nitr_0200) FROM nitr_12_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_12_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_12_grid;
maxi :=  max(nitr_0250) FROM nitr_12_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_12_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_12_grid;
maxi :=  max(nitr_0300) FROM nitr_12_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_12_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_12_grid;
maxi :=  max(nitr_0400) FROM nitr_12_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_12_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_13_grid;
maxi :=  max(nitr_0000) FROM nitr_13_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_13_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_13_grid;
maxi :=  max(nitr_0010) FROM nitr_13_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_13_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_13_grid;
maxi :=  max(nitr_0020) FROM nitr_13_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_13_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_13_grid;
maxi :=  max(nitr_0030) FROM nitr_13_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_13_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_13_grid;
maxi :=  max(nitr_0050) FROM nitr_13_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_13_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_13_grid;
maxi :=  max(nitr_0075) FROM nitr_13_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_13_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_13_grid;
maxi :=  max(nitr_0100) FROM nitr_13_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_13_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_13_grid;
maxi :=  max(nitr_0125) FROM nitr_13_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_13_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_13_grid;
maxi :=  max(nitr_0150) FROM nitr_13_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_13_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_13_grid;
maxi :=  max(nitr_0200) FROM nitr_13_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_13_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_13_grid;
maxi :=  max(nitr_0250) FROM nitr_13_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_13_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_13_grid;
maxi :=  max(nitr_0300) FROM nitr_13_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_13_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_13_grid;
maxi :=  max(nitr_0400) FROM nitr_13_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_13_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_14_grid;
maxi :=  max(nitr_0000) FROM nitr_14_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_14_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_14_grid;
maxi :=  max(nitr_0010) FROM nitr_14_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_14_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_14_grid;
maxi :=  max(nitr_0020) FROM nitr_14_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_14_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_14_grid;
maxi :=  max(nitr_0030) FROM nitr_14_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_14_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_14_grid;
maxi :=  max(nitr_0050) FROM nitr_14_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_14_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_14_grid;
maxi :=  max(nitr_0075) FROM nitr_14_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_14_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_14_grid;
maxi :=  max(nitr_0100) FROM nitr_14_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_14_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_14_grid;
maxi :=  max(nitr_0125) FROM nitr_14_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_14_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_14_grid;
maxi :=  max(nitr_0150) FROM nitr_14_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_14_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_14_grid;
maxi :=  max(nitr_0200) FROM nitr_14_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_14_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_14_grid;
maxi :=  max(nitr_0250) FROM nitr_14_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_14_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_14_grid;
maxi :=  max(nitr_0300) FROM nitr_14_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_14_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_14_grid;
maxi :=  max(nitr_0400) FROM nitr_14_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_14_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_15_grid;
maxi :=  max(nitr_0000) FROM nitr_15_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_15_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_15_grid;
maxi :=  max(nitr_0010) FROM nitr_15_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_15_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_15_grid;
maxi :=  max(nitr_0020) FROM nitr_15_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_15_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_15_grid;
maxi :=  max(nitr_0030) FROM nitr_15_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_15_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_15_grid;
maxi :=  max(nitr_0050) FROM nitr_15_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_15_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_15_grid;
maxi :=  max(nitr_0075) FROM nitr_15_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_15_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_15_grid;
maxi :=  max(nitr_0100) FROM nitr_15_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_15_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_15_grid;
maxi :=  max(nitr_0125) FROM nitr_15_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_15_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_15_grid;
maxi :=  max(nitr_0150) FROM nitr_15_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_15_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_15_grid;
maxi :=  max(nitr_0200) FROM nitr_15_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_15_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_15_grid;
maxi :=  max(nitr_0250) FROM nitr_15_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_15_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_15_grid;
maxi :=  max(nitr_0300) FROM nitr_15_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_15_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_15_grid;
maxi :=  max(nitr_0400) FROM nitr_15_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_15_grid', 'nitr_0400', mini, maxi);

mini :=  min(nitr_0000) FROM nitr_16_grid;
maxi :=  max(nitr_0000) FROM nitr_16_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_16_grid', 'nitr_0000', mini, maxi);

mini :=  min(nitr_0010) FROM nitr_16_grid;
maxi :=  max(nitr_0010) FROM nitr_16_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_16_grid', 'nitr_0010', mini, maxi);

mini :=  min(nitr_0020) FROM nitr_16_grid;
maxi :=  max(nitr_0020) FROM nitr_16_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_16_grid', 'nitr_0020', mini, maxi);

mini :=  min(nitr_0030) FROM nitr_16_grid;
maxi :=  max(nitr_0030) FROM nitr_16_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_16_grid', 'nitr_0030', mini, maxi);

mini :=  min(nitr_0050) FROM nitr_16_grid;
maxi :=  max(nitr_0050) FROM nitr_16_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_16_grid', 'nitr_0050', mini, maxi);

mini :=  min(nitr_0075) FROM nitr_16_grid;
maxi :=  max(nitr_0075) FROM nitr_16_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_16_grid', 'nitr_0075', mini, maxi);

mini :=  min(nitr_0100) FROM nitr_16_grid;
maxi :=  max(nitr_0100) FROM nitr_16_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_16_grid', 'nitr_0100', mini, maxi);

mini :=  min(nitr_0125) FROM nitr_16_grid;
maxi :=  max(nitr_0125) FROM nitr_16_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_16_grid', 'nitr_0125', mini, maxi);

mini :=  min(nitr_0150) FROM nitr_16_grid;
maxi :=  max(nitr_0150) FROM nitr_16_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_16_grid', 'nitr_0150', mini, maxi);

mini :=  min(nitr_0200) FROM nitr_16_grid;
maxi :=  max(nitr_0200) FROM nitr_16_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_16_grid', 'nitr_0200', mini, maxi);

mini :=  min(nitr_0250) FROM nitr_16_grid;
maxi :=  max(nitr_0250) FROM nitr_16_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_16_grid', 'nitr_0250', mini, maxi);

mini :=  min(nitr_0300) FROM nitr_16_grid;
maxi :=  max(nitr_0300) FROM nitr_16_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_16_grid', 'nitr_0300', mini, maxi);

mini :=  min(nitr_0400) FROM nitr_16_grid;
maxi :=  max(nitr_0400) FROM nitr_16_grid;
INSERT INTO aa_minmax_nitr VALUES ('nitr_16_grid', 'nitr_0400', mini, maxi);

CREATE TABLE aa_minmax_phosph (Var_period text, Var_depth text, Minimum float4, Maximum float4);
mini :=  min(phosph_0000) FROM phosph_00_grid;
maxi :=  max(phosph_0000) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_00_grid;
maxi :=  max(phosph_0010) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_00_grid;
maxi :=  max(phosph_0020) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_00_grid;
maxi :=  max(phosph_0030) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_00_grid;
maxi :=  max(phosph_0050) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_00_grid;
maxi :=  max(phosph_0075) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_00_grid;
maxi :=  max(phosph_0100) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_00_grid;
maxi :=  max(phosph_0125) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_00_grid;
maxi :=  max(phosph_0150) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_00_grid;
maxi :=  max(phosph_0200) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_00_grid;
maxi :=  max(phosph_0250) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_00_grid;
maxi :=  max(phosph_0300) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_00_grid;
maxi :=  max(phosph_0400) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0500) FROM phosph_00_grid;
maxi :=  max(phosph_0500) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0500', mini, maxi);

mini :=  min(phosph_0600) FROM phosph_00_grid;
maxi :=  max(phosph_0600) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0600', mini, maxi);

mini :=  min(phosph_0700) FROM phosph_00_grid;
maxi :=  max(phosph_0700) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0700', mini, maxi);

mini :=  min(phosph_0800) FROM phosph_00_grid;
maxi :=  max(phosph_0800) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0800', mini, maxi);

mini :=  min(phosph_0900) FROM phosph_00_grid;
maxi :=  max(phosph_0900) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_0900', mini, maxi);

mini :=  min(phosph_1000) FROM phosph_00_grid;
maxi :=  max(phosph_1000) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_1000', mini, maxi);

mini :=  min(phosph_1100) FROM phosph_00_grid;
maxi :=  max(phosph_1100) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_1100', mini, maxi);

mini :=  min(phosph_1200) FROM phosph_00_grid;
maxi :=  max(phosph_1200) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_1200', mini, maxi);

mini :=  min(phosph_1300) FROM phosph_00_grid;
maxi :=  max(phosph_1300) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_1300', mini, maxi);

mini :=  min(phosph_1400) FROM phosph_00_grid;
maxi :=  max(phosph_1400) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_1400', mini, maxi);

mini :=  min(phosph_1500) FROM phosph_00_grid;
maxi :=  max(phosph_1500) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_1500', mini, maxi);

mini :=  min(phosph_1750) FROM phosph_00_grid;
maxi :=  max(phosph_1750) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_1750', mini, maxi);

mini :=  min(phosph_2000) FROM phosph_00_grid;
maxi :=  max(phosph_2000) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_2000', mini, maxi);

mini :=  min(phosph_2500) FROM phosph_00_grid;
maxi :=  max(phosph_2500) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_2500', mini, maxi);

mini :=  min(phosph_3000) FROM phosph_00_grid;
maxi :=  max(phosph_3000) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_3000', mini, maxi);

mini :=  min(phosph_3500) FROM phosph_00_grid;
maxi :=  max(phosph_3500) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_3500', mini, maxi);

mini :=  min(phosph_4000) FROM phosph_00_grid;
maxi :=  max(phosph_4000) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_4000', mini, maxi);

mini :=  min(phosph_4500) FROM phosph_00_grid;
maxi :=  max(phosph_4500) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_4500', mini, maxi);

mini :=  min(phosph_5000) FROM phosph_00_grid;
maxi :=  max(phosph_5000) FROM phosph_00_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_00_grid', 'phosph_5000', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_01_grid;
maxi :=  max(phosph_0000) FROM phosph_01_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_01_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_01_grid;
maxi :=  max(phosph_0010) FROM phosph_01_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_01_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_01_grid;
maxi :=  max(phosph_0020) FROM phosph_01_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_01_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_01_grid;
maxi :=  max(phosph_0030) FROM phosph_01_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_01_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_01_grid;
maxi :=  max(phosph_0050) FROM phosph_01_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_01_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_01_grid;
maxi :=  max(phosph_0075) FROM phosph_01_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_01_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_01_grid;
maxi :=  max(phosph_0100) FROM phosph_01_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_01_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_01_grid;
maxi :=  max(phosph_0125) FROM phosph_01_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_01_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_01_grid;
maxi :=  max(phosph_0150) FROM phosph_01_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_01_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_01_grid;
maxi :=  max(phosph_0200) FROM phosph_01_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_01_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_01_grid;
maxi :=  max(phosph_0250) FROM phosph_01_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_01_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_01_grid;
maxi :=  max(phosph_0300) FROM phosph_01_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_01_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_01_grid;
maxi :=  max(phosph_0400) FROM phosph_01_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_01_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_02_grid;
maxi :=  max(phosph_0000) FROM phosph_02_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_02_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_02_grid;
maxi :=  max(phosph_0010) FROM phosph_02_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_02_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_02_grid;
maxi :=  max(phosph_0020) FROM phosph_02_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_02_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_02_grid;
maxi :=  max(phosph_0030) FROM phosph_02_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_02_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_02_grid;
maxi :=  max(phosph_0050) FROM phosph_02_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_02_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_02_grid;
maxi :=  max(phosph_0075) FROM phosph_02_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_02_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_02_grid;
maxi :=  max(phosph_0100) FROM phosph_02_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_02_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_02_grid;
maxi :=  max(phosph_0125) FROM phosph_02_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_02_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_02_grid;
maxi :=  max(phosph_0150) FROM phosph_02_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_02_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_02_grid;
maxi :=  max(phosph_0200) FROM phosph_02_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_02_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_02_grid;
maxi :=  max(phosph_0250) FROM phosph_02_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_02_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_02_grid;
maxi :=  max(phosph_0300) FROM phosph_02_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_02_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_02_grid;
maxi :=  max(phosph_0400) FROM phosph_02_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_02_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_03_grid;
maxi :=  max(phosph_0000) FROM phosph_03_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_03_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_03_grid;
maxi :=  max(phosph_0010) FROM phosph_03_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_03_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_03_grid;
maxi :=  max(phosph_0020) FROM phosph_03_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_03_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_03_grid;
maxi :=  max(phosph_0030) FROM phosph_03_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_03_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_03_grid;
maxi :=  max(phosph_0050) FROM phosph_03_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_03_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_03_grid;
maxi :=  max(phosph_0075) FROM phosph_03_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_03_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_03_grid;
maxi :=  max(phosph_0100) FROM phosph_03_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_03_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_03_grid;
maxi :=  max(phosph_0125) FROM phosph_03_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_03_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_03_grid;
maxi :=  max(phosph_0150) FROM phosph_03_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_03_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_03_grid;
maxi :=  max(phosph_0200) FROM phosph_03_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_03_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_03_grid;
maxi :=  max(phosph_0250) FROM phosph_03_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_03_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_03_grid;
maxi :=  max(phosph_0300) FROM phosph_03_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_03_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_03_grid;
maxi :=  max(phosph_0400) FROM phosph_03_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_03_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_04_grid;
maxi :=  max(phosph_0000) FROM phosph_04_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_04_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_04_grid;
maxi :=  max(phosph_0010) FROM phosph_04_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_04_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_04_grid;
maxi :=  max(phosph_0020) FROM phosph_04_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_04_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_04_grid;
maxi :=  max(phosph_0030) FROM phosph_04_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_04_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_04_grid;
maxi :=  max(phosph_0050) FROM phosph_04_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_04_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_04_grid;
maxi :=  max(phosph_0075) FROM phosph_04_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_04_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_04_grid;
maxi :=  max(phosph_0100) FROM phosph_04_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_04_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_04_grid;
maxi :=  max(phosph_0125) FROM phosph_04_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_04_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_04_grid;
maxi :=  max(phosph_0150) FROM phosph_04_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_04_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_04_grid;
maxi :=  max(phosph_0200) FROM phosph_04_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_04_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_04_grid;
maxi :=  max(phosph_0250) FROM phosph_04_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_04_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_04_grid;
maxi :=  max(phosph_0300) FROM phosph_04_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_04_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_04_grid;
maxi :=  max(phosph_0400) FROM phosph_04_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_04_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_05_grid;
maxi :=  max(phosph_0000) FROM phosph_05_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_05_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_05_grid;
maxi :=  max(phosph_0010) FROM phosph_05_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_05_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_05_grid;
maxi :=  max(phosph_0020) FROM phosph_05_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_05_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_05_grid;
maxi :=  max(phosph_0030) FROM phosph_05_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_05_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_05_grid;
maxi :=  max(phosph_0050) FROM phosph_05_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_05_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_05_grid;
maxi :=  max(phosph_0075) FROM phosph_05_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_05_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_05_grid;
maxi :=  max(phosph_0100) FROM phosph_05_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_05_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_05_grid;
maxi :=  max(phosph_0125) FROM phosph_05_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_05_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_05_grid;
maxi :=  max(phosph_0150) FROM phosph_05_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_05_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_05_grid;
maxi :=  max(phosph_0200) FROM phosph_05_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_05_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_05_grid;
maxi :=  max(phosph_0250) FROM phosph_05_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_05_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_05_grid;
maxi :=  max(phosph_0300) FROM phosph_05_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_05_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_05_grid;
maxi :=  max(phosph_0400) FROM phosph_05_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_05_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_06_grid;
maxi :=  max(phosph_0000) FROM phosph_06_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_06_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_06_grid;
maxi :=  max(phosph_0010) FROM phosph_06_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_06_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_06_grid;
maxi :=  max(phosph_0020) FROM phosph_06_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_06_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_06_grid;
maxi :=  max(phosph_0030) FROM phosph_06_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_06_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_06_grid;
maxi :=  max(phosph_0050) FROM phosph_06_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_06_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_06_grid;
maxi :=  max(phosph_0075) FROM phosph_06_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_06_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_06_grid;
maxi :=  max(phosph_0100) FROM phosph_06_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_06_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_06_grid;
maxi :=  max(phosph_0125) FROM phosph_06_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_06_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_06_grid;
maxi :=  max(phosph_0150) FROM phosph_06_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_06_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_06_grid;
maxi :=  max(phosph_0200) FROM phosph_06_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_06_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_06_grid;
maxi :=  max(phosph_0250) FROM phosph_06_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_06_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_06_grid;
maxi :=  max(phosph_0300) FROM phosph_06_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_06_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_06_grid;
maxi :=  max(phosph_0400) FROM phosph_06_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_06_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_07_grid;
maxi :=  max(phosph_0000) FROM phosph_07_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_07_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_07_grid;
maxi :=  max(phosph_0010) FROM phosph_07_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_07_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_07_grid;
maxi :=  max(phosph_0020) FROM phosph_07_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_07_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_07_grid;
maxi :=  max(phosph_0030) FROM phosph_07_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_07_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_07_grid;
maxi :=  max(phosph_0050) FROM phosph_07_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_07_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_07_grid;
maxi :=  max(phosph_0075) FROM phosph_07_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_07_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_07_grid;
maxi :=  max(phosph_0100) FROM phosph_07_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_07_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_07_grid;
maxi :=  max(phosph_0125) FROM phosph_07_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_07_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_07_grid;
maxi :=  max(phosph_0150) FROM phosph_07_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_07_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_07_grid;
maxi :=  max(phosph_0200) FROM phosph_07_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_07_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_07_grid;
maxi :=  max(phosph_0250) FROM phosph_07_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_07_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_07_grid;
maxi :=  max(phosph_0300) FROM phosph_07_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_07_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_07_grid;
maxi :=  max(phosph_0400) FROM phosph_07_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_07_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_08_grid;
maxi :=  max(phosph_0000) FROM phosph_08_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_08_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_08_grid;
maxi :=  max(phosph_0010) FROM phosph_08_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_08_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_08_grid;
maxi :=  max(phosph_0020) FROM phosph_08_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_08_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_08_grid;
maxi :=  max(phosph_0030) FROM phosph_08_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_08_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_08_grid;
maxi :=  max(phosph_0050) FROM phosph_08_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_08_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_08_grid;
maxi :=  max(phosph_0075) FROM phosph_08_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_08_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_08_grid;
maxi :=  max(phosph_0100) FROM phosph_08_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_08_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_08_grid;
maxi :=  max(phosph_0125) FROM phosph_08_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_08_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_08_grid;
maxi :=  max(phosph_0150) FROM phosph_08_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_08_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_08_grid;
maxi :=  max(phosph_0200) FROM phosph_08_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_08_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_08_grid;
maxi :=  max(phosph_0250) FROM phosph_08_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_08_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_08_grid;
maxi :=  max(phosph_0300) FROM phosph_08_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_08_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_08_grid;
maxi :=  max(phosph_0400) FROM phosph_08_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_08_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_09_grid;
maxi :=  max(phosph_0000) FROM phosph_09_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_09_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_09_grid;
maxi :=  max(phosph_0010) FROM phosph_09_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_09_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_09_grid;
maxi :=  max(phosph_0020) FROM phosph_09_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_09_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_09_grid;
maxi :=  max(phosph_0030) FROM phosph_09_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_09_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_09_grid;
maxi :=  max(phosph_0050) FROM phosph_09_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_09_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_09_grid;
maxi :=  max(phosph_0075) FROM phosph_09_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_09_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_09_grid;
maxi :=  max(phosph_0100) FROM phosph_09_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_09_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_09_grid;
maxi :=  max(phosph_0125) FROM phosph_09_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_09_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_09_grid;
maxi :=  max(phosph_0150) FROM phosph_09_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_09_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_09_grid;
maxi :=  max(phosph_0200) FROM phosph_09_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_09_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_09_grid;
maxi :=  max(phosph_0250) FROM phosph_09_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_09_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_09_grid;
maxi :=  max(phosph_0300) FROM phosph_09_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_09_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_09_grid;
maxi :=  max(phosph_0400) FROM phosph_09_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_09_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_10_grid;
maxi :=  max(phosph_0000) FROM phosph_10_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_10_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_10_grid;
maxi :=  max(phosph_0010) FROM phosph_10_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_10_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_10_grid;
maxi :=  max(phosph_0020) FROM phosph_10_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_10_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_10_grid;
maxi :=  max(phosph_0030) FROM phosph_10_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_10_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_10_grid;
maxi :=  max(phosph_0050) FROM phosph_10_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_10_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_10_grid;
maxi :=  max(phosph_0075) FROM phosph_10_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_10_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_10_grid;
maxi :=  max(phosph_0100) FROM phosph_10_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_10_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_10_grid;
maxi :=  max(phosph_0125) FROM phosph_10_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_10_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_10_grid;
maxi :=  max(phosph_0150) FROM phosph_10_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_10_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_10_grid;
maxi :=  max(phosph_0200) FROM phosph_10_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_10_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_10_grid;
maxi :=  max(phosph_0250) FROM phosph_10_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_10_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_10_grid;
maxi :=  max(phosph_0300) FROM phosph_10_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_10_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_10_grid;
maxi :=  max(phosph_0400) FROM phosph_10_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_10_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_11_grid;
maxi :=  max(phosph_0000) FROM phosph_11_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_11_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_11_grid;
maxi :=  max(phosph_0010) FROM phosph_11_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_11_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_11_grid;
maxi :=  max(phosph_0020) FROM phosph_11_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_11_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_11_grid;
maxi :=  max(phosph_0030) FROM phosph_11_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_11_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_11_grid;
maxi :=  max(phosph_0050) FROM phosph_11_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_11_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_11_grid;
maxi :=  max(phosph_0075) FROM phosph_11_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_11_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_11_grid;
maxi :=  max(phosph_0100) FROM phosph_11_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_11_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_11_grid;
maxi :=  max(phosph_0125) FROM phosph_11_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_11_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_11_grid;
maxi :=  max(phosph_0150) FROM phosph_11_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_11_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_11_grid;
maxi :=  max(phosph_0200) FROM phosph_11_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_11_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_11_grid;
maxi :=  max(phosph_0250) FROM phosph_11_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_11_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_11_grid;
maxi :=  max(phosph_0300) FROM phosph_11_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_11_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_11_grid;
maxi :=  max(phosph_0400) FROM phosph_11_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_11_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_12_grid;
maxi :=  max(phosph_0000) FROM phosph_12_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_12_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_12_grid;
maxi :=  max(phosph_0010) FROM phosph_12_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_12_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_12_grid;
maxi :=  max(phosph_0020) FROM phosph_12_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_12_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_12_grid;
maxi :=  max(phosph_0030) FROM phosph_12_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_12_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_12_grid;
maxi :=  max(phosph_0050) FROM phosph_12_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_12_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_12_grid;
maxi :=  max(phosph_0075) FROM phosph_12_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_12_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_12_grid;
maxi :=  max(phosph_0100) FROM phosph_12_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_12_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_12_grid;
maxi :=  max(phosph_0125) FROM phosph_12_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_12_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_12_grid;
maxi :=  max(phosph_0150) FROM phosph_12_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_12_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_12_grid;
maxi :=  max(phosph_0200) FROM phosph_12_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_12_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_12_grid;
maxi :=  max(phosph_0250) FROM phosph_12_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_12_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_12_grid;
maxi :=  max(phosph_0300) FROM phosph_12_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_12_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_12_grid;
maxi :=  max(phosph_0400) FROM phosph_12_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_12_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_13_grid;
maxi :=  max(phosph_0000) FROM phosph_13_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_13_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_13_grid;
maxi :=  max(phosph_0010) FROM phosph_13_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_13_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_13_grid;
maxi :=  max(phosph_0020) FROM phosph_13_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_13_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_13_grid;
maxi :=  max(phosph_0030) FROM phosph_13_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_13_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_13_grid;
maxi :=  max(phosph_0050) FROM phosph_13_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_13_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_13_grid;
maxi :=  max(phosph_0075) FROM phosph_13_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_13_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_13_grid;
maxi :=  max(phosph_0100) FROM phosph_13_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_13_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_13_grid;
maxi :=  max(phosph_0125) FROM phosph_13_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_13_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_13_grid;
maxi :=  max(phosph_0150) FROM phosph_13_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_13_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_13_grid;
maxi :=  max(phosph_0200) FROM phosph_13_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_13_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_13_grid;
maxi :=  max(phosph_0250) FROM phosph_13_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_13_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_13_grid;
maxi :=  max(phosph_0300) FROM phosph_13_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_13_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_13_grid;
maxi :=  max(phosph_0400) FROM phosph_13_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_13_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_14_grid;
maxi :=  max(phosph_0000) FROM phosph_14_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_14_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_14_grid;
maxi :=  max(phosph_0010) FROM phosph_14_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_14_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_14_grid;
maxi :=  max(phosph_0020) FROM phosph_14_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_14_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_14_grid;
maxi :=  max(phosph_0030) FROM phosph_14_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_14_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_14_grid;
maxi :=  max(phosph_0050) FROM phosph_14_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_14_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_14_grid;
maxi :=  max(phosph_0075) FROM phosph_14_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_14_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_14_grid;
maxi :=  max(phosph_0100) FROM phosph_14_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_14_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_14_grid;
maxi :=  max(phosph_0125) FROM phosph_14_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_14_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_14_grid;
maxi :=  max(phosph_0150) FROM phosph_14_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_14_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_14_grid;
maxi :=  max(phosph_0200) FROM phosph_14_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_14_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_14_grid;
maxi :=  max(phosph_0250) FROM phosph_14_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_14_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_14_grid;
maxi :=  max(phosph_0300) FROM phosph_14_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_14_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_14_grid;
maxi :=  max(phosph_0400) FROM phosph_14_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_14_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_15_grid;
maxi :=  max(phosph_0000) FROM phosph_15_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_15_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_15_grid;
maxi :=  max(phosph_0010) FROM phosph_15_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_15_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_15_grid;
maxi :=  max(phosph_0020) FROM phosph_15_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_15_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_15_grid;
maxi :=  max(phosph_0030) FROM phosph_15_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_15_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_15_grid;
maxi :=  max(phosph_0050) FROM phosph_15_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_15_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_15_grid;
maxi :=  max(phosph_0075) FROM phosph_15_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_15_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_15_grid;
maxi :=  max(phosph_0100) FROM phosph_15_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_15_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_15_grid;
maxi :=  max(phosph_0125) FROM phosph_15_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_15_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_15_grid;
maxi :=  max(phosph_0150) FROM phosph_15_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_15_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_15_grid;
maxi :=  max(phosph_0200) FROM phosph_15_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_15_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_15_grid;
maxi :=  max(phosph_0250) FROM phosph_15_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_15_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_15_grid;
maxi :=  max(phosph_0300) FROM phosph_15_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_15_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_15_grid;
maxi :=  max(phosph_0400) FROM phosph_15_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_15_grid', 'phosph_0400', mini, maxi);

mini :=  min(phosph_0000) FROM phosph_16_grid;
maxi :=  max(phosph_0000) FROM phosph_16_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_16_grid', 'phosph_0000', mini, maxi);

mini :=  min(phosph_0010) FROM phosph_16_grid;
maxi :=  max(phosph_0010) FROM phosph_16_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_16_grid', 'phosph_0010', mini, maxi);

mini :=  min(phosph_0020) FROM phosph_16_grid;
maxi :=  max(phosph_0020) FROM phosph_16_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_16_grid', 'phosph_0020', mini, maxi);

mini :=  min(phosph_0030) FROM phosph_16_grid;
maxi :=  max(phosph_0030) FROM phosph_16_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_16_grid', 'phosph_0030', mini, maxi);

mini :=  min(phosph_0050) FROM phosph_16_grid;
maxi :=  max(phosph_0050) FROM phosph_16_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_16_grid', 'phosph_0050', mini, maxi);

mini :=  min(phosph_0075) FROM phosph_16_grid;
maxi :=  max(phosph_0075) FROM phosph_16_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_16_grid', 'phosph_0075', mini, maxi);

mini :=  min(phosph_0100) FROM phosph_16_grid;
maxi :=  max(phosph_0100) FROM phosph_16_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_16_grid', 'phosph_0100', mini, maxi);

mini :=  min(phosph_0125) FROM phosph_16_grid;
maxi :=  max(phosph_0125) FROM phosph_16_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_16_grid', 'phosph_0125', mini, maxi);

mini :=  min(phosph_0150) FROM phosph_16_grid;
maxi :=  max(phosph_0150) FROM phosph_16_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_16_grid', 'phosph_0150', mini, maxi);

mini :=  min(phosph_0200) FROM phosph_16_grid;
maxi :=  max(phosph_0200) FROM phosph_16_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_16_grid', 'phosph_0200', mini, maxi);

mini :=  min(phosph_0250) FROM phosph_16_grid;
maxi :=  max(phosph_0250) FROM phosph_16_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_16_grid', 'phosph_0250', mini, maxi);

mini :=  min(phosph_0300) FROM phosph_16_grid;
maxi :=  max(phosph_0300) FROM phosph_16_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_16_grid', 'phosph_0300', mini, maxi);

mini :=  min(phosph_0400) FROM phosph_16_grid;
maxi :=  max(phosph_0400) FROM phosph_16_grid;
INSERT INTO aa_minmax_phosph VALUES ('phosph_16_grid', 'phosph_0400', mini, maxi);

CREATE TABLE aa_minmax_sil (Var_period text, Var_depth text, Minimum float4, Maximum float4);
mini :=  min(sil_0000) FROM sil_00_grid;
maxi :=  max(sil_0000) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_00_grid;
maxi :=  max(sil_0010) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_00_grid;
maxi :=  max(sil_0020) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_00_grid;
maxi :=  max(sil_0030) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_00_grid;
maxi :=  max(sil_0050) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_00_grid;
maxi :=  max(sil_0075) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_00_grid;
maxi :=  max(sil_0100) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_00_grid;
maxi :=  max(sil_0125) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_00_grid;
maxi :=  max(sil_0150) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_00_grid;
maxi :=  max(sil_0200) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_00_grid;
maxi :=  max(sil_0250) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_00_grid;
maxi :=  max(sil_0300) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_00_grid;
maxi :=  max(sil_0400) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0500) FROM sil_00_grid;
maxi :=  max(sil_0500) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0500', mini, maxi);

mini :=  min(sil_0600) FROM sil_00_grid;
maxi :=  max(sil_0600) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0600', mini, maxi);

mini :=  min(sil_0700) FROM sil_00_grid;
maxi :=  max(sil_0700) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0700', mini, maxi);

mini :=  min(sil_0800) FROM sil_00_grid;
maxi :=  max(sil_0800) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0800', mini, maxi);

mini :=  min(sil_0900) FROM sil_00_grid;
maxi :=  max(sil_0900) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_0900', mini, maxi);

mini :=  min(sil_1000) FROM sil_00_grid;
maxi :=  max(sil_1000) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_1000', mini, maxi);

mini :=  min(sil_1100) FROM sil_00_grid;
maxi :=  max(sil_1100) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_1100', mini, maxi);

mini :=  min(sil_1200) FROM sil_00_grid;
maxi :=  max(sil_1200) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_1200', mini, maxi);

mini :=  min(sil_1300) FROM sil_00_grid;
maxi :=  max(sil_1300) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_1300', mini, maxi);

mini :=  min(sil_1400) FROM sil_00_grid;
maxi :=  max(sil_1400) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_1400', mini, maxi);

mini :=  min(sil_1500) FROM sil_00_grid;
maxi :=  max(sil_1500) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_1500', mini, maxi);

mini :=  min(sil_1750) FROM sil_00_grid;
maxi :=  max(sil_1750) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_1750', mini, maxi);

mini :=  min(sil_2000) FROM sil_00_grid;
maxi :=  max(sil_2000) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_2000', mini, maxi);

mini :=  min(sil_2500) FROM sil_00_grid;
maxi :=  max(sil_2500) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_2500', mini, maxi);

mini :=  min(sil_3000) FROM sil_00_grid;
maxi :=  max(sil_3000) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_3000', mini, maxi);

mini :=  min(sil_3500) FROM sil_00_grid;
maxi :=  max(sil_3500) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_3500', mini, maxi);

mini :=  min(sil_4000) FROM sil_00_grid;
maxi :=  max(sil_4000) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_4000', mini, maxi);

mini :=  min(sil_4500) FROM sil_00_grid;
maxi :=  max(sil_4500) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_4500', mini, maxi);

mini :=  min(sil_5000) FROM sil_00_grid;
maxi :=  max(sil_5000) FROM sil_00_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_00_grid', 'sil_5000', mini, maxi);

mini :=  min(sil_0000) FROM sil_01_grid;
maxi :=  max(sil_0000) FROM sil_01_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_01_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_01_grid;
maxi :=  max(sil_0010) FROM sil_01_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_01_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_01_grid;
maxi :=  max(sil_0020) FROM sil_01_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_01_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_01_grid;
maxi :=  max(sil_0030) FROM sil_01_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_01_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_01_grid;
maxi :=  max(sil_0050) FROM sil_01_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_01_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_01_grid;
maxi :=  max(sil_0075) FROM sil_01_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_01_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_01_grid;
maxi :=  max(sil_0100) FROM sil_01_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_01_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_01_grid;
maxi :=  max(sil_0125) FROM sil_01_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_01_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_01_grid;
maxi :=  max(sil_0150) FROM sil_01_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_01_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_01_grid;
maxi :=  max(sil_0200) FROM sil_01_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_01_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_01_grid;
maxi :=  max(sil_0250) FROM sil_01_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_01_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_01_grid;
maxi :=  max(sil_0300) FROM sil_01_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_01_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_01_grid;
maxi :=  max(sil_0400) FROM sil_01_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_01_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_02_grid;
maxi :=  max(sil_0000) FROM sil_02_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_02_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_02_grid;
maxi :=  max(sil_0010) FROM sil_02_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_02_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_02_grid;
maxi :=  max(sil_0020) FROM sil_02_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_02_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_02_grid;
maxi :=  max(sil_0030) FROM sil_02_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_02_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_02_grid;
maxi :=  max(sil_0050) FROM sil_02_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_02_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_02_grid;
maxi :=  max(sil_0075) FROM sil_02_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_02_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_02_grid;
maxi :=  max(sil_0100) FROM sil_02_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_02_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_02_grid;
maxi :=  max(sil_0125) FROM sil_02_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_02_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_02_grid;
maxi :=  max(sil_0150) FROM sil_02_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_02_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_02_grid;
maxi :=  max(sil_0200) FROM sil_02_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_02_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_02_grid;
maxi :=  max(sil_0250) FROM sil_02_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_02_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_02_grid;
maxi :=  max(sil_0300) FROM sil_02_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_02_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_02_grid;
maxi :=  max(sil_0400) FROM sil_02_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_02_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_03_grid;
maxi :=  max(sil_0000) FROM sil_03_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_03_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_03_grid;
maxi :=  max(sil_0010) FROM sil_03_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_03_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_03_grid;
maxi :=  max(sil_0020) FROM sil_03_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_03_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_03_grid;
maxi :=  max(sil_0030) FROM sil_03_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_03_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_03_grid;
maxi :=  max(sil_0050) FROM sil_03_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_03_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_03_grid;
maxi :=  max(sil_0075) FROM sil_03_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_03_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_03_grid;
maxi :=  max(sil_0100) FROM sil_03_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_03_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_03_grid;
maxi :=  max(sil_0125) FROM sil_03_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_03_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_03_grid;
maxi :=  max(sil_0150) FROM sil_03_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_03_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_03_grid;
maxi :=  max(sil_0200) FROM sil_03_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_03_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_03_grid;
maxi :=  max(sil_0250) FROM sil_03_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_03_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_03_grid;
maxi :=  max(sil_0300) FROM sil_03_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_03_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_03_grid;
maxi :=  max(sil_0400) FROM sil_03_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_03_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_04_grid;
maxi :=  max(sil_0000) FROM sil_04_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_04_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_04_grid;
maxi :=  max(sil_0010) FROM sil_04_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_04_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_04_grid;
maxi :=  max(sil_0020) FROM sil_04_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_04_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_04_grid;
maxi :=  max(sil_0030) FROM sil_04_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_04_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_04_grid;
maxi :=  max(sil_0050) FROM sil_04_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_04_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_04_grid;
maxi :=  max(sil_0075) FROM sil_04_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_04_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_04_grid;
maxi :=  max(sil_0100) FROM sil_04_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_04_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_04_grid;
maxi :=  max(sil_0125) FROM sil_04_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_04_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_04_grid;
maxi :=  max(sil_0150) FROM sil_04_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_04_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_04_grid;
maxi :=  max(sil_0200) FROM sil_04_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_04_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_04_grid;
maxi :=  max(sil_0250) FROM sil_04_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_04_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_04_grid;
maxi :=  max(sil_0300) FROM sil_04_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_04_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_04_grid;
maxi :=  max(sil_0400) FROM sil_04_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_04_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_05_grid;
maxi :=  max(sil_0000) FROM sil_05_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_05_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_05_grid;
maxi :=  max(sil_0010) FROM sil_05_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_05_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_05_grid;
maxi :=  max(sil_0020) FROM sil_05_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_05_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_05_grid;
maxi :=  max(sil_0030) FROM sil_05_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_05_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_05_grid;
maxi :=  max(sil_0050) FROM sil_05_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_05_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_05_grid;
maxi :=  max(sil_0075) FROM sil_05_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_05_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_05_grid;
maxi :=  max(sil_0100) FROM sil_05_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_05_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_05_grid;
maxi :=  max(sil_0125) FROM sil_05_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_05_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_05_grid;
maxi :=  max(sil_0150) FROM sil_05_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_05_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_05_grid;
maxi :=  max(sil_0200) FROM sil_05_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_05_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_05_grid;
maxi :=  max(sil_0250) FROM sil_05_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_05_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_05_grid;
maxi :=  max(sil_0300) FROM sil_05_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_05_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_05_grid;
maxi :=  max(sil_0400) FROM sil_05_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_05_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_06_grid;
maxi :=  max(sil_0000) FROM sil_06_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_06_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_06_grid;
maxi :=  max(sil_0010) FROM sil_06_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_06_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_06_grid;
maxi :=  max(sil_0020) FROM sil_06_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_06_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_06_grid;
maxi :=  max(sil_0030) FROM sil_06_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_06_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_06_grid;
maxi :=  max(sil_0050) FROM sil_06_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_06_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_06_grid;
maxi :=  max(sil_0075) FROM sil_06_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_06_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_06_grid;
maxi :=  max(sil_0100) FROM sil_06_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_06_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_06_grid;
maxi :=  max(sil_0125) FROM sil_06_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_06_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_06_grid;
maxi :=  max(sil_0150) FROM sil_06_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_06_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_06_grid;
maxi :=  max(sil_0200) FROM sil_06_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_06_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_06_grid;
maxi :=  max(sil_0250) FROM sil_06_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_06_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_06_grid;
maxi :=  max(sil_0300) FROM sil_06_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_06_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_06_grid;
maxi :=  max(sil_0400) FROM sil_06_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_06_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_07_grid;
maxi :=  max(sil_0000) FROM sil_07_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_07_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_07_grid;
maxi :=  max(sil_0010) FROM sil_07_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_07_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_07_grid;
maxi :=  max(sil_0020) FROM sil_07_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_07_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_07_grid;
maxi :=  max(sil_0030) FROM sil_07_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_07_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_07_grid;
maxi :=  max(sil_0050) FROM sil_07_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_07_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_07_grid;
maxi :=  max(sil_0075) FROM sil_07_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_07_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_07_grid;
maxi :=  max(sil_0100) FROM sil_07_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_07_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_07_grid;
maxi :=  max(sil_0125) FROM sil_07_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_07_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_07_grid;
maxi :=  max(sil_0150) FROM sil_07_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_07_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_07_grid;
maxi :=  max(sil_0200) FROM sil_07_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_07_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_07_grid;
maxi :=  max(sil_0250) FROM sil_07_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_07_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_07_grid;
maxi :=  max(sil_0300) FROM sil_07_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_07_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_07_grid;
maxi :=  max(sil_0400) FROM sil_07_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_07_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_08_grid;
maxi :=  max(sil_0000) FROM sil_08_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_08_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_08_grid;
maxi :=  max(sil_0010) FROM sil_08_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_08_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_08_grid;
maxi :=  max(sil_0020) FROM sil_08_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_08_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_08_grid;
maxi :=  max(sil_0030) FROM sil_08_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_08_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_08_grid;
maxi :=  max(sil_0050) FROM sil_08_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_08_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_08_grid;
maxi :=  max(sil_0075) FROM sil_08_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_08_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_08_grid;
maxi :=  max(sil_0100) FROM sil_08_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_08_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_08_grid;
maxi :=  max(sil_0125) FROM sil_08_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_08_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_08_grid;
maxi :=  max(sil_0150) FROM sil_08_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_08_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_08_grid;
maxi :=  max(sil_0200) FROM sil_08_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_08_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_08_grid;
maxi :=  max(sil_0250) FROM sil_08_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_08_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_08_grid;
maxi :=  max(sil_0300) FROM sil_08_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_08_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_08_grid;
maxi :=  max(sil_0400) FROM sil_08_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_08_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_09_grid;
maxi :=  max(sil_0000) FROM sil_09_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_09_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_09_grid;
maxi :=  max(sil_0010) FROM sil_09_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_09_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_09_grid;
maxi :=  max(sil_0020) FROM sil_09_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_09_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_09_grid;
maxi :=  max(sil_0030) FROM sil_09_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_09_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_09_grid;
maxi :=  max(sil_0050) FROM sil_09_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_09_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_09_grid;
maxi :=  max(sil_0075) FROM sil_09_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_09_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_09_grid;
maxi :=  max(sil_0100) FROM sil_09_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_09_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_09_grid;
maxi :=  max(sil_0125) FROM sil_09_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_09_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_09_grid;
maxi :=  max(sil_0150) FROM sil_09_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_09_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_09_grid;
maxi :=  max(sil_0200) FROM sil_09_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_09_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_09_grid;
maxi :=  max(sil_0250) FROM sil_09_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_09_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_09_grid;
maxi :=  max(sil_0300) FROM sil_09_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_09_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_09_grid;
maxi :=  max(sil_0400) FROM sil_09_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_09_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_10_grid;
maxi :=  max(sil_0000) FROM sil_10_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_10_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_10_grid;
maxi :=  max(sil_0010) FROM sil_10_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_10_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_10_grid;
maxi :=  max(sil_0020) FROM sil_10_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_10_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_10_grid;
maxi :=  max(sil_0030) FROM sil_10_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_10_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_10_grid;
maxi :=  max(sil_0050) FROM sil_10_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_10_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_10_grid;
maxi :=  max(sil_0075) FROM sil_10_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_10_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_10_grid;
maxi :=  max(sil_0100) FROM sil_10_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_10_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_10_grid;
maxi :=  max(sil_0125) FROM sil_10_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_10_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_10_grid;
maxi :=  max(sil_0150) FROM sil_10_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_10_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_10_grid;
maxi :=  max(sil_0200) FROM sil_10_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_10_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_10_grid;
maxi :=  max(sil_0250) FROM sil_10_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_10_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_10_grid;
maxi :=  max(sil_0300) FROM sil_10_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_10_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_10_grid;
maxi :=  max(sil_0400) FROM sil_10_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_10_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_11_grid;
maxi :=  max(sil_0000) FROM sil_11_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_11_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_11_grid;
maxi :=  max(sil_0010) FROM sil_11_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_11_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_11_grid;
maxi :=  max(sil_0020) FROM sil_11_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_11_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_11_grid;
maxi :=  max(sil_0030) FROM sil_11_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_11_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_11_grid;
maxi :=  max(sil_0050) FROM sil_11_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_11_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_11_grid;
maxi :=  max(sil_0075) FROM sil_11_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_11_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_11_grid;
maxi :=  max(sil_0100) FROM sil_11_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_11_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_11_grid;
maxi :=  max(sil_0125) FROM sil_11_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_11_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_11_grid;
maxi :=  max(sil_0150) FROM sil_11_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_11_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_11_grid;
maxi :=  max(sil_0200) FROM sil_11_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_11_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_11_grid;
maxi :=  max(sil_0250) FROM sil_11_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_11_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_11_grid;
maxi :=  max(sil_0300) FROM sil_11_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_11_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_11_grid;
maxi :=  max(sil_0400) FROM sil_11_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_11_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_12_grid;
maxi :=  max(sil_0000) FROM sil_12_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_12_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_12_grid;
maxi :=  max(sil_0010) FROM sil_12_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_12_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_12_grid;
maxi :=  max(sil_0020) FROM sil_12_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_12_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_12_grid;
maxi :=  max(sil_0030) FROM sil_12_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_12_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_12_grid;
maxi :=  max(sil_0050) FROM sil_12_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_12_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_12_grid;
maxi :=  max(sil_0075) FROM sil_12_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_12_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_12_grid;
maxi :=  max(sil_0100) FROM sil_12_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_12_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_12_grid;
maxi :=  max(sil_0125) FROM sil_12_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_12_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_12_grid;
maxi :=  max(sil_0150) FROM sil_12_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_12_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_12_grid;
maxi :=  max(sil_0200) FROM sil_12_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_12_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_12_grid;
maxi :=  max(sil_0250) FROM sil_12_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_12_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_12_grid;
maxi :=  max(sil_0300) FROM sil_12_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_12_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_12_grid;
maxi :=  max(sil_0400) FROM sil_12_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_12_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_13_grid;
maxi :=  max(sil_0000) FROM sil_13_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_13_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_13_grid;
maxi :=  max(sil_0010) FROM sil_13_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_13_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_13_grid;
maxi :=  max(sil_0020) FROM sil_13_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_13_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_13_grid;
maxi :=  max(sil_0030) FROM sil_13_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_13_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_13_grid;
maxi :=  max(sil_0050) FROM sil_13_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_13_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_13_grid;
maxi :=  max(sil_0075) FROM sil_13_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_13_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_13_grid;
maxi :=  max(sil_0100) FROM sil_13_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_13_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_13_grid;
maxi :=  max(sil_0125) FROM sil_13_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_13_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_13_grid;
maxi :=  max(sil_0150) FROM sil_13_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_13_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_13_grid;
maxi :=  max(sil_0200) FROM sil_13_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_13_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_13_grid;
maxi :=  max(sil_0250) FROM sil_13_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_13_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_13_grid;
maxi :=  max(sil_0300) FROM sil_13_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_13_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_13_grid;
maxi :=  max(sil_0400) FROM sil_13_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_13_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_14_grid;
maxi :=  max(sil_0000) FROM sil_14_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_14_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_14_grid;
maxi :=  max(sil_0010) FROM sil_14_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_14_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_14_grid;
maxi :=  max(sil_0020) FROM sil_14_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_14_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_14_grid;
maxi :=  max(sil_0030) FROM sil_14_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_14_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_14_grid;
maxi :=  max(sil_0050) FROM sil_14_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_14_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_14_grid;
maxi :=  max(sil_0075) FROM sil_14_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_14_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_14_grid;
maxi :=  max(sil_0100) FROM sil_14_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_14_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_14_grid;
maxi :=  max(sil_0125) FROM sil_14_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_14_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_14_grid;
maxi :=  max(sil_0150) FROM sil_14_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_14_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_14_grid;
maxi :=  max(sil_0200) FROM sil_14_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_14_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_14_grid;
maxi :=  max(sil_0250) FROM sil_14_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_14_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_14_grid;
maxi :=  max(sil_0300) FROM sil_14_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_14_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_14_grid;
maxi :=  max(sil_0400) FROM sil_14_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_14_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_15_grid;
maxi :=  max(sil_0000) FROM sil_15_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_15_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_15_grid;
maxi :=  max(sil_0010) FROM sil_15_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_15_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_15_grid;
maxi :=  max(sil_0020) FROM sil_15_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_15_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_15_grid;
maxi :=  max(sil_0030) FROM sil_15_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_15_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_15_grid;
maxi :=  max(sil_0050) FROM sil_15_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_15_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_15_grid;
maxi :=  max(sil_0075) FROM sil_15_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_15_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_15_grid;
maxi :=  max(sil_0100) FROM sil_15_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_15_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_15_grid;
maxi :=  max(sil_0125) FROM sil_15_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_15_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_15_grid;
maxi :=  max(sil_0150) FROM sil_15_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_15_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_15_grid;
maxi :=  max(sil_0200) FROM sil_15_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_15_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_15_grid;
maxi :=  max(sil_0250) FROM sil_15_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_15_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_15_grid;
maxi :=  max(sil_0300) FROM sil_15_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_15_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_15_grid;
maxi :=  max(sil_0400) FROM sil_15_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_15_grid', 'sil_0400', mini, maxi);

mini :=  min(sil_0000) FROM sil_16_grid;
maxi :=  max(sil_0000) FROM sil_16_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_16_grid', 'sil_0000', mini, maxi);

mini :=  min(sil_0010) FROM sil_16_grid;
maxi :=  max(sil_0010) FROM sil_16_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_16_grid', 'sil_0010', mini, maxi);

mini :=  min(sil_0020) FROM sil_16_grid;
maxi :=  max(sil_0020) FROM sil_16_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_16_grid', 'sil_0020', mini, maxi);

mini :=  min(sil_0030) FROM sil_16_grid;
maxi :=  max(sil_0030) FROM sil_16_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_16_grid', 'sil_0030', mini, maxi);

mini :=  min(sil_0050) FROM sil_16_grid;
maxi :=  max(sil_0050) FROM sil_16_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_16_grid', 'sil_0050', mini, maxi);

mini :=  min(sil_0075) FROM sil_16_grid;
maxi :=  max(sil_0075) FROM sil_16_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_16_grid', 'sil_0075', mini, maxi);

mini :=  min(sil_0100) FROM sil_16_grid;
maxi :=  max(sil_0100) FROM sil_16_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_16_grid', 'sil_0100', mini, maxi);

mini :=  min(sil_0125) FROM sil_16_grid;
maxi :=  max(sil_0125) FROM sil_16_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_16_grid', 'sil_0125', mini, maxi);

mini :=  min(sil_0150) FROM sil_16_grid;
maxi :=  max(sil_0150) FROM sil_16_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_16_grid', 'sil_0150', mini, maxi);

mini :=  min(sil_0200) FROM sil_16_grid;
maxi :=  max(sil_0200) FROM sil_16_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_16_grid', 'sil_0200', mini, maxi);

mini :=  min(sil_0250) FROM sil_16_grid;
maxi :=  max(sil_0250) FROM sil_16_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_16_grid', 'sil_0250', mini, maxi);

mini :=  min(sil_0300) FROM sil_16_grid;
maxi :=  max(sil_0300) FROM sil_16_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_16_grid', 'sil_0300', mini, maxi);

mini :=  min(sil_0400) FROM sil_16_grid;
maxi :=  max(sil_0400) FROM sil_16_grid;
INSERT INTO aa_minmax_sil VALUES ('sil_16_grid', 'sil_0400', mini, maxi);

RETURN mini;

END$$;


ALTER FUNCTION mfdata.add_minmax(integer) OWNER TO rkottman;

--
-- Name: exists_column(text, text); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION exists_column(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$DECLARE

v_int INTEGER;
res BOOLEAN;

table_name ALIAS FOR $1;
column_name ALIAS FOR $2;

BEGIN

res= 't';
EXECUTE 'SELECT count(attrelid) from pg_attribute, pg_class WHERE pg_class.relname = ''' || table_name || ''' AND attname = ''' || column_name || ''' AND attrelid = pg_class.oid' INTO v_int;

IF (v_int = 0) THEN
res = 'f';
END IF;

RETURN v_int;

END;$_$;


ALTER FUNCTION mfdata.exists_column(text, text) OWNER TO rkottman;

--
-- Name: mf_chloro(real, real, real, text); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_chloro(real, real, real, text) RETURNS real
    LANGUAGE plpgsql
    AS $_$-- Usage :             SELECT mf_chloro(30, -150, 2004, '06');
DECLARE

latitude ALIAS FOR $1;
longitude ALIAS FOR $2;
annee ALIAS FOR $3; --year
period ALIAS FOR $4; -- month

max_cv int4  := 30; --Maximum coefficient of variation (%) tolerated  
min_ss int4  := 10;--Minimum sampling_size required 

res float4;
nb_values int4;

col text;
table_chloro text;
table_cv text;
table_ss text;

BEGIN

col := 'chloro_' || period; --Determine column's name (identic for the three following tables)
table_chloro := 'chloro_' || annee || '_grid'; --Determine table of chlorophyll concentration's name
table_cv := 'chloro_cv_' || annee || '_grid'; --Determine table of coeficient of variation's name
table_ss := 'chloro_ss_' || annee || '_grid'; --Determine table of sampling_site's name

IF (mfdata.mf_exists_column(table_chloro, col)) THEN--Check if data is available for the given period

	--Determine woa05_id of the cell(s) (1 to 4) containing the sample's vertical projection
	DROP TABLE mfresults.chloro_id;
	--DROP TABLE IF EXISTS results.chloro_id;
	EXECUTE 'CREATE TABLE mfresults.chloro_id AS SELECT woa05_grid.woa05_id FROM mfdata.woa05_grid WHERE (DISTANCE (GeomFromText(''Point( '|| longitude || ' ' || latitude || ')''),mfdata.woa05_grid.the_geom)=0);';
	ALTER TABLE mfresults.chloro_id ADD PRIMARY KEY (woa05_id);

	--Get chlorophyll concentration, coefficient of variation and sampling size of the selected cells via their id.
	DROP TABLE mfresults.chloro_res;
	--DROP TABLE IF EXISTS results.chloro_res;
	EXECUTE 'CREATE TABLE mfresults.chloro_res (chloro, coef_var, samp_size) AS SELECT mfdata.'|| table_chloro || '.' || col || ', ' || table_cv || '.' || col || ',' || table_ss || '.' || col || ' FROM mfresults.chloro_id INNER JOIN mfdata.'|| table_chloro || ' USING (woa05_id) INNER JOIN mfdata.'|| table_cv ||' USING (woa05_id) INNER JOIN mfdata.'|| table_ss ||' USING (woa05_id);';

	--To check if data is available at sample's coordinates
	EXECUTE 'SELECT count(mfresults.chloro_res.chloro) FROM mfresults.chloro_res WHERE mfresults.chloro_res.chloro NOTNULL;' INTO nb_values;

	IF( nb_values NOTNULL) THEN

		--Calculate average of chlorophyll for cells whose coefficient of variation <  max_cv and  sampling size > min_ss
		EXECUTE 'SELECT avg(mfresults.chloro_res.chloro) FROM mfresults.chloro_res WHERE mfresults.chloro_res.samp_size > '|| min_ss || ' AND mfresults.chloro_res.coef_var < '|| max_cv || ';' INTO res;

		IF (res ISNULL) THEN
			res:=-9999.4; --No data4 : insufficient resampling quality
		END IF;

	ELSE
		res:=9999.1;--No data1  : presence of continent or clouds covering ocean

	END IF;

ELSE

res:= -9999.3;--No data3 for:  period not available

END IF;

RETURN res;

END$_$;


ALTER FUNCTION mfdata.mf_chloro(real, real, real, text) OWNER TO rkottman;

--
-- Name: mf_chloro_tot(); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_chloro_tot() RETURNS real
    LANGUAGE plpgsql
    AS $$DECLARE

res float4;

BEGIN

DROP TABLE mfresults.user_chloro;

CREATE  TABLE  mfresults.user_chloro (id, depth, chloro) AS SELECT mfresults.user_ss.id, mfresults.user_ss.depth,
mfdata.mf_chloro (mfresults.user_ss.lat, mfresults.user_ss.lon, mfresults.user_ss.annee, mfresults.user_ss.period)
FROM  mfresults.user_ss;

ALTER TABLE  mfresults.user_chloro ADD PRIMARY KEY (id);

RETURN res;

END;$$;


ALTER FUNCTION mfdata.mf_chloro_tot() OWNER TO rkottman;

--
-- Name: mf_exists_column(text, text); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_exists_column(text, text) RETURNS boolean
    LANGUAGE plpgsql
    AS $_$-- not change for different schema
DECLARE

v_int INTEGER;
res BOOLEAN;

table_name ALIAS FOR $1;
column_name ALIAS FOR $2;

BEGIN

res= 't';
EXECUTE 'SELECT count(attrelid) FROM pg_attribute, pg_class WHERE pg_class.relname = ''' || table_name || ''' AND attname = ''' || column_name || ''' AND attrelid = pg_class.oid' INTO v_int;

IF (v_int = 0) THEN
res = 'f';
END IF;

RETURN v_int;

END;$_$;


ALTER FUNCTION mfdata.mf_exists_column(text, text) OWNER TO rkottman;

--
-- Name: mf_test(real, real, real, text); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_test(real, real, real, text) RETURNS real
    LANGUAGE plpgsql
    AS $_$-- Usage:  SELECT  mfdata.mf_test(30, -150, 0, '16');
-- NB this version uses climatologies for chlorophyll estimates (1997-2006 averages)
DECLARE

latitude ALIAS FOR $1;
longitude ALIAS FOR $2;
depth ALIAS FOR $3;
period ALIAS FOR $4;

mytemp float4;
mychloro float4;
mysal float4;

pino text := '06';
res float4;

BEGIN

--PERFORM mf_woa_drop_table();
/*
EXECUTE 'DROP TABLE woa_all_param_tmp';
EXECUTE 'CREATE  TABLE mfresults.woa_all_param_tmp (
id text,
lat  float4,
long float4,
depthw float4,
periode text)';

--ALTER TABLE  woa_all_param_tmp ADD PRIMARY KEY (id);

EXECUTE 'INSERT INTO mfresults.woa_all_param_tmp VALUES(''temp'', '||latitude||', '||longitude||', '||depth||', '||period||')';
--INSERT INTO mfresults.woa_all_param_tmp VALUES(pino, latitude, longitude, depth, period);
*/
--SELECT mfdata.mf_woa_interpol_old(woa_all_param_tmp.lat, woa_all_param_tmp.long, woa_all_param_tmp.depthw, 'temp', woa_all_param_tmp.periode) FROM woa_all_param_tmp INTO mytemp;
SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'temp', period) INTO mytemp;
SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'sal', period) INTO mysal;





SELECT * FROM mfdata.mf_chloro(latitude, longitude, 2004, period) INTO mychloro;

EXECUTE 'DROP TABLE woa_all_param';
EXECUTE 'CREATE  TABLE mfresults.woa_all_param (
id text,
temper  float4,
salinity float4)';

--ALTER TABLE  woa_all_param_tmp ADD PRIMARY KEY (id);

EXECUTE 'INSERT INTO mfresults.woa_all_param VALUES(9, '||mytemp||', '||mysal||')';



--EXECUTE 'SELECT mfdata.mf_woa_interpol_old( mfresults.woa_all_param_tmp.lat,mfresults.woa_all_param_tmp.long,mfresults.woa_all_param_tmp.depthw, mfresults.woa_all_param_tmp.id,'||pino||') FROM mfresults.woa_all_param_tmp' INTO mytemp;
--EXECUTE 'SELECT mfdata.mf_chloro(mfresults.woa_all_param_tmp.lat, mfresults.woa_all_param_tmp.long, ''2002'', mfresults.woa_all_param_tmp.periode) FROM mfresults.woa_all_param_tmp' INTO mychloro;

RETURN  mychloro;
--RETURN  mytemp;

END;

--SELECT mfdata.mf_woa_interpol_old(mfresults.woa_all_param_tmp.lat, mfresults.woa_all_param_tmp.long, mfresults.woa_all_param_tmp.depthw, 'temp', mfresults.woa_all_param_tmp.periode) FROM  mfresults.woa_all_param_tmp INTO mytemp;
--CREATE  TABLE  mfresults.pino(
--temper float4); 
--INSERT INTO mfresults.pino VALUES(mytemp);

/*
CREATE  TABLE  mfresults.woa_all_param(id, temper, sal, oxy_dis, oxy_util, oxy_sat, nitr, phosph, sil, chloro) AS SELECT 9,
mfdata.mf_woa_interpol_old(mfresults.woa_all_param_tmp.lat, mfresults.woa_all_param_tmp.long, mfresults.woa_all_param_tmp.depthw, 'temp', mfresults.woa_all_param_tmp.periode),
mfdata.mf_woa_interpol_old(mfresults.woa_all_param_tmp.lat, mfresults.woa_all_param_tmp.long, mfresults.woa_all_param_tmp.depthw, 'sal', mfresults.woa_all_param_tmp.periode),
mfdata.mf_woa_interpol_old(mfresults.woa_all_param_tmp.lat, mfresults.woa_all_param_tmp.long, mfresults.woa_all_param_tmp.depthw, 'oxy_dis', mfresults.woa_all_param_tmp.periode),
mfdata.mf_woa_interpol_old(mfresults.woa_all_param_tmp.lat, mfresults.woa_all_param_tmp.long, mfresults.woa_all_param_tmp.depthw, 'oxy_util', mfresults.woa_all_param_tmp.periode),
mfdata.mf_woa_interpol_old(mfresults.woa_all_param_tmp.lat, mfresults.woa_all_param_tmp.long, mfresults.woa_all_param_tmp.depthw, 'oxy_sat', mfresults.woa_all_param_tmp.periode),
mfdata.mf_woa_interpol_old(mfresults.woa_all_param_tmp.lat, mfresults.woa_all_param_tmp.long, mfresults.woa_all_param_tmp.depthw, 'nitr', mfresults.woa_all_param_tmp.periode),
mfdata.mf_woa_interpol_old(mfresults.woa_all_param_tmp.lat, mfresults.woa_all_param_tmp.long, mfresults.woa_all_param_tmp.depthw, 'phosph', mfresults.woa_all_param_tmp.periode),
mfdata.mf_woa_interpol_old(mfresults.woa_all_param_tmp.lat, mfresults.woa_all_param_tmp.long, mfresults.woa_all_param_tmp.depthw, 'sil', mfresults.woa_all_param_tmp.periode),
mfdata.mf_chloro(mfresults.woa_all_param_tmp.lat, mfresults.woa_all_param_tmp.long, '2004', mfresults.woa_all_param_tmp.periode)
FROM  mfresults.woa_all_param_tmp;

ALTER TABLE  mfresults.woa_all_param ADD PRIMARY KEY (id);
*/


--Create a table containg WOA05 parameters for sample coordinates defined in mfresults.
/*EXECUTE 'CREATE  TABLE  mfresults.woa_all_param(temper, sal, oxy_dis, oxy_util, oxy_sat, nitr, phosph, sil, chloro) AS SELECT
mfdata.mf_woa_interpol_old('||woa_all_param_tmp.lat||', '||woa_all_param_tmp.long||', '||woa_all_param_tmp.depthw||', '' temp'', '||woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||woa_all_param_tmp.lat||', '||woa_all_param_tmp.long||', '||woa_all_param_tmp.depthw||', '' sal'', '||woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||woa_all_param_tmp.lat||', '||woa_all_param_tmp.long||', '||woa_all_param_tmp.depthw||', '' oxy_dis'', '||woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||woa_all_param_tmp.lat||', '||woa_all_param_tmp.long||', '||woa_all_param_tmp.depthw||', '' oxy_util'', '||woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||woa_all_param_tmp.lat||', '||woa_all_param_tmp.long||', '||woa_all_param_tmp.depthw||', '' oxy_sat'', '||woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||woa_all_param_tmp.lat||', '||woa_all_param_tmp.long||', '||woa_all_param_tmp.depthw||', '' nitr'', '||woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||woa_all_param_tmp.lat||', '||woa_all_param_tmp.long||', '||woa_all_param_tmp.depthw||', '' phosph'', '||woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||woa_all_param_tmp.lat||', '||woa_all_param_tmp.long||', '||woa_all_param_tmp.depthw||', '' sil'', '||woa_all_param_tmp.periode||'),
mfdata.mf_chloro('||woa_all_param_tmp.lat||', '||woa_all_param_tmp.long||', ''2004'', '||woa_all_param_tmp.periode||')'
--FROM  mfresults.woa_all_param_tmp;
FROM  woa_all_param_tmp;
*/
--Create a table containg WOA05 parameters for sample coordinates defined in mfresults.
/*EXECUTE 'CREATE  TABLE  mfresults.woa_all_param(temper, sal, oxy_dis, oxy_util, oxy_sat, nitr, phosph, sil, chloro) AS SELECT
mfdata.mf_woa_interpol_old('||mfresults.woa_all_param_tmp.lat||', '||mfresults.woa_all_param_tmp.long||', '||mfresults.woa_all_param_tmp.depthw||', '' temp'', '||mfresults.woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||mfresults.woa_all_param_tmp.lat||', '||mfresults.woa_all_param_tmp.long||', '||mfresults.woa_all_param_tmp.depthw||', '' sal'', '||mfresults.woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||mfresults.woa_all_param_tmp.lat||', '||mfresults.woa_all_param_tmp.long||', '||mfresults.woa_all_param_tmp.depthw||', '' oxy_dis'', '||mfresults.woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||mfresults.woa_all_param_tmp.lat||', '||mfresults.woa_all_param_tmp.long||', '||mfresults.woa_all_param_tmp.depthw||', '' oxy_util'', '||mfresults.woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||mfresults.woa_all_param_tmp.lat||', '||mfresults.woa_all_param_tmp.long||', '||mfresults.woa_all_param_tmp.depthw||', '' oxy_sat'', '||mfresults.woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||mfresults.woa_all_param_tmp.lat||', '||mfresults.woa_all_param_tmp.long||', '||mfresults.woa_all_param_tmp.depthw||', '' nitr'', '||mfresults.woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||mfresults.woa_all_param_tmp.lat||', '||mfresults.woa_all_param_tmp.long||', '||mfresults.woa_all_param_tmp.depthw||', '' phosph'', '||mfresults.woa_all_param_tmp.periode||'),
mfdata.mf_woa_interpol_old('||mfresults.woa_all_param_tmp.lat||', '||mfresults.woa_all_param_tmp.long||', '||mfresults.woa_all_param_tmp.depthw||', '' sil'', '||mfresults.woa_all_param_tmp.periode||'),
mfdata.mf_chloro('||mfresults.woa_all_param_tmp.lat||', '||mfresults.woa_all_param_tmp.long||', ''2004'', '||mfresults.woa_all_param_tmp.periode||')'
--FROM  mfresults.woa_all_param_tmp;
FROM  woa_all_param_tmp;
*/



--ALTER TABLE  mfresults.user_woa ADD PRIMARY KEY (id);$_$;


ALTER FUNCTION mfdata.mf_test(real, real, real, text) OWNER TO rkottman;

--
-- Name: mf_test(real, real, real, text, real, real); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_test(real, real, real, text, real, real) RETURNS real
    LANGUAGE plpgsql
    AS $_$-- Usage:  SELECT  mfdata.mf_test(30, -150, 0, '16', 2004, 1);
-- limatologies for chlorophyll estimates (1997-2006 averages = 0000)
DECLARE

latitude ALIAS FOR $1;  --  ***** float
longitude ALIAS FOR $2; --  ***** float
depth ALIAS FOR $3;      --  ***** float
period ALIAS FOR $4;      --  ***** text
annee ALIAS FOR $5;       --  ***** float        for chlorophyll only !!          
my_id ALIAS FOR $6;   --  ***** float        id from sampling site

mytemp float4;
mysal float4;
myoxy_dis float4;
myoxy_util float4;
myoxy_sat float4;
mynitr float4;
myphosph float4;
mysil float4;
mychloro float4;

res float4;

BEGIN

SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'temp', period) INTO mytemp;
SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'sal', period) INTO mysal;
SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'oxy_dis', period) INTO myoxy_dis;
SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'oxy_util', period) INTO myoxy_util;
SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'oxy_sat', period) INTO myoxy_sat;
SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'nitr', period) INTO mynitr;
SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'phosph', period) INTO myphosph;
SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'sil', period) INTO mysil;
SELECT * FROM mfdata.mf_chloro(latitude, longitude, annee, period) INTO mychloro;

EXECUTE 'DROP TABLE woa_all_param';
EXECUTE 'CREATE  TABLE mfresults.woa_all_param (
sample_id float4,
temp  float4,
sal float4,
oxy_dis float4,
oxy_util float4,
oxy_sat float4,
nitr float4,
phosph float4,
sil float4,
chloro float4
)';

EXECUTE 'ALTER TABLE  woa_all_param ADD PRIMARY KEY (sample_id)';
EXECUTE 'INSERT INTO mfresults.woa_all_param VALUES('||my_id||', '||mytemp||', '||mysal||', '||myoxy_dis||', '||myoxy_util||', '||myoxy_sat||', '||mynitr||', '||myphosph||', '||mysil||', '||mychloro||' )';

RETURN  mychloro;

END;$_$;


ALTER FUNCTION mfdata.mf_test(real, real, real, text, real, real) OWNER TO rkottman;

--
-- Name: mf_woa_all_param(real, real, real, text, real, real); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_woa_all_param(real, real, real, text, real, real) RETURNS real
    LANGUAGE plpgsql
    AS $_$-- Usage:  SELECT  mfdata.mf_woa_all_param(30, -150, 0, '16', 2004, 1);
-- Usage2:  SELECT  mfdata.mf_woa_all_param(32.87, -117.27,  19.8, '16', 2004, 1);
-- climatologies for chlorophyll estimates (1997-2006 averages = 0000)
-- RESUTS: create a table with all parameters: mfresults.woa_all_param
DECLARE
latitude ALIAS FOR $1;  --  ***** float
longitude ALIAS FOR $2; --  ***** float
depth ALIAS FOR $3;      --  ***** float
period ALIAS FOR $4;      --  ***** text
annee ALIAS FOR $5;       --  ***** float        for chlorophyll only !!
my_id ALIAS FOR $6;   --  ***** float        id from sampling site

testemp real;
mytemp real;
mysal real;
myoxy_dis real;
myoxy_util real;
myoxy_sat real;
mynitr real;
myphosph real;
mysil real;
mychloro real;
--buffer float4;
res real;


BEGIN
-- test if the point is on the main grid IF NOT stop
-- SELECT woa05_id INTO testemp FROM mfdata.temp_00_grid WHERE mfdata.DISTANCE (mfdata.GeomFromText('Point( '|| longitude||' '|| latitude ||')', -1), mfdata.temp_00_grid.the_geom) = 0;

SELECT woa05_id INTO testemp FROM mfdata.temp_00_grid WHERE DISTANCE (GeomFromText('Point( '|| longitude||' '|| latitude ||')', -1), mfdata.temp_00_grid.the_geom) = 0;

IF (SELECT temp_0000 FROM mfdata.temp_00_grid WHERE woa05_id = testemp) IS  NULL THEN
	 --if no data on the grid temp_00  it try to extract values from WOD database
--	EXECUTE 'TRUNCATE TABLE woa_all_param';
	EXECUTE 'TRUNCATE TABLE mfresults.woa_all_param';
	EXECUTE 'INSERT INTO mfresults.woa_all_param VALUES('||my_id||', -9999.1 , -9999.1 , -9999.1 , -9999.1 , -9999.1 , -9999.1 , -9999.1 , -9999.1 , -9999.1)';
	PERFORM  mfdata.mf_wod_select(longitude, latitude, depth, 0.5); -- CALL FOR WOD FUNCTIONS !!!!
	PERFORM  mfdata.mf_wod_all_param(period); --CREATE result table
--return -1;
	ELSE -- use woa data
		SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'temp', period) INTO mytemp;
		SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'sal', period) INTO mysal;
		SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'oxy_dis', period) INTO myoxy_dis;
		SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'oxy_util', period) INTO myoxy_util;
		SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'oxy_sat', period) INTO myoxy_sat;
		SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'nitr', period) INTO mynitr;
		SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'phosph', period) INTO myphosph;
		SELECT * FROM mfdata.mf_woa_interpol_old(latitude, longitude, depth, 'sil', period) INTO mysil;
		SELECT * FROM mfdata.mf_chloro(latitude, longitude, annee, period) INTO mychloro;

--		EXECUTE 'DROP TABLE woa_all_param';
		EXECUTE 'DROP TABLE mfresults.woa_all_param';
		EXECUTE 'CREATE  TABLE mfresults.woa_all_param (
			sample_id float4,
			temp  float4,
			sal float4,
			oxy_dis float4,
			oxy_util float4,
			oxy_sat float4,
			nitr float4,
			phosph float4,
			sil float4,
			chloro float4
			)';

--		EXECUTE 'ALTER TABLE  woa_all_param ADD PRIMARY KEY (sample_id)';
		EXECUTE 'ALTER TABLE  mfresults.woa_all_param ADD PRIMARY KEY (sample_id)';
		EXECUTE 'INSERT INTO mfresults.woa_all_param VALUES('||my_id||', '||mytemp||', '||mysal||', '||myoxy_dis||', '||myoxy_util||', '||myoxy_sat||', '||mynitr||', '||myphosph||', '||mysil||', '||mychloro||' )';
	END IF;
	RETURN  res;
END;$_$;


ALTER FUNCTION mfdata.mf_woa_all_param(real, real, real, text, real, real) OWNER TO rkottman;

--
-- Name: mf_woa_interpol(real, real, text, text, text, text); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_woa_interpol(real, real, text, text, text, text) RETURNS real
    LANGUAGE plpgsql
    AS $_$DECLARE
dist_up ALIAS FOR $1;
dist_down ALIAS FOR $2;
code_up ALIAS FOR $3;
code_down ALIAS FOR $4;
parameter ALIAS FOR $5;
period ALIAS FOR $6;

col_up text;
col_down text;
table_inter text;
val_up float4;
val_down float4;
res float4;

BEGIN

--Determine the column names and the table name to be used for the interpolation
col_up:= parameter || '_' || code_up;
col_down:= parameter || '_' || code_down;
table_inter := parameter  || '_' || period || '_grid';

IF (mfdata.mf_exists_column(table_inter, col_up)) AND (mfdata.mf_exists_column(table_inter, col_down)) THEN--Check if the sample isn't situated below the deepest standard level available

	--Save into woa_res and using cells'id, the parameter's value(s) (0 to 4) of the cells containing the sample's vertical projection for both enclosing stantard levels.
	DROP TABLE mfresults.woa_res;
	--DROP TABLE IF EXISTS results.woa_res;
	EXECUTE 'CREATE TABLE mfresults.woa_res  (valup,valdown) AS SELECT ' || table_inter|| '.' || col_up || ', ' || table_inter || '.' || col_down || ' FROM mfresults.woa_id INNER JOIN  mfdata.'|| table_inter || ' USING (woa05_id)';

	EXECUTE 'SELECT avg(valup) FROM mfresults.woa_res' INTO val_up;--Calculate the average
	EXECUTE 'SELECT avg(valdown) FROM mfresults.woa_res' INTO val_down;--Calculate the average

	IF (val_up NOTNULL) AND (val_down NOTNULL) THEN --Check if data is available for the sampling site coordinates

		IF dist_up = 0 THEN--Check if sample is situated on the upper standard level
		res := val_up;
		ELSEIF dist_down = 0 THEN--Check if sample is  situated on the lower standard level
		res := val_down;
		ELSE
		res := (val_up*dist_down + val_down*dist_up)/(dist_up+dist_down) ;--Perform inverse distance weighted (IDW) interpolation
		END IF;

	ELSE
		res:=-9999.1; --No data(1) : continents or coulds covering ocean
	END IF;

ELSE

res:= -9999.2;--No data(2) : too elevated depth

END IF;

RETURN res;

END;$_$;


ALTER FUNCTION mfdata.mf_woa_interpol(real, real, text, text, text, text) OWNER TO rkottman;

--
-- Name: mf_woa_interpol_old(real, real, real, text, text); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_woa_interpol_old(real, real, real, text, text) RETURNS real
    LANGUAGE plpgsql
    AS $_$-- Usage:  SELECT mfdata.mf_woa_interpol_old(30, -150, 0, 'temp', '16');

DECLARE

latitude ALIAS FOR $1;
longitude ALIAS FOR $2;
depth ALIAS FOR $3;
parameter ALIAS FOR $4;
period ALIAS FOR $5;

res float4;
val_up float4;
val_down float4;
col_up text;
col_down text;
table_inter text;
rec_up record;
rec_down record;
avg_val record;

BEGIN

--Save into rec_up and rec_down 1) the distance between the sample and the two standard layers enclosing it, 2) the code identifying those two levels
EXECUTE 'SELECT ' || depth || ' - woa05_depth_f AS dist_up, woa05_depth_code AS code_up FROM mfdata.woa05_level WHERE woa05_depth_f <= '|| $3  || 'ORDER BY woa05_depth_f DESC LIMIT 1;' INTO rec_up;
EXECUTE 'SELECT woa05_depth_f - ' || depth || '  AS dist_down, woa05_depth_code AS code_down FROM mfdata.woa05_level WHERE woa05_depth_f >=  '|| $3 ||  'ORDER BY woa05_depth_f ASC LIMIT 1;' INTO rec_down;

--Determine the column names and the table name to be used for the interpolation
col_up:= parameter || '_' || rec_up.code_up;
col_down:= parameter || '_' || rec_down.code_down;
table_inter := parameter  || '_' || period || '_grid';

IF (mfdata.mf_exists_column(table_inter, col_up)) AND (mfdata.mf_exists_column(table_inter, col_down)) THEN--Check if the sample isn't situated below the deepest standard level available

	--Save into b_interpol the parameter's value(s) (0 to 4) of the cells containing the sample's vertical projection for both enclosing stantard levels
--	EXECUTE 'CREATE OR REPLACE VIEW mfdata.b_interpol (valup, valdown) AS SELECT ' || col_up || ', ' ||col_down || ' FROM  mfdata.'|| parameter  || '_' || period || '_grid WHERE mfdata.DISTANCE (mfdata.GeomFromText(''Point(' || longitude || ' ' || latitude || ')''), mfdata.' || parameter  || '_' || period ||'_grid.the_geom)=0;';
	EXECUTE 'CREATE OR REPLACE VIEW mfdata.b_interpol (valup, valdown) AS SELECT ' || col_up || ', ' ||col_down || ' FROM  mfdata.'|| parameter  || '_' || period || '_grid WHERE DISTANCE (GeomFromText(''Point(' || longitude || ' ' || latitude || ')''), mfdata.' || parameter  || '_' || period ||'_grid.the_geom)=0;';

	EXECUTE 'SELECT avg(valup) FROM mfdata.b_interpol' INTO val_up;--Calculate the average
	EXECUTE 'SELECT avg(valdown) FROM mfdata.b_interpol' INTO val_down;--Calculate the average

	IF (val_up NOTNULL) AND (val_down NOTNULL) THEN --Check if data is available for the sampling site coordinates

		IF rec_up.dist_up = 0 THEN--Check if sample is situated on the upper standard level
		res := val_up;
		ELSEIF rec_down.dist_down = 0 THEN--Check if sample is  situated on the lower standard level
		res := val_down;
		ELSE
		res := (val_up*rec_down.dist_down + val_down*rec_up.dist_up)/(rec_up.dist_up+rec_down.dist_down) ;--Perform inverse distance weighted (IDW) interpolation
		END IF;

	ELSE
		res:=-9999.1; --No data(1) : continents or coulds covering ocean
	END IF;

ELSE

res:= -9999.2;--No data(2) : too elevated depth

 END IF;

RETURN res;

END$_$;


ALTER FUNCTION mfdata.mf_woa_interpol_old(real, real, real, text, text) OWNER TO rkottman;

--
-- Name: mf_woa_interpol_tot(); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_woa_interpol_tot() RETURNS real
    LANGUAGE plpgsql
    AS $$DECLARE
res float4;--still don't know how to create a plpgsql function that doesn't retrun anything

curs_ss refcursor;--declare cursor to read results.user_ss

ss_id int4;--declare varialbes to get line of results.user_ss(column names)
longitude float4 := 1000;--imposible value
latitude float4 := 1000;--imposible value
new_longitude float4;
new_latitude float4;
depth float4;
period text;
annee int4;

dist_up float4;--Declare variables to be transmtied to the mf_woa_interpol function
dist_down float4;
col_up text;
col_down text;
code_up text;
code_down text;

BEGIN

DROP TABLE mfresults.user_woa;
CREATE TABLE mfresults.user_woa (id int4 PRIMARY KEY, temperature float4, sal float4, oxy_dis float4, oxy_util float4, oxy_sat float4, nitr float4, phosph float4, sil float4);

OPEN curs_ss FOR EXECUTE 'SELECT * FROM mfresults.user_ss';--Read user_ss line by line
LOOP

	FETCH curs_ss INTO ss_id,new_longitude,new_latitude,depth,period,annee;
	IF NOT FOUND THEN--Exit loop when the end of the table is reached
		EXIT;
	END IF;

		--Check if sampling site has changed
		IF (new_latitude != latitude) OR (new_longitude != longitude) THEN

		longitude := new_longitude;
		latitude := new_latitude;

		--Determine woa05_id of the cell(s) (1 to 4) containing the sample's vertical projection
		DROP TABLE mfresults.woa_id;
		--DROP TABLE IF EXISTS results.woa_id;
		EXECUTE 'CREATE TABLE mfresults.woa_id AS SELECT woa05_grid.woa05_id FROM mfdata.woa05_grid WHERE (DISTANCE (GeomFromText(''Point( '|| longitude || ' ' || latitude || ')''),mfdata.woa05_grid.the_geom)=0);';

	END IF;

	--Determine  1) the distance between the sample and the two standard layers enclosing it & 2) the code identifying those two levels
	EXECUTE 'SELECT ' || depth || ' - woa05_depth_f , woa05_depth_code FROM mfdata.woa05_level WHERE woa05_depth_f <= '|| depth  || 'ORDER BY woa05_depth_f DESC LIMIT 1;' INTO dist_up, code_up;
	EXECUTE 'SELECT woa05_depth_f - ' || depth || ' , woa05_depth_code FROM mfdata.woa05_level WHERE woa05_depth_f >=  '|| depth ||  'ORDER BY woa05_depth_f ASC LIMIT 1;' INTO dist_down, code_down;

	--Insert interpolated values into user_woa
	EXECUTE ' INSERT INTO mfresults.user_woa VALUES ('|| ss_id || ',
	mfdata.mf_woa_interpol(' || dist_up || ',' || dist_down ||' ,''' || code_up || ''',''' || code_down || ''', ''temp'',''' || period || '''),
	mfdata.mf_woa_interpol(' || dist_up || ',' || dist_down ||' ,''' || code_up || ''',''' || code_down || ''', ''sal'',''' || period || '''),
	mfdata.mf_woa_interpol(' || dist_up || ',' || dist_down ||' ,''' || code_up || ''',''' || code_down || ''', ''oxy_dis'',''' || period || '''),
	mfdata.mf_woa_interpol(' || dist_up || ',' || dist_down ||' ,''' || code_up || ''',''' || code_down || ''', ''oxy_util'',''' || period || '''),
	mfdata.mf_woa_interpol(' || dist_up || ',' || dist_down ||' ,''' || code_up || ''',''' || code_down || ''', ''oxy_sat'',''' || period || '''),
	mfdata.mf_woa_interpol(' || dist_up || ',' || dist_down ||' ,''' || code_up || ''',''' || code_down || ''', ''nitr'',''' || period || '''),
	mfdata.mf_woa_interpol(' || dist_up || ',' || dist_down ||' ,''' || code_up || ''',''' || code_down || ''', ''phosph'',''' || period || '''),
	mfdata.mf_woa_interpol(' || dist_up || ',' || dist_down ||' ,''' || code_up || ''',''' || code_down || ''', ''sil'',''' || period || '''));';

END LOOP;

CLOSE curs_ss;--Close cursor

RETURN res;

END;$$;


ALTER FUNCTION mfdata.mf_woa_interpol_tot() OWNER TO rkottman;

--
-- Name: mf_woa_interpol_tot_old(); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_woa_interpol_tot_old() RETURNS real
    LANGUAGE plpgsql
    AS $$DECLARE

res float4;

BEGIN


CREATE  TABLE  mfresults.user_woa ( id,  temp, sal, oxy_dis, oxy_util, oxy_sat, nitr, phosph, sil) AS SELECT id,
mfdata.mf_woa_interpol(mfresults.user_ss.lat, mfresults.user_ss.lon, mfresults.user_ss.depth, 'temp', mfresults.user_ss.period),
mfdata.mf_woa_interpol(mfresults.user_ss.lat, mfresults.user_ss.lon, mfresults.user_ss.depth, 'sal', mfresults.user_ss.period),
mfdata.mf_woa_interpol(mfresults.user_ss.lat, mfresults.user_ss.lon, mfresults.user_ss.depth, 'oxy_dis', mfresults.user_ss.period),
mfdata.mf_woa_interpol(mfresults.user_ss.lat, mfresults.user_ss.lon, mfresults.user_ss.depth, 'oxy_util', mfresults.user_ss.period),
mfdata.mf_woa_interpol(mfresults.user_ss.lat, mfresults.user_ss.lon, mfresults.user_ss.depth, 'oxy_sat', mfresults.user_ss.period),
mfdata.mf_woa_interpol(mfresults.user_ss.lat, mfresults.user_ss.lon, mfresults.user_ss.depth, 'nitr', mfresults.user_ss.period),
mfdata.mf_woa_interpol(mfresults.user_ss.lat, mfresults.user_ss.lon, mfresults.user_ss.depth, 'phosph', mfresults.user_ss.period),
mfdata.mf_woa_interpol(mfresults.user_ss.lat, mfresults.user_ss.lon, mfresults.user_ss.depth, 'sil', mfresults.user_ss.period)
FROM  mfresults.user_ss;

ALTER TABLE  mfresults.user_woa ADD PRIMARY KEY (id);

RETURN res;

END;$$;


ALTER FUNCTION mfdata.mf_woa_interpol_tot_old() OWNER TO rkottman;

--
-- Name: mf_wod_all_param(text); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_wod_all_param(text) RETURNS real
    LANGUAGE plpgsql
    AS $_$/*
Usege: select mfdata.mf_wod_all_param('2');
we NEED  1 table: mfresults.wod_averages,  (from wod_select function)
result:  mfresults.wod_all_param
*/
DECLARE
period ALIAS FOR $1;
BEGIN
	EXECUTE 'DROP TABLE  mfresults.wod_all_param'; --THIRD TABLE used as result of woa query for known period

IF period::integer = 13 THEN  -- winter
	EXECUTE 'CREATE TABLE mfresults.wod_all_param(param_id int4, averages float4)';
	EXECUTE ' INSERT INTO mfresults.wod_all_param SELECT param_id, avg( param_avg)
 				FROM mfresults.wod_averages
				WHERE month = 1 OR month = 2 OR month = 3
				GROUP BY  param_id
				ORDER BY param_id ASC';

ELSIF period::integer = 14 THEN --spring
	EXECUTE 'CREATE TABLE mfresults.wod_all_param(param_id int4, averages float4)';
	EXECUTE ' INSERT INTO mfresults.wod_all_param SELECT param_id, avg( param_avg)
 				FROM mfresults.wod_averages
				WHERE month = 4 OR month = 5 OR month = 6
				GROUP BY  param_id
				ORDER BY param_id ASC';

ELSIF period::integer = 15 THEN --summer
	EXECUTE 'CREATE TABLE mfresults.wod_all_param(param_id int4, averages float4)';
	EXECUTE ' INSERT INTO mfresults.wod_all_param SELECT param_id, avg( param_avg)
 				FROM mfresults.wod_averages
				WHERE month = 7 OR month = 8 OR month = 9
				GROUP BY  param_id
				ORDER BY param_id ASC';

ELSIF period::integer = 16 THEN --fall
	EXECUTE 'CREATE TABLE mfresults.wod_all_param(param_id int4, averages float4)';
	EXECUTE ' INSERT INTO mfresults.wod_all_param SELECT param_id, avg( param_avg)
 				FROM mfresults.wod_averages
				WHERE month = 10 OR month = 11 OR month = 12
				GROUP BY  param_id
				ORDER BY param_id ASC';


ELSE -- annual or monthly
	EXECUTE 'CREATE TABLE mfresults.wod_all_param(param_id int4, averages float4)';
	EXECUTE ' INSERT INTO mfresults.wod_all_param SELECT param_id, param_avg
 			FROM mfresults.wod_averages WHERE month = '||period||'';
			-- Inner Join mfdata.units ON mfresults.wod_all_param.param = mfdata.units.param_id';
END IF;

FOR i IN 1..12 LOOP
EXECUTE 'UPDATE mfresults.wod_all_param SET averages = -9999.5  WHERE ( param_id = '||i||') AND (averages IS NULL)';
END LOOP;

return 1;
END;$_$;


ALTER FUNCTION mfdata.mf_wod_all_param(text) OWNER TO rkottman;

--
-- Name: mf_wod_averages(); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_wod_averages() RETURNS real
    LANGUAGE plpgsql
    AS $$/*
Usege: SELECT mfdata.mf_wod_averages();
 we NEED  12 tables results form WOD05 ex temp_raw and so on...
	all reults are copied into wod_raw_tot;  averages and statistics are calulated from this table into wod_averages
Results 2 tables: mfresults.wod_raw_tot and mfresults.wod_averages
*/

DECLARE
avg_item float4; --averages
var_item float4; --variance
count_item float4; -- nb items

BEGIN
EXECUTE 'TRUNCATE TABLE mfresults.wod_raw_tot'; --FIRST TABLE
EXECUTE 'INSERT INTO mfresults.wod_raw_tot
SELECT *  FROM mfresults.temp_raw';
EXECUTE 'UPDATE mfresults.wod_raw_tot SET param_id = 1';

EXECUTE 'INSERT INTO mfresults.wod_raw_tot
SELECT *  FROM mfresults.sal_raw';
EXECUTE 'UPDATE mfresults.wod_raw_tot SET param_id = 2 WHERE param_id IS NULL';

EXECUTE 'INSERT INTO mfresults.wod_raw_tot
SELECT *  FROM mfresults.oxy_raw';
EXECUTE 'UPDATE mfresults.wod_raw_tot SET param_id = 3 WHERE param_id IS NULL';

EXECUTE 'INSERT INTO mfresults.wod_raw_tot
SELECT *  FROM mfresults.phosph_raw';
EXECUTE 'UPDATE mfresults.wod_raw_tot SET param_id = 4 WHERE param_id IS NULL';

EXECUTE 'INSERT INTO mfresults.wod_raw_tot
SELECT *  FROM mfresults.sil_raw';
EXECUTE 'UPDATE mfresults.wod_raw_tot SET param_id = 5 WHERE param_id IS NULL';

EXECUTE 'INSERT INTO mfresults.wod_raw_tot
SELECT *  FROM mfresults.nitra_raw';
EXECUTE 'UPDATE mfresults.wod_raw_tot SET param_id = 6 WHERE param_id IS NULL';

EXECUTE 'INSERT INTO mfresults.wod_raw_tot
SELECT *  FROM mfresults.nitri_raw';
EXECUTE 'UPDATE mfresults.wod_raw_tot SET param_id = 7 WHERE param_id IS NULL';

EXECUTE 'INSERT INTO mfresults.wod_raw_tot
SELECT *  FROM mfresults.nitnat_raw';
EXECUTE 'UPDATE mfresults.wod_raw_tot SET param_id = 8 WHERE param_id IS NULL';

EXECUTE 'INSERT INTO mfresults.wod_raw_tot
SELECT *  FROM mfresults.ph_raw';
EXECUTE 'UPDATE mfresults.wod_raw_tot SET param_id = 9 WHERE param_id IS NULL';

EXECUTE 'INSERT INTO mfresults.wod_raw_tot
SELECT *  FROM mfresults.alk_raw';
EXECUTE 'UPDATE mfresults.wod_raw_tot SET param_id = 10 WHERE param_id IS NULL';

EXECUTE 'INSERT INTO mfresults.wod_raw_tot
SELECT *  FROM mfresults.plank_raw';
EXECUTE 'UPDATE mfresults.wod_raw_tot SET param_id = 11 WHERE param_id IS NULL';

EXECUTE 'INSERT INTO mfresults.wod_raw_tot
SELECT *  FROM mfresults.chl_raw';
EXECUTE 'UPDATE mfresults.wod_raw_tot SET param_id = 12 WHERE param_id IS NULL';

EXECUTE 'TRUNCATE TABLE mfresults.wod_averages'; --SECOND TABLE
FOR n IN 1..12 LOOP --nb parameters
	FOR i IN 1..12 LOOP  --nb months
		SELECT
		avg(param_raw), variance(param_raw), count(param_raw)
		FROM mfresults.wod_raw_tot
		WHERE param_raw IS NOT NULL
		AND month = i
			AND param_id = n
			GROUP BY  month
		INTO avg_item, var_item, count_item;
		INSERT INTO mfresults.wod_averages VALUES (n, avg_item, var_item, count_item, i);
	END LOOP;
	SELECT
	avg(param_raw), variance(param_raw), count(param_raw)
	FROM mfresults.wod_raw_tot
	WHERE param_raw IS NOT NULL
	AND param_id = n
	INTO avg_item, var_item, count_item;
	INSERT INTO mfresults.wod_averages VALUES (n, avg_item, var_item, count_item, 00); -- 00 is annual code
END LOOP;

return avg_item;
END;$$;


ALTER FUNCTION mfdata.mf_wod_averages() OWNER TO rkottman;

--
-- Name: mf_wod_interp(); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_wod_interp() RETURNS real
    LANGUAGE plpgsql
    AS $$/*  directly called from wod_select, it creates 12 "raw tables" performing IDW interpolations

*/
DECLARE
myres float4;
BEGIN

EXECUTE 'DROP TABLE mfresults.temp_raw, mfresults.sal_raw,  mfresults.oxy_raw, mfresults.phosph_raw, mfresults.sil_raw, mfresults.nitra_raw, mfresults.nitri_raw, mfresults.ph_raw,
mfresults.chl_raw, mfresults.plank_raw, mfresults.alk_raw, mfresults.nitnat_raw CASCADE';
EXECUTE 'CREATE TABLE mfresults.temp_raw (idw_temp, month, year) AS
	SELECT
		sum((1/distance_dd) * temperature)/sum(1/distance_dd)
		AS idw_temp, mon as month, yr
	FROM
	elayers.wod05_osd_all Inner Join mfresults.tmp_wod05 ON elayers.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id
	WHERE temperature IS NOT NULL
	GROUP BY mon, yr
	ORDER BY mon ASC';
EXECUTE 'CREATE TABLE mfresults.sal_raw (idw_sal, month, year) AS
	SELECT
		sum((1/distance_dd) * salinity)/sum(1/distance_dd)
		AS idw_sal, mon, yr
	FROM
	elayers.wod05_osd_all Inner Join mfresults.tmp_wod05 ON elayers.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id
	WHERE salinity IS NOT NULL
	GROUP BY mon, yr
	ORDER BY mon ASC';
EXECUTE 'CREATE TABLE mfresults.oxy_raw (idw_oxy, month, year) AS
	SELECT
		sum((1/distance_dd) * oxygen)/sum(1/distance_dd)
		AS idw_oxy, mon, yr
	FROM
	elayers.wod05_osd_all Inner Join mfresults.tmp_wod05 ON elayers.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id
	WHERE oxygen IS NOT NULL
	GROUP BY mon, yr
	ORDER BY mon ASC';
EXECUTE 'CREATE TABLE mfresults.phosph_raw (idw_phosph, month, year) AS
	SELECT
		sum((1/distance_dd) * phosphate)/sum(1/distance_dd)
		AS idw_phosph, mon, yr
	FROM
	elayers.wod05_osd_all Inner Join mfresults.tmp_wod05 ON elayers.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id
	WHERE phosphate IS NOT NULL
	GROUP BY mon, yr
	ORDER BY mon ASC';
EXECUTE 'CREATE TABLE mfresults.sil_raw (idw_sil, month, year) AS
	SELECT
		sum((1/distance_dd) * silicate)/sum(1/distance_dd)
		AS idw_sil, mon, yr
	FROM
	elayers.wod05_osd_all Inner Join mfresults.tmp_wod05 ON elayers.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id
	WHERE silicate IS NOT NULL
	GROUP BY mon, yr
	ORDER BY mon ASC';
EXECUTE 'CREATE TABLE mfresults.nitra_raw (idw_nitra, month, year) AS
	SELECT
		sum((1/distance_dd) * nitrate)/sum(1/distance_dd)
		AS idw_nitra, mon, yr
	FROM
	elayers.wod05_osd_all Inner Join mfresults.tmp_wod05 ON elayers.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id
	WHERE nitrate IS NOT NULL
	GROUP BY mon, yr
	ORDER BY mon ASC';
EXECUTE 'CREATE TABLE mfresults.nitri_raw (idw_nitri, month, year) AS
	SELECT
		sum((1/distance_dd) * nitrite)/sum(1/distance_dd)
		AS idw_nitri, mon, yr
	FROM
	elayers.wod05_osd_all Inner Join mfresults.tmp_wod05 ON elayers.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id
	WHERE nitrite IS NOT NULL
	GROUP BY mon, yr
	ORDER BY mon ASC';
EXECUTE 'CREATE TABLE mfresults.ph_raw (idw_ph, month, year) AS
	SELECT
		sum((1/distance_dd) * ph)/sum(1/distance_dd)
		AS idw_ph, mon, yr
	FROM
	elayers.wod05_osd_all Inner Join mfresults.tmp_wod05 ON elayers.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id
	WHERE ph IS NOT NULL
	GROUP BY mon, yr
	ORDER BY mon ASC';
EXECUTE 'CREATE TABLE mfresults.chl_raw (idw_chl, month, year) AS
	SELECT
		sum((1/distance_dd) * chlorophyll)/sum(1/distance_dd)
		AS idw_chl, mon, yr
	FROM
	elayers.wod05_osd_all Inner Join mfresults.tmp_wod05 ON elayers.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id
	WHERE chlorophyll IS NOT NULL
	GROUP BY mon, yr
	ORDER BY mon ASC';
EXECUTE 'CREATE TABLE mfresults.plank_raw (idw_plank, month, year) AS
	SELECT
		sum((1/distance_dd) * plankton_biomass)/sum(1/distance_dd)
		AS idw_plank, mon, yr
	FROM
	elayers.wod05_osd_all Inner Join mfresults.tmp_wod05 ON elayers.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id
	WHERE plankton_biomass IS NOT NULL
	GROUP BY mon, yr
	ORDER BY mon ASC';
EXECUTE 'CREATE TABLE mfresults.alk_raw (idw_alk, month, year) AS
	SELECT
		sum((1/distance_dd) * alkalinity)/sum(1/distance_dd)
		AS idw_alk, mon, yr
	FROM
	elayers.wod05_osd_all Inner Join mfresults.tmp_wod05 ON elayers.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id
	WHERE alkalinity IS NOT NULL
	GROUP BY mon, yr
	ORDER BY mon ASC';
EXECUTE 'CREATE TABLE mfresults.nitnat_raw (idw_nitnat, month, year) AS
	SELECT
		sum((1/distance_dd) * nitrate_nitrite)/sum(1/distance_dd)
		AS idw_nitnat, mon, yr
	FROM
	elayers.wod05_osd_all Inner Join mfresults.tmp_wod05 ON elayers.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id
	WHERE nitrate_nitrite IS NOT NULL
	GROUP BY mon, yr
	ORDER BY mon ASC';

PERFORM mfdata.mf_wod_averages(); -- call for last function
return myres;
END;$$;


ALTER FUNCTION mfdata.mf_wod_interp() OWNER TO rkottman;

--
-- Name: mf_wod_select(real, real, real, real); Type: FUNCTION; Schema: mfdata; Owner: megxuser
--

CREATE FUNCTION mf_wod_select(real, real, real, real) RETURNS real
    LANGUAGE plpgsql
    AS $_$DECLARE

long ALIAS for $1;                    -- longitude DD
lat ALIAS for $2;                      -- latitude DD
depth_user ALIAS for $3;        -- depth of  sampling in meters
buffer ALIAS for $4;                -- buffer (0.5 DD)

res1 float4; --top_depth
res2 float4; --low_depth
mylong float4; -- 360 to -180
res float4;

BEGIN
IF long < 0 THEN
mylong := ((long * -1) - 360) * -1;  --if negative transform because in wod05_osd_all table long values are 0 to 360
ELSE mylong := long;
END IF;

IF $3 BETWEEN 0 AND 5 THEN
res1 := 0;
res2 := 10;

ELSIF $3 BETWEEN 6 AND 10 THEN
res1 := $3 - 5;
res2 := $3 + 5;

ELSIF $3 BETWEEN 11 AND 30 THEN
res1 := $3 - 5;
res2 := $3 + 5;

ELSIF $3 BETWEEN 31 AND 50 THEN
res1 := $3 - 10;
res2 := $3 + 10;

ELSIF $3 BETWEEN 51 AND 125 THEN
res1 := $3 - 12.5;
res2 := $3 + 12.5;

ELSIF $3 BETWEEN 126 AND 300 THEN
res1 := $3 - 25;
res2 := $3 + 25;

ELSIF $3 BETWEEN 301 AND 1500 THEN
res1 := $3 - 50;
res2 := $3 + 50;

ELSIF $3 BETWEEN 1501 AND 2000 THEN
res1 := $3 - 125;
res2 := $3 + 125;

ELSIF $3 BETWEEN 2001 AND 9000 THEN -- end of WOD standard depths
res1 := $3 - 250;
res2 := $3 + 250;

ELSIF $3 BETWEEN 9001 AND 10911 THEN  -- max depth (Marianne)
res1 := $3 - 250;
res2 := $3 + 250;

ELSE
res1 := 99999;
res2 := 99999;

END IF;

DROP TABLE  mfresults.tmp_wod05;
	CREATE  TABLE mfresults.tmp_wod05 (distance_dd, longitude, latitude, wod05_id) AS
		SELECT (((((mylong - longitude) ^ 2.0) + ((lat - latitude) ^ 2.0)) ^ 0.5)) + 0.0000001, longitude, latitude, wod05_id
		FROM (SELECT longitude, latitude, depth, wod05_id
			FROM elayers.wod05_osd_all
			WHERE
				((((((elayers.wod05_osd_all.longitude>= ((mylong - buffer)))
			AND (elayers.wod05_osd_all.longitude <= ((mylong + buffer))))
			AND (elayers.wod05_osd_all.latitude >= ((lat - buffer))))
			AND (elayers.wod05_osd_all.latitude <= ((lat + buffer))))
			AND (elayers.wod05_osd_all.depth >= (res1))) -- top depth
			AND (elayers.wod05_osd_all.depth <= (res2))) --lower depth
			)
			AS foo;

PERFORM mfdata.mf_wod_interp(); -- call for next function


RETURN res;
END;$_$;


ALTER FUNCTION mfdata.mf_wod_select(real, real, real, real) OWNER TO megxuser;

--
-- Name: mf_zwod_all_param(real); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION mf_zwod_all_param(real) RETURNS real
    LANGUAGE plpgsql
    AS $_$/*
Usege: select mfdata.mf_wod_all_param(2);
we NEED  1 table: mfresults.wod_averages,  (from wod_select function)
result:  mfresults.wod_all_param

*/

DECLARE
period ALIAS FOR $1;

BEGIN

EXECUTE 'DROP TABLE  mfresults.wod_all_param'; --THIRD TABLE used as result of woa query for known period
EXECUTE 'CREATE TABLE mfresults.wod_all_param(param_id int4, averages float4)';
EXECUTE ' INSERT INTO mfresults.wod_all_param SELECT param_id, param_avg
 			FROM mfresults.wod_averages WHERE month = '||period||'';
			-- Inner Join mfdata.units ON mfresults.wod_all_param.param = mfdata.units.param_id';

return 1;
END;$_$;


ALTER FUNCTION mfdata.mf_zwod_all_param(real) OWNER TO rkottman;

--
-- Name: na_noel(text); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION na_noel(text) RETURNS real
    LANGUAGE plpgsql
    AS $_$DECLARE

samp_sites ALIAS FOR $1;

res float4;

BEGIN

DROP TABLE results_na.ss_parameters;

CREATE  TABLE results_na.ss_parameters ( id,  temp, sal, oxy_dis, oxy_util, oyx_sat, nitr, phosph, sil) AS SELECT id,
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'temp', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'sal', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'oxy_dis', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'oxy_util', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'oxy_sat', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'nitr', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'phosph', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'sil', sampling_sites.period)
FROM sampling_sites;

ALTER TABLE results_na.ss_parameters ADD PRIMARY KEY (id);

RETURN res;

END;$_$;


ALTER FUNCTION mfdata.na_noel(text) OWNER TO rkottman;

--
-- Name: na_noel_2(text); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION na_noel_2(text) RETURNS real
    LANGUAGE plpgsql
    AS $_$DECLARE

samp_sites ALIAS FOR $1;

res float4;

BEGIN

DROP TABLE results_na.ss_parameters;

CREATE  TABLE results_na.ss_parameters ( id,  temp, sal, oxy_dis, oxy_util, oyx_sat, nitr, phosph, sil) AS SELECT id,
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'temp', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'sal', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'oxy_dis', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'oxy_util', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'oxy_sat', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'nitr', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'phosph', sampling_sites.period),
mf_inter_woa(sampling_sites.lat, sampling_sites.lon, sampling_sites.depth, 'sil', sampling_sites.period)
FROM sampling_sites;

ALTER TABLE results_na.ss_parameters ADD PRIMARY KEY (id);

RETURN res;

END;$_$;


ALTER FUNCTION mfdata.na_noel_2(text) OWNER TO rkottman;

--
-- Name: transform_chloro(text); Type: FUNCTION; Schema: mfdata; Owner: rkottman
--

CREATE FUNCTION transform_chloro(tab text) RETURNS void
    LANGUAGE plpgsql
    AS $$

DECLARE 
  state text := '';
  season text := '-1';
  --also non determined has to work in order to differentiate non working selects
  testq text := 'Select true';
BEGIN
FOR i IN 0 .. 16 LOOP
  season := lpad(i::text,2,'0');
  testq := 'select chloro_' || season || ' FROM mfdata.chloro_'|| tab ||'_grid limit 1';
  
  RAISE NOTICE 'test=%',testq;

    BEGIN
      EXECUTE testq;
  
    EXCEPTION
      WHEN undefined_column THEN
      RAISE NOTICE 'no column=%',season; 
      CONTINUE;
    END;
  state := 'INSERT INTO elayers.chlorophyll(woa05_id,geom,season,yr,val) '||
           'SELECT woa05_id, the_geom,' || i || ',' 
                   || tab ||', chloro_' || season ||
            ' FROM mfdata.chloro_'|| tab ||'_grid where chloro_'||season||
            ' IS NOT NULL';
    RAISE NOTICE 'execute=%',state;
  EXECUTE state;
    
  

END LOOP;
END;
$$;


ALTER FUNCTION mfdata.transform_chloro(tab text) OWNER TO rkottman;

SET search_path = mfresults, pg_catalog;

--
-- Name: kill(); Type: FUNCTION; Schema: mfresults; Owner: rkottman
--

CREATE FUNCTION kill() RETURNS real
    LANGUAGE plpgsql
    AS $$DECLARE
myres float4;
BEGIN

DROP TABLE mfresults.temp_raw, mfresults.sal_raw,  mfresults.oxy_raw, mfresults.phosph_raw, mfresults.sil_raw, mfresults.nitra_raw, mfresults.nitri_raw, mfresults.ph_raw,
mfresults.chl_raw, mfresults.plank_raw, mfresults.alk_raw, mfresults.nitnat_raw CASCADE;

PERFORM mfresults.mf_wod_interp();
return myres;
END;$$;


ALTER FUNCTION mfresults.kill() OWNER TO rkottman;

--
-- Name: mf_wod_interp(); Type: FUNCTION; Schema: mfresults; Owner: rkottman
--

CREATE FUNCTION mf_wod_interp() RETURNS SETOF temp_raw_type
    LANGUAGE sql
    AS $$-- DROP all previous tables
DROP TABLE mfresults.temp_raw, mfresults.sal_raw,  mfresults.oxy_raw, mfresults.phosph_raw, mfresults.sil_raw, mfresults.nitra_raw, mfresults.nitri_raw, mfresults.ph_raw,
mfresults.chl_raw, mfresults.plank_raw, mfresults.alk_raw, mfresults.nitnat_raw CASCADE;
CREATE TABLE mfresults.temp_raw (idw_temp, month, year) AS
	SELECT
		sum((1/distance_dd) * temperature)/sum(1/distance_dd) -- Inverse distane interpolation (IDW)
		AS idw_temp, month, year
	FROM
	"mfdata"."wod05_osd_all" Inner Join "mfresults"."tmp_wod05" ON "mfdata"."wod05_osd_all"."wod05_id" = "mfresults"."tmp_wod05"."wod05_id" AND '' = '' AND '' = ''
	WHERE temperature IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC;
CREATE TABLE mfresults.sal_raw (idw_sal, month, year) AS
	SELECT
		sum((1/distance_dd) * salinity)/sum(1/distance_dd) -- Inverse distane interpolation (IDW)
		AS idw_sal, month, year
	FROM
	"mfdata"."wod05_osd_all" Inner Join "mfresults"."tmp_wod05" ON "mfdata"."wod05_osd_all"."wod05_id" = "mfresults"."tmp_wod05"."wod05_id" AND '' = '' AND '' = ''
	WHERE salinity IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC;
CREATE TABLE mfresults.oxy_raw (idw_oxy, month, year) AS
	SELECT
		sum((1/distance_dd) * oxygen)/sum(1/distance_dd) -- Inverse distane interpolation (IDW)
		AS idw_oxy, month, year
	FROM
	"mfdata"."wod05_osd_all" Inner Join "mfresults"."tmp_wod05" ON "mfdata"."wod05_osd_all"."wod05_id" = "mfresults"."tmp_wod05"."wod05_id" AND '' = '' AND '' = ''
	WHERE oxygen IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC;
CREATE TABLE mfresults.phosph_raw (idw_phosph, month, year) AS
	SELECT
		sum((1/distance_dd) * phosphate)/sum(1/distance_dd) -- Inverse distane interpolation (IDW)
		AS idw_phosph, month, year
	FROM
	"mfdata"."wod05_osd_all" Inner Join "mfresults"."tmp_wod05" ON "mfdata"."wod05_osd_all"."wod05_id" = "mfresults"."tmp_wod05"."wod05_id" AND '' = '' AND '' = ''
	WHERE phosphate IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC;
CREATE TABLE mfresults.sil_raw (idw_sil, month, year) AS
	SELECT
		sum((1/distance_dd) * silicate)/sum(1/distance_dd) -- Inverse distane interpolation (IDW)
		AS idw_sil, month, year
	FROM
	"mfdata"."wod05_osd_all" Inner Join "mfresults"."tmp_wod05" ON "mfdata"."wod05_osd_all"."wod05_id" = "mfresults"."tmp_wod05"."wod05_id" AND '' = '' AND '' = ''
	WHERE silicate IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC;
CREATE TABLE mfresults.nitra_raw (idw_nitra, month, year) AS
	SELECT
		sum((1/distance_dd) * nitrate)/sum(1/distance_dd) -- Inverse distane interpolation (IDW)
		AS idw_nitra, month, year
	FROM
	"mfdata"."wod05_osd_all" Inner Join "mfresults"."tmp_wod05" ON "mfdata"."wod05_osd_all"."wod05_id" = "mfresults"."tmp_wod05"."wod05_id" AND '' = '' AND '' = ''
	WHERE nitrate IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC;
CREATE TABLE mfresults.nitri_raw (idw_nitri, month, year) AS
	SELECT
		sum((1/distance_dd) * nitrite)/sum(1/distance_dd) -- Inverse distane interpolation (IDW)
		AS idw_nitri, month, year
	FROM
	"mfdata"."wod05_osd_all" Inner Join "mfresults"."tmp_wod05" ON "mfdata"."wod05_osd_all"."wod05_id" = "mfresults"."tmp_wod05"."wod05_id" AND '' = '' AND '' = ''
	WHERE nitrite IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC;
CREATE TABLE mfresults.ph_raw (idw_ph, month, year) AS
	SELECT
		sum((1/distance_dd) * ph)/sum(1/distance_dd) -- Inverse distane interpolation (IDW)
		AS idw_ph, month, year
	FROM
	"mfdata"."wod05_osd_all" Inner Join "mfresults"."tmp_wod05" ON "mfdata"."wod05_osd_all"."wod05_id" = "mfresults"."tmp_wod05"."wod05_id" AND '' = '' AND '' = ''
	WHERE ph IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC;
CREATE TABLE mfresults.chl_raw (idw_chl, month, year) AS
	SELECT
		sum((1/distance_dd) * chlorophyll)/sum(1/distance_dd) -- Inverse distane interpolation (IDW)
		AS idw_chl, month, year
	FROM
	"mfdata"."wod05_osd_all" Inner Join "mfresults"."tmp_wod05" ON "mfdata"."wod05_osd_all"."wod05_id" = "mfresults"."tmp_wod05"."wod05_id" AND '' = '' AND '' = ''
	WHERE chlorophyll IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC;
CREATE TABLE mfresults.plank_raw (idw_plank, month, year) AS
	SELECT
		sum((1/distance_dd) * plankton_biomass)/sum(1/distance_dd) -- Inverse distane interpolation (IDW)
		AS idw_plank, month, year
	FROM
	"mfdata"."wod05_osd_all" Inner Join "mfresults"."tmp_wod05" ON "mfdata"."wod05_osd_all"."wod05_id" = "mfresults"."tmp_wod05"."wod05_id" AND '' = '' AND '' = ''
	WHERE plankton_biomass IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC;
CREATE TABLE mfresults.alk_raw (idw_alk, month, year) AS
	SELECT
		sum((1/distance_dd) * alkalinity)/sum(1/distance_dd) -- Inverse distane interpolation (IDW)
		AS idw_alk, month, year
	FROM
	"mfdata"."wod05_osd_all" Inner Join "mfresults"."tmp_wod05" ON "mfdata"."wod05_osd_all"."wod05_id" = "mfresults"."tmp_wod05"."wod05_id" AND '' = '' AND '' = ''
	WHERE alkalinity IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC;
CREATE TABLE mfresults.nitnat_raw (idw_nitnat, month, year) AS
	SELECT
		sum((1/distance_dd) * nitrate_nitrite)/sum(1/distance_dd) -- Inverse distane interpolation (IDW)
		AS idw_nitnat, month, year
	FROM
	"mfdata"."wod05_osd_all" Inner Join "mfresults"."tmp_wod05" ON "mfdata"."wod05_osd_all"."wod05_id" = "mfresults"."tmp_wod05"."wod05_id" AND '' = '' AND '' = ''
	WHERE nitrate_nitrite IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC;$$;


ALTER FUNCTION mfresults.mf_wod_interp() OWNER TO rkottman;

--
-- Name: test_wod(); Type: FUNCTION; Schema: mfresults; Owner: rkottman
--

CREATE FUNCTION test_wod() RETURNS real
    LANGUAGE plpgsql
    AS $$DECLARE
myres float4;
BEGIN

EXECUTE 'DROP TABLE mfresults.temp_raw, mfresults.sal_raw,  mfresults.oxy_raw, mfresults.phosph_raw, mfresults.sil_raw, mfresults.nitra_raw, mfresults.nitri_raw, mfresults.ph_raw,
mfresults.chl_raw, mfresults.plank_raw, mfresults.alk_raw, mfresults.nitnat_raw CASCADE';
EXECUTE 'CREATE TABLE mfresults.temp_raw (idw_temp, month, year) AS
	SELECT
		sum((1/distance_dd) * temperature)/sum(1/distance_dd)
		AS idw_temp, month, year
	FROM
	mfdata.wod05_osd_all Inner Join mfresults.tmp_wod05 ON mfdata.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id 
	WHERE temperature IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC';
EXECUTE 'CREATE TABLE mfresults.sal_raw (idw_sal, month, year) AS
	SELECT
		sum((1/distance_dd) * salinity)/sum(1/distance_dd) 
		AS idw_sal, month, year
	FROM
	mfdata.wod05_osd_all Inner Join mfresults.tmp_wod05 ON mfdata.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id 
	WHERE salinity IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC';
EXECUTE 'CREATE TABLE mfresults.oxy_raw (idw_oxy, month, year) AS
	SELECT
		sum((1/distance_dd) * oxygen)/sum(1/distance_dd) 
		AS idw_oxy, month, year
	FROM
	mfdata.wod05_osd_all Inner Join mfresults.tmp_wod05 ON mfdata.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id
	WHERE oxygen IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC';
EXECUTE 'CREATE TABLE mfresults.phosph_raw (idw_phosph, month, year) AS
	SELECT
		sum((1/distance_dd) * phosphate)/sum(1/distance_dd)
		AS idw_phosph, month, year
	FROM
	mfdata.wod05_osd_all Inner Join mfresults.tmp_wod05 ON mfdata.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id 
	WHERE phosphate IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC';
EXECUTE 'CREATE TABLE mfresults.sil_raw (idw_sil, month, year) AS
	SELECT
		sum((1/distance_dd) * silicate)/sum(1/distance_dd) 
		AS idw_sil, month, year
	FROM
	mfdata.wod05_osd_all Inner Join mfresults.tmp_wod05 ON mfdata.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id 
	WHERE silicate IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC';
EXECUTE 'CREATE TABLE mfresults.nitra_raw (idw_nitra, month, year) AS
	SELECT
		sum((1/distance_dd) * nitrate)/sum(1/distance_dd) 
		AS idw_nitra, month, year
	FROM
	mfdata.wod05_osd_all Inner Join mfresults.tmp_wod05 ON mfdata.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id 
	WHERE nitrate IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC';
EXECUTE 'CREATE TABLE mfresults.nitri_raw (idw_nitri, month, year) AS
	SELECT
		sum((1/distance_dd) * nitrite)/sum(1/distance_dd) 
		AS idw_nitri, month, year
	FROM
	mfdata.wod05_osd_all Inner Join mfresults.tmp_wod05 ON mfdata.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id 
	WHERE nitrite IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC';
EXECUTE 'CREATE TABLE mfresults.ph_raw (idw_ph, month, year) AS
	SELECT
		sum((1/distance_dd) * ph)/sum(1/distance_dd) 
		AS idw_ph, month, year
	FROM
	mfdata.wod05_osd_all Inner Join mfresults.tmp_wod05 ON mfdata.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id 
	WHERE ph IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC';
EXECUTE 'CREATE TABLE mfresults.chl_raw (idw_chl, month, year) AS
	SELECT
		sum((1/distance_dd) * chlorophyll)/sum(1/distance_dd) 
		AS idw_chl, month, year
	FROM
	mfdata.wod05_osd_all Inner Join mfresults.tmp_wod05 ON mfdata.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id 
	WHERE chlorophyll IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC';
EXECUTE 'CREATE TABLE mfresults.plank_raw (idw_plank, month, year) AS
	SELECT
		sum((1/distance_dd) * plankton_biomass)/sum(1/distance_dd)
		AS idw_plank, month, year
	FROM
	mfdata.wod05_osd_all Inner Join mfresults.tmp_wod05 ON mfdata.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id 
	WHERE plankton_biomass IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC';
EXECUTE 'CREATE TABLE mfresults.alk_raw (idw_alk, month, year) AS
	SELECT
		sum((1/distance_dd) * alkalinity)/sum(1/distance_dd) 
		AS idw_alk, month, year
	FROM
	mfdata.wod05_osd_all Inner Join mfresults.tmp_wod05 ON mfdata.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id 
	WHERE alkalinity IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC';
EXECUTE 'CREATE TABLE mfresults.nitnat_raw (idw_nitnat, month, year) AS
	SELECT
		sum((1/distance_dd) * nitrate_nitrite)/sum(1/distance_dd)
		AS idw_nitnat, month, year
	FROM
	mfdata.wod05_osd_all Inner Join mfresults.tmp_wod05 ON mfdata.wod05_osd_all.wod05_id = mfresults.tmp_wod05.wod05_id 
	WHERE nitrate_nitrite IS NOT NULL
	GROUP BY month, year
	ORDER BY month ASC';

PERFORM mfdata.mf_wod_averages(); -- call for last function
return myres;
END;$$;


ALTER FUNCTION mfresults.test_wod() OWNER TO rkottman;

SET search_path = pgq, pg_catalog;

--
-- Name: batch_event_sql(bigint); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION batch_event_sql(x_batch_id bigint) RETURNS text
    LANGUAGE plpgsql
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.batch_event_sql(1)
--      Creates SELECT statement that fetches events for this batch.
--
-- Parameters:
--      x_batch_id    - ID of a active batch.
--
-- Returns:
--      SQL statement.
-- ----------------------------------------------------------------------

-- ----------------------------------------------------------------------
-- Algorithm description:
--      Given 2 snapshots, sn1 and sn2 with sn1 having xmin1, xmax1
--      and sn2 having xmin2, xmax2 create expression that filters
--      right txid's from event table.
--
--      Simplest solution would be
--      > WHERE ev_txid >= xmin1 AND ev_txid <= xmax2
--      >   AND NOT txid_visible_in_snapshot(ev_txid, sn1)
--      >   AND txid_visible_in_snapshot(ev_txid, sn2)
--
--      The simple solution has a problem with long transactions (xmin1 very low).
--      All the batches that happen when the long tx is active will need
--      to scan all events in that range.  Here is 2 optimizations used:
--
--      1)  Use [xmax1..xmax2] for range scan.  That limits the range to
--      txids that actually happened between two snapshots.  For txids
--      in the range [xmin1..xmax1] look which ones were actually
--      committed between snapshots and search for them using exact
--      values using IN (..) list.
--
--      2) As most TX are short, there could be lot of them that were
--      just below xmax1, but were committed before xmax2.  So look
--      if there are ID's near xmax1 and lower the range to include
--      them, thus decresing size of IN (..) list.
-- ----------------------------------------------------------------------
declare
    rec             record;
    sql             text;
    tbl             text;
    arr             text;
    part            text;
    select_fields   text;
    retry_expr      text;
    batch           record;
begin
    select s.sub_last_tick, s.sub_next_tick, s.sub_id, s.sub_queue,
           txid_snapshot_xmax(last.tick_snapshot) as tx_start,
           txid_snapshot_xmax(cur.tick_snapshot) as tx_end,
           last.tick_snapshot as last_snapshot,
           cur.tick_snapshot as cur_snapshot
        into batch
        from pgq.subscription s, pgq.tick last, pgq.tick cur
        where s.sub_batch = x_batch_id
          and last.tick_queue = s.sub_queue
          and last.tick_id = s.sub_last_tick
          and cur.tick_queue = s.sub_queue
          and cur.tick_id = s.sub_next_tick;
    if not found then
        raise exception 'batch not found';
    end if;

    -- load older transactions
    arr := '';
    for rec in
        -- active tx-es in prev_snapshot that were committed in cur_snapshot
        select id1 from
            txid_snapshot_xip(batch.last_snapshot) id1 left join
            txid_snapshot_xip(batch.cur_snapshot) id2 on (id1 = id2)
        where id2 is null
        order by 1 desc
    loop
        -- try to avoid big IN expression, so try to include nearby
        -- tx'es into range
        if batch.tx_start - 100 <= rec.id1 then
            batch.tx_start := rec.id1;
        else
            if arr = '' then
                arr := rec.id1;
            else
                arr := arr || ',' || rec.id1;
            end if;
        end if;
    end loop;

    -- must match pgq.event_template
    select_fields := 'select ev_id, ev_time, ev_txid, ev_retry, ev_type,'
        || ' ev_data, ev_extra1, ev_extra2, ev_extra3, ev_extra4';
    retry_expr :=  ' and (ev_owner is null or ev_owner = '
        || batch.sub_id || ')';

    -- now generate query that goes over all potential tables
    sql := '';
    for rec in
        select xtbl from pgq.batch_event_tables(x_batch_id) xtbl
    loop
        tbl := rec.xtbl;
        -- this gets newer queries that definitely are not in prev_snapshot
        part := select_fields
            || ' from pgq.tick cur, pgq.tick last, ' || tbl || ' ev '
            || ' where cur.tick_id = ' || batch.sub_next_tick
            || ' and cur.tick_queue = ' || batch.sub_queue
            || ' and last.tick_id = ' || batch.sub_last_tick
            || ' and last.tick_queue = ' || batch.sub_queue
            || ' and ev.ev_txid >= ' || batch.tx_start
            || ' and ev.ev_txid <= ' || batch.tx_end
            || ' and txid_visible_in_snapshot(ev.ev_txid, cur.tick_snapshot)'
            || ' and not txid_visible_in_snapshot(ev.ev_txid, last.tick_snapshot)'
            || retry_expr;
        -- now include older tx-es, that were ongoing
        -- at the time of prev_snapshot
        if arr <> '' then
            part := part || ' union all '
                || select_fields || ' from ' || tbl || ' ev '
                || ' where ev.ev_txid in (' || arr || ')'
                || retry_expr;
        end if;
        if sql = '' then
            sql := part;
        else
            sql := sql || ' union all ' || part;
        end if;
    end loop;
    if sql = '' then
        raise exception 'could not construct sql for batch %', x_batch_id;
    end if;
    return sql || ' order by 1';
end;
$$;


ALTER FUNCTION pgq.batch_event_sql(x_batch_id bigint) OWNER TO rkottman;

--
-- Name: batch_event_tables(bigint); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION batch_event_tables(x_batch_id bigint) RETURNS SETOF text
    LANGUAGE plpgsql
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.batch_event_tables(1)
--
--     Returns set of table names where this batch events may reside.
--
-- Parameters:
--     x_batch_id    - ID of a active batch.
-- ----------------------------------------------------------------------
declare
    nr                    integer;
    tbl                   text;
    use_prev              integer;
    use_next              integer;
    batch                 record;
begin
    select
           txid_snapshot_xmin(last.tick_snapshot) as tx_min, -- absolute minimum
           txid_snapshot_xmax(cur.tick_snapshot) as tx_max, -- absolute maximum
           q.queue_data_pfx, q.queue_ntables,
           q.queue_cur_table, q.queue_switch_step1, q.queue_switch_step2
        into batch
        from pgq.tick last, pgq.tick cur, pgq.subscription s, pgq.queue q
        where cur.tick_id = s.sub_next_tick
          and cur.tick_queue = s.sub_queue
          and last.tick_id = s.sub_last_tick
          and last.tick_queue = s.sub_queue
          and s.sub_batch = x_batch_id
          and q.queue_id = s.sub_queue;
    if not found then
        raise exception 'Cannot find data for batch %', x_batch_id;
    end if;

    -- if its definitely not in one or other, look into both
    if batch.tx_max < batch.queue_switch_step1 then
        use_prev := 1;
        use_next := 0;
    elsif batch.queue_switch_step2 is not null
      and (batch.tx_min > batch.queue_switch_step2)
    then
        use_prev := 0;
        use_next := 1;
    else
        use_prev := 1;
        use_next := 1;
    end if;

    if use_prev then
        nr := batch.queue_cur_table - 1;
        if nr < 0 then
            nr := batch.queue_ntables - 1;
        end if;
        tbl := batch.queue_data_pfx || '_' || nr;
        return next tbl;
    end if;

    if use_next then
        tbl := batch.queue_data_pfx || '_' || batch.queue_cur_table;
        return next tbl;
    end if;

    return;
end;
$$;


ALTER FUNCTION pgq.batch_event_tables(x_batch_id bigint) OWNER TO rkottman;

--
-- Name: create_queue(text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION create_queue(i_queue_name text) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.create_queue(1)
--
--      Creates new queue with given name.
--
-- Returns:
--      0 - queue already exists
--      1 - queue created
-- ----------------------------------------------------------------------
declare
    tblpfx   text;
    tblname  text;
    idxpfx   text;
    idxname  text;
    sql      text;
    id       integer;
    tick_seq text;
    ev_seq text;
    n_tables integer;
begin
    if i_queue_name is null then
        raise exception 'Invalid NULL value';
    end if;

    -- check if exists
    perform 1 from pgq.queue where queue_name = i_queue_name;
    if found then
        return 0;
    end if;

    -- insert event
    id := nextval('pgq.queue_queue_id_seq');
    tblpfx := 'pgq.event_' || id;
    idxpfx := 'event_' || id;
    tick_seq := 'pgq.event_' || id || '_tick_seq';
    ev_seq := 'pgq.event_' || id || '_id_seq';
    insert into pgq.queue (queue_id, queue_name,
            queue_data_pfx, queue_event_seq, queue_tick_seq)
        values (id, i_queue_name, tblpfx, ev_seq, tick_seq);

    select queue_ntables into n_tables from pgq.queue
        where queue_id = id;

    -- create seqs
    execute 'CREATE SEQUENCE ' || tick_seq;
    execute 'CREATE SEQUENCE ' || ev_seq;

    -- create data tables
    execute 'CREATE TABLE ' || tblpfx || ' () '
            || ' INHERITS (pgq.event_template)';
    for i in 0 .. (n_tables - 1) loop
        tblname := tblpfx || '_' || i;
        idxname := idxpfx || '_' || i;
        execute 'CREATE TABLE ' || tblname || ' () '
                || ' INHERITS (' || tblpfx || ')';
        execute 'ALTER TABLE ' || tblname || ' ALTER COLUMN ev_id '
                || ' SET DEFAULT nextval(' || quote_literal(ev_seq) || ')';
        execute 'create index ' || idxname || '_txid_idx on '
                || tblname || ' (ev_txid)';
    end loop;

    perform pgq.grant_perms(i_queue_name);

    perform pgq.ticker(i_queue_name);

    return 1;
end;
$$;


ALTER FUNCTION pgq.create_queue(i_queue_name text) OWNER TO rkottman;

--
-- Name: current_event_table(text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION current_event_table(x_queue_name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.current_event_table(1)
--
--      Return active event table for particular queue.
--      Event can be added to it without going via functions,
--      e.g. by COPY.
--
-- Note:
--      The result is valid only during current transaction.
--
-- Permissions:
--      Actual insertion requires superuser access.
--
-- Parameters:
--      x_queue_name    - Queue name.
-- ----------------------------------------------------------------------
declare
    res text;
begin
    select queue_data_pfx || '_' || queue_cur_table into res
        from pgq.queue where queue_name = x_queue_name;
    if not found then
        raise exception 'Event queue not found';
    end if;
    return res;
end;
$$;


ALTER FUNCTION pgq.current_event_table(x_queue_name text) OWNER TO rkottman;

--
-- Name: drop_queue(text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION drop_queue(x_queue_name text) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.drop_queue(1)
--
--     Drop queue and all associated tables.
--     No consumers must be listening on the queue.
--
-- ----------------------------------------------------------------------
declare
    tblname  text;
    q record;
    num integer;
begin
    -- check ares
    if x_queue_name is null then
        raise exception 'Invalid NULL value';
    end if;

    -- check if exists
    select * into q from pgq.queue
        where queue_name = x_queue_name;
    if not found then
        raise exception 'No such event queue';
    end if;

    -- check if no consumers
    select count(*) into num from pgq.subscription
        where sub_queue = q.queue_id;
    if num > 0 then
        raise exception 'cannot drop queue, consumers still attached';
    end if;

    -- drop data tables
    for i in 0 .. (q.queue_ntables - 1) loop
        tblname := q.queue_data_pfx || '_' || i;
        execute 'DROP TABLE ' || tblname;
    end loop;
    execute 'DROP TABLE ' || q.queue_data_pfx;

    -- delete ticks
    delete from pgq.tick where tick_queue = q.queue_id;

    -- drop seqs
    -- FIXME: any checks needed here?
    execute 'DROP SEQUENCE ' || q.queue_tick_seq;
    execute 'DROP SEQUENCE ' || q.queue_event_seq;

    -- delete event
    delete from pgq.queue
        where queue_name = x_queue_name;

    return 1;
end;
$$;


ALTER FUNCTION pgq.drop_queue(x_queue_name text) OWNER TO rkottman;

--
-- Name: event_failed(bigint, bigint, text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION event_failed(x_batch_id bigint, x_event_id bigint, x_reason text) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.event_failed(3)
--
--      Copies the event to failed queue so it can be looked at later.
--
-- Parameters:
--      x_batch_id      - ID of active batch.
--      x_event_id      - Event id
--      x_reason        - Text to associate with event.
--
-- Returns:
--     0 if event was already in queue, 1 otherwise.
-- ----------------------------------------------------------------------
begin
    insert into pgq.failed_queue (ev_failed_reason, ev_failed_time,
        ev_id, ev_time, ev_txid, ev_owner, ev_retry, ev_type, ev_data,
        ev_extra1, ev_extra2, ev_extra3, ev_extra4)
    select x_reason, now(),
           ev_id, ev_time, NULL, sub_id, coalesce(ev_retry, 0),
           ev_type, ev_data, ev_extra1, ev_extra2, ev_extra3, ev_extra4
      from pgq.get_batch_events(x_batch_id),
           pgq.subscription
     where sub_batch = x_batch_id
       and ev_id = x_event_id;
    if not found then
        raise exception 'event not found';
    end if;
    return 1;

-- dont worry if the event is already in queue
exception
    when unique_violation then
        return 0;
end;
$$;


ALTER FUNCTION pgq.event_failed(x_batch_id bigint, x_event_id bigint, x_reason text) OWNER TO rkottman;

--
-- Name: event_retry(bigint, bigint, timestamp with time zone); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION event_retry(x_batch_id bigint, x_event_id bigint, x_retry_time timestamp with time zone) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.event_retry(3)
--
--     Put the event into retry queue, to be processed again later.
--
-- Parameters:
--      x_batch_id      - ID of active batch.
--      x_event_id      - event id
--      x_retry_time    - Time when the event should be put back into queue
--
-- Returns:
--     nothing
-- ----------------------------------------------------------------------
begin
    insert into pgq.retry_queue (ev_retry_after,
        ev_id, ev_time, ev_txid, ev_owner, ev_retry, ev_type, ev_data,
        ev_extra1, ev_extra2, ev_extra3, ev_extra4)
    select x_retry_time,
           ev_id, ev_time, NULL, sub_id, coalesce(ev_retry, 0) + 1,
           ev_type, ev_data, ev_extra1, ev_extra2, ev_extra3, ev_extra4
      from pgq.get_batch_events(x_batch_id),
           pgq.subscription
     where sub_batch = x_batch_id
       and ev_id = x_event_id;
    if not found then
        raise exception 'event not found';
    end if;
    return 1;

-- dont worry if the event is already in queue
exception
    when unique_violation then
        return 0;
end;
$$;


ALTER FUNCTION pgq.event_retry(x_batch_id bigint, x_event_id bigint, x_retry_time timestamp with time zone) OWNER TO rkottman;

--
-- Name: event_retry(bigint, bigint, integer); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION event_retry(x_batch_id bigint, x_event_id bigint, x_retry_seconds integer) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.event_retry(3)
--
--     Put the event into retry queue, to be processed later again.
--
-- Parameters:
--      x_batch_id      - ID of active batch.
--      x_event_id      - event id
--      x_retry_seconds - Time when the event should be put back into queue
--
-- Returns:
--     nothing
-- ----------------------------------------------------------------------
declare
    new_retry  timestamptz;
begin
    new_retry := current_timestamp + ((x_retry_seconds || ' seconds')::interval);
    return pgq.event_retry(x_batch_id, x_event_id, new_retry);
end;
$$;


ALTER FUNCTION pgq.event_retry(x_batch_id bigint, x_event_id bigint, x_retry_seconds integer) OWNER TO rkottman;

--
-- Name: event_retry_raw(text, text, timestamp with time zone, bigint, timestamp with time zone, integer, text, text, text, text, text, text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION event_retry_raw(x_queue text, x_consumer text, x_retry_after timestamp with time zone, x_ev_id bigint, x_ev_time timestamp with time zone, x_ev_retry integer, x_ev_type text, x_ev_data text, x_ev_extra1 text, x_ev_extra2 text, x_ev_extra3 text, x_ev_extra4 text) RETURNS bigint
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.event_retry_raw(12)
--
--      Allows full control over what goes to retry queue.
--
-- Parameters:
--      x_queue         - name of the queue
--      x_consumer      - name of the consumer
--      x_retry_after   - when the event should be processed again
--      x_ev_id         - event id
--      x_ev_time       - creation time
--      x_ev_retry      - retry count
--      x_ev_type       - user data
--      x_ev_data       - user data
--      x_ev_extra1     - user data
--      x_ev_extra2     - user data
--      x_ev_extra3     - user data
--      x_ev_extra4     - user data
--
-- Returns:
--      Event ID.
-- ----------------------------------------------------------------------
declare
    q record;
    id bigint;
begin
    select sub_id, queue_event_seq into q
      from pgq.consumer, pgq.queue, pgq.subscription
     where queue_name = x_queue
       and co_name = x_consumer
       and sub_consumer = co_id
       and sub_queue = queue_id;
    if not found then
        raise exception 'consumer not registered';
    end if;

    id := x_ev_id;
    if id is null then
        id := nextval(q.queue_event_seq);
    end if;

    insert into pgq.retry_queue (ev_retry_after,
            ev_id, ev_time, ev_owner, ev_retry,
            ev_type, ev_data, ev_extra1, ev_extra2, ev_extra3, ev_extra4)
    values (x_retry_after, x_ev_id, x_ev_time, q.sub_id, x_ev_retry,
            x_ev_type, x_ev_data, x_ev_extra1, x_ev_extra2,
            x_ev_extra3, x_ev_extra4);

    return id;
end;
$$;


ALTER FUNCTION pgq.event_retry_raw(x_queue text, x_consumer text, x_retry_after timestamp with time zone, x_ev_id bigint, x_ev_time timestamp with time zone, x_ev_retry integer, x_ev_type text, x_ev_data text, x_ev_extra1 text, x_ev_extra2 text, x_ev_extra3 text, x_ev_extra4 text) OWNER TO rkottman;

--
-- Name: failed_event_count(text, text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION failed_event_count(x_queue_name text, x_consumer_name text) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
-- ----------------------------------------------------------------------
-- Function: pgq.failed_event_count(2)
--
--      Get size of failed event queue.
--
-- Parameters:
--      x_queue_name        - Queue name
--      x_consumer_name     - Consumer name
--
-- Returns:
--      Number of failed events in failed event queue.
-- ----------------------------------------------------------------------
declare 
    ret integer;
begin 
    select count(1) into ret
      from pgq.failed_queue, pgq.consumer, pgq.queue, pgq.subscription
     where queue_name = x_queue_name
       and co_name = x_consumer_name
       and sub_queue = queue_id
       and sub_consumer = co_id
       and ev_owner = sub_id;
    return ret;
end; 
$$;


ALTER FUNCTION pgq.failed_event_count(x_queue_name text, x_consumer_name text) OWNER TO rkottman;

--
-- Name: failed_event_delete(text, text, bigint); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION failed_event_delete(x_queue_name text, x_consumer_name text, x_event_id bigint) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
-- ----------------------------------------------------------------------
-- Function: pgq.failed_event_delete(3)
--
--      Delete specific event from failed event queue.
--
-- Parameters:
--      x_queue_name        - Queue name
--      x_consumer_name     - Consumer name
--      x_event_id          - Event ID
--
-- Returns:
--      nothing
-- ----------------------------------------------------------------------
declare 
    x_sub_id integer;
begin 
    select sub_id into x_sub_id
      from pgq.subscription, pgq.consumer, pgq.queue
     where queue_name = x_queue_name
       and co_name = x_consumer_name
       and sub_consumer = co_id
       and sub_queue = queue_id;
    if not found then
        raise exception 'no such queue/consumer';
    end if;

    delete from pgq.failed_queue
     where ev_owner = x_sub_id
       and ev_id = x_event_id;
    if not found then
        raise exception 'event not found';
    end if;

    return 1;
end; 
$$;


ALTER FUNCTION pgq.failed_event_delete(x_queue_name text, x_consumer_name text, x_event_id bigint) OWNER TO rkottman;

--
-- Name: failed_queue; Type: TABLE; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE TABLE failed_queue (
    ev_failed_reason text,
    ev_failed_time timestamp with time zone NOT NULL,
    ev_id bigint NOT NULL,
    ev_time timestamp with time zone NOT NULL,
    ev_txid bigint,
    ev_owner integer NOT NULL,
    ev_retry integer,
    ev_type text,
    ev_data text,
    ev_extra1 text,
    ev_extra2 text,
    ev_extra3 text,
    ev_extra4 text
);


ALTER TABLE pgq.failed_queue OWNER TO pgqueue;

--
-- Name: failed_event_list(text, text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION failed_event_list(x_queue_name text, x_consumer_name text) RETURNS SETOF failed_queue
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
-- ----------------------------------------------------------------------
-- Function: pgq.failed_event_list(2)
--
--      Get list of all failed events for one consumer.
--
-- Parameters:
--      x_queue_name        - Queue name
--      x_consumer_name     - Consumer name
--
-- Returns:
--      List of failed events.
-- ----------------------------------------------------------------------
declare 
    rec pgq.failed_queue%rowtype; 
begin 
    for rec in
        select fq.*
          from pgq.failed_queue fq, pgq.consumer,
               pgq.queue, pgq.subscription
         where queue_name = x_queue_name
           and co_name = x_consumer_name
           and sub_consumer = co_id
           and sub_queue = queue_id
           and ev_owner = sub_id
        order by ev_id
    loop
        return next rec; 
    end loop; 
    return;
end; 
$$;


ALTER FUNCTION pgq.failed_event_list(x_queue_name text, x_consumer_name text) OWNER TO rkottman;

--
-- Name: failed_event_list(text, text, integer, integer); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION failed_event_list(x_queue_name text, x_consumer_name text, x_count integer, x_offset integer) RETURNS SETOF failed_queue
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
-- ----------------------------------------------------------------------
-- Function: pgq.failed_event_list(4)
--
--      Get list of failed events, from offset and specific count.
--
-- Parameters:
--      x_queue_name        - Queue name
--      x_consumer_name     - Consumer name
--      x_count             - Max amount of events to fetch
--      x_offset            - From this offset
--
-- Returns:
--      List of failed events.
-- ----------------------------------------------------------------------
declare 
    rec pgq.failed_queue%rowtype; 
begin 
    for rec in
        select fq.*
          from pgq.failed_queue fq, pgq.consumer,
               pgq.queue, pgq.subscription
         where queue_name = x_queue_name
           and co_name = x_consumer_name
           and sub_consumer = co_id
           and sub_queue = queue_id
           and ev_owner = sub_id
        order by ev_id
        limit x_count
        offset x_offset
    loop
        return next rec; 
    end loop; 
    return;
end; 
$$;


ALTER FUNCTION pgq.failed_event_list(x_queue_name text, x_consumer_name text, x_count integer, x_offset integer) OWNER TO rkottman;

--
-- Name: failed_event_retry(text, text, bigint); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION failed_event_retry(x_queue_name text, x_consumer_name text, x_event_id bigint) RETURNS bigint
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$ 
-- ----------------------------------------------------------------------
-- Function: pgq.failed_event_retry(3)
--
--      Insert specific event from failed queue to main queue.
--
-- Parameters:
--      x_queue_name        - Queue name
--      x_consumer_name     - Consumer name
--      x_event_id          - Event ID
--
-- Returns:
--      nothing
-- ----------------------------------------------------------------------
declare 
    ret         bigint;
    x_sub_id    integer;
begin 
    select sub_id into x_sub_id
      from pgq.subscription, pgq.consumer, pgq.queue
     where queue_name = x_queue_name
       and co_name = x_consumer_name
       and sub_consumer = co_id
       and sub_queue = queue_id;
    if not found then
        raise exception 'no such queue/consumer';
    end if;

    select pgq.insert_event_raw(x_queue_name, ev_id, ev_time,
            ev_owner, ev_retry, ev_type, ev_data,
            ev_extra1, ev_extra2, ev_extra3, ev_extra4)
      into ret
      from pgq.failed_queue, pgq.consumer, pgq.queue
     where ev_owner = x_sub_id
       and ev_id = x_event_id;
    if not found then
        raise exception 'event not found';
    end if;

    perform pgq.failed_event_delete(x_queue_name, x_consumer_name, x_event_id);

    return ret;
end; 
$$;


ALTER FUNCTION pgq.failed_event_retry(x_queue_name text, x_consumer_name text, x_event_id bigint) OWNER TO rkottman;

--
-- Name: finish_batch(bigint); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION finish_batch(x_batch_id bigint) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.finish_batch(1)
--
--      Closes a batch.  No more operations can be done with events
--      of this batch.
--
-- Parameters:
--      x_batch_id      - id of batch.
--
-- Returns:
--      If batch 1 if batch was found, 0 otherwise.
-- ----------------------------------------------------------------------
begin
    update pgq.subscription
        set sub_active = now(),
            sub_last_tick = sub_next_tick,
            sub_next_tick = null,
            sub_batch = null
        where sub_batch = x_batch_id;
    if not found then
        raise warning 'finish_batch: batch % not found', x_batch_id;
        return 0;
    end if;

    return 1;
end;
$$;


ALTER FUNCTION pgq.finish_batch(x_batch_id bigint) OWNER TO rkottman;

--
-- Name: force_tick(text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION force_tick(i_queue_name text) RETURNS bigint
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.force_tick(2)
--
--      Simulate lots of events happening to force ticker to tick.
--
--      Should be called in loop, with some delay until last tick
--      changes or too much time is passed.
--
--      Such function is needed because paraller calls of pgq.ticker() are
--      dangerous, and cannot be protected with locks as snapshot
--      is taken before locking.
--
-- Parameters:
--      i_queue_name     - Name of the queue
--
-- Returns:
--      Currently last tick id.
-- ----------------------------------------------------------------------
declare
    q  record;
    t  record;
begin
    -- bump seq and get queue id
    select queue_id,
           setval(queue_event_seq, nextval(queue_event_seq)
                                   + queue_ticker_max_count * 2) as tmp
      into q from pgq.queue
     where queue_name = i_queue_name
       and not queue_external_ticker;
    if not found then
        raise exception 'queue not found or ticks not allowed';
    end if;

    -- return last tick id
    select tick_id into t from pgq.tick
     where tick_queue = q.queue_id
     order by tick_queue desc, tick_id desc limit 1;

    return t.tick_id;
end;
$$;


ALTER FUNCTION pgq.force_tick(i_queue_name text) OWNER TO rkottman;

--
-- Name: get_batch_events(bigint); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION get_batch_events(x_batch_id bigint) RETURNS SETOF ret_batch_event
    LANGUAGE plpgsql
    AS $$ 
-- ----------------------------------------------------------------------
-- Function: pgq.get_batch_events(1)
--
--      Get all events in batch.
--
-- Parameters:
--      x_batch_id      - ID of active batch.
--
-- Returns:
--      List of events.
-- ----------------------------------------------------------------------
declare 
    rec pgq.ret_batch_event%rowtype; 
    sql text; 
begin 
    sql := pgq.batch_event_sql(x_batch_id); 
    for rec in execute sql loop
        return next rec; 
    end loop; 
    return;
end; 
$$;


ALTER FUNCTION pgq.get_batch_events(x_batch_id bigint) OWNER TO rkottman;

--
-- Name: get_batch_info(bigint); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION get_batch_info(x_batch_id bigint) RETURNS ret_batch_info
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.get_batch_info(1)
--
--      Returns detailed info about a batch.
--
-- Parameters:
--      x_batch_id      - id of a active batch.
--
-- Returns:
--      Info
-- ----------------------------------------------------------------------
declare
    ret  pgq.ret_batch_info%rowtype;
begin
    select queue_name, co_name,
           prev.tick_time as batch_start,
           cur.tick_time as batch_end,
           sub_last_tick, sub_next_tick,
           current_timestamp - cur.tick_time as lag
        into ret
        from pgq.subscription, pgq.tick cur, pgq.tick prev,
             pgq.queue, pgq.consumer
        where sub_batch = x_batch_id
          and prev.tick_id = sub_last_tick
          and prev.tick_queue = sub_queue
          and cur.tick_id = sub_next_tick
          and cur.tick_queue = sub_queue
          and queue_id = sub_queue
          and co_id = sub_consumer;
    return ret;
end;
$$;


ALTER FUNCTION pgq.get_batch_info(x_batch_id bigint) OWNER TO rkottman;

--
-- Name: get_consumer_info(); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION get_consumer_info() RETURNS SETOF ret_consumer_info
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.get_consumer_info(0)
--
--      Returns info about all consumers on all queues.
--
-- Returns:
--      See pgq.get_consumer_info(2)
-- ----------------------------------------------------------------------
declare
    ret  pgq.ret_consumer_info%rowtype;
    i    record;
begin
    for i in select queue_name from pgq.queue order by 1
    loop
        for ret in
            select * from pgq.get_consumer_info(i.queue_name)
        loop
            return next ret;
        end loop;
    end loop;
    return;
end;
$$;


ALTER FUNCTION pgq.get_consumer_info() OWNER TO rkottman;

--
-- Name: get_consumer_info(text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION get_consumer_info(x_queue_name text) RETURNS SETOF ret_consumer_info
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.get_consumer_info(1)
--
--      Returns info about consumers on one particular queue.
--
-- Parameters:
--      x_queue_name    - Queue name
--
-- Returns:
--      See pgq.get_consumer_info(2)
-- ----------------------------------------------------------------------
declare
    ret  pgq.ret_consumer_info%rowtype;
    tmp record;
begin
    for tmp in
        select queue_name, co_name
          from pgq.queue, pgq.consumer, pgq.subscription
         where queue_id = sub_queue
           and co_id = sub_consumer
           and queue_name = x_queue_name
         order by 1, 2
    loop
        for ret in
            select * from pgq.get_consumer_info(tmp.queue_name, tmp.co_name)
        loop
            return next ret;
        end loop;
    end loop;
    return;
end;
$$;


ALTER FUNCTION pgq.get_consumer_info(x_queue_name text) OWNER TO rkottman;

--
-- Name: get_consumer_info(text, text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION get_consumer_info(x_queue_name text, x_consumer_name text) RETURNS SETOF ret_consumer_info
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.get_consumer_info(2)
--
--      Get info about particular consumer on particular queue.
--
-- Parameters:
--      x_queue_name        - name of a queue.
--      x_consumer_name     - name of a consumer
--
-- Returns:
--      queue_name          - Queue name
--      consumer_name       - Consumer name
--      lag                 - How old are events the consumer is processing
--      last_seen           - When the consumer seen by pgq
--      last_tick           - Tick ID of last processed tick
--      current_batch       - Current batch ID, if one is active or NULL
--      next_tick           - If batch is active, then its final tick.
-- ----------------------------------------------------------------------
declare
    ret  pgq.ret_consumer_info%rowtype;
begin
    for ret in 
        select queue_name, co_name,
               current_timestamp - tick_time as lag,
               current_timestamp - sub_active as last_seen,
               sub_last_tick as last_tick,
               sub_batch as current_batch,
               sub_next_tick as next_tick
          from pgq.subscription, pgq.tick, pgq.queue, pgq.consumer
         where tick_id = sub_last_tick
           and queue_id = sub_queue
           and tick_queue = sub_queue
           and co_id = sub_consumer
           and queue_name = x_queue_name
           and co_name = x_consumer_name
         order by 1,2
    loop
        return next ret;
    end loop;
    return;
end;
$$;


ALTER FUNCTION pgq.get_consumer_info(x_queue_name text, x_consumer_name text) OWNER TO rkottman;

--
-- Name: get_queue_info(); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION get_queue_info() RETURNS SETOF ret_queue_info
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.get_queue_info(0)
--
--      Get info about all queues.
--
-- Returns:
--      List of pgq.ret_queue_info records.
-- ----------------------------------------------------------------------
declare
    q     record;
    ret   pgq.ret_queue_info%rowtype;
begin
    for q in
        select queue_name from pgq.queue order by 1
    loop
        select * into ret from pgq.get_queue_info(q.queue_name);
        return next ret;
    end loop;
    return;
end;
$$;


ALTER FUNCTION pgq.get_queue_info() OWNER TO rkottman;

--
-- Name: get_queue_info(text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION get_queue_info(qname text) RETURNS ret_queue_info
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.get_queue_info(1)
--
--      Get info about particular queue.
--
-- Returns:
--      One pgq.ret_queue_info record.
-- ----------------------------------------------------------------------
declare
    ret   pgq.ret_queue_info%rowtype;
begin
    select queue_name, queue_ntables, queue_cur_table,
           queue_rotation_period, queue_switch_time,
           queue_external_ticker,
           queue_ticker_max_count, queue_ticker_max_lag,
           queue_ticker_idle_period,
           (select current_timestamp - tick_time
              from pgq.tick where tick_queue = queue_id
             order by tick_queue desc, tick_id desc limit 1
            ) as ticker_lag
      into ret from pgq.queue where queue_name = qname;
    return ret;
end;
$$;


ALTER FUNCTION pgq.get_queue_info(qname text) OWNER TO rkottman;

--
-- Name: grant_perms(text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION grant_perms(x_queue_name text) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.grant_perms(1)
--
--      Make event tables readable by public.
--
-- Parameters:
--      x_queue_name        - Name of the queue.
--
-- Returns:
--      nothing
-- ----------------------------------------------------------------------
declare
    q           record;
    i           integer;
    tbl_perms   text;
    seq_perms   text;
begin
    select * from pgq.queue into q
        where queue_name = x_queue_name;
    if not found then
        raise exception 'Queue not found';
    end if;

    if true then
        -- safe, all access must go via functions
        seq_perms := 'select';
        tbl_perms := 'select';
    else
        -- allow ordinery users to directly insert
        -- to event tables.  dangerous.
        seq_perms := 'select, update';
        tbl_perms := 'select, insert';
    end if;

    -- tick seq, normal users don't need to modify it
    execute 'grant ' || seq_perms
        || ' on ' || q.queue_tick_seq || ' to public';

    -- event seq
    execute 'grant ' || seq_perms
        || ' on ' || q.queue_event_seq || ' to public';
    
    -- parent table for events
    execute 'grant select on ' || q.queue_data_pfx || ' to public';

    -- real event tables
    for i in 0 .. q.queue_ntables - 1 loop
        execute 'grant ' || tbl_perms
            || ' on ' || q.queue_data_pfx || '_' || i
            || ' to public';
    end loop;

    return 1;
end;
$$;


ALTER FUNCTION pgq.grant_perms(x_queue_name text) OWNER TO rkottman;

--
-- Name: insert_event(text, text, text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION insert_event(queue_name text, ev_type text, ev_data text) RETURNS bigint
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.insert_event(3)
--
--      Insert a event into queue.
--
-- Parameters:
--      queue_name      - Name of the queue
--      ev_type         - User-specified type for the event
--      ev_data         - User data for the event
--
-- Returns:
--      Event ID
-- ----------------------------------------------------------------------
begin
    return pgq.insert_event(queue_name, ev_type, ev_data, null, null, null, null);
end;
$$;


ALTER FUNCTION pgq.insert_event(queue_name text, ev_type text, ev_data text) OWNER TO rkottman;

--
-- Name: insert_event(text, text, text, text, text, text, text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION insert_event(queue_name text, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) RETURNS bigint
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.insert_event(7)
--
--      Insert a event into queue with all the extra fields.
--
-- Parameters:
--      queue_name      - Name of the queue
--      ev_type         - User-specified type for the event
--      ev_data         - User data for the event
--      ev_extra1       - Extra data field for the event
--      ev_extra2       - Extra data field for the event
--      ev_extra3       - Extra data field for the event
--      ev_extra4       - Extra data field for the event
--
-- Returns:
--      Event ID
-- ----------------------------------------------------------------------
begin
    return pgq.insert_event_raw(queue_name, null, now(), null, null,
            ev_type, ev_data, ev_extra1, ev_extra2, ev_extra3, ev_extra4);
end;
$$;


ALTER FUNCTION pgq.insert_event(queue_name text, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) OWNER TO rkottman;

--
-- Name: insert_event_raw(text, bigint, timestamp with time zone, integer, integer, text, text, text, text, text, text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION insert_event_raw(queue_name text, ev_id bigint, ev_time timestamp with time zone, ev_owner integer, ev_retry integer, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) RETURNS bigint
    LANGUAGE c
    AS '$libdir/pgq_lowlevel', 'pgq_insert_event_raw';


ALTER FUNCTION pgq.insert_event_raw(queue_name text, ev_id bigint, ev_time timestamp with time zone, ev_owner integer, ev_retry integer, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) OWNER TO rkottman;

--
-- Name: logtriga(); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION logtriga() RETURNS trigger
    LANGUAGE c
    AS '$libdir/pgq_triggers', 'pgq_logtriga';


ALTER FUNCTION pgq.logtriga() OWNER TO rkottman;

--
-- Name: logutriga(); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION logutriga() RETURNS trigger
    LANGUAGE c
    AS '$libdir/pgq_triggers', 'pgq_logutriga';


ALTER FUNCTION pgq.logutriga() OWNER TO rkottman;

--
-- Name: maint_retry_events(); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION maint_retry_events() RETURNS integer
    LANGUAGE plpgsql
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.maint_retry_events(0)
--
--      Moves retry events back to main queue.
--
--      It moves small amount at a time.  It should be called
--      until it returns 0
--
-- Returns:
--      Number of events processed.
-- ----------------------------------------------------------------------
declare
    cnt    integer;
    rec    record;
begin
    cnt := 0;
    for rec in
        select queue_name,
               ev_id, ev_time, ev_owner, ev_retry, ev_type, ev_data,
               ev_extra1, ev_extra2, ev_extra3, ev_extra4
          from pgq.retry_queue, pgq.queue, pgq.subscription
         where ev_retry_after <= current_timestamp
           and sub_id = ev_owner
           and queue_id = sub_queue
         order by ev_retry_after
         limit 10
    loop
        cnt := cnt + 1;
        perform pgq.insert_event_raw(rec.queue_name,
                    rec.ev_id, rec.ev_time, rec.ev_owner, rec.ev_retry,
                    rec.ev_type, rec.ev_data, rec.ev_extra1, rec.ev_extra2,
                    rec.ev_extra3, rec.ev_extra4);
        delete from pgq.retry_queue
         where ev_owner = rec.ev_owner
           and ev_id = rec.ev_id;
    end loop;
    return cnt;
end;
$$;


ALTER FUNCTION pgq.maint_retry_events() OWNER TO rkottman;

--
-- Name: maint_rotate_tables_step1(text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION maint_rotate_tables_step1(i_queue_name text) RETURNS integer
    LANGUAGE plpgsql
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.maint_rotate_tables_step1(1)
--
--      Rotate tables for one queue.
--
-- Parameters:
--      i_queue_name        - Name of the queue
--
-- Returns:
--      1 if rotation happened, otherwise 0.
-- ----------------------------------------------------------------------
declare
    badcnt          integer;
    cf              record;
    nr              integer;
    tbl             text;
    lowest_tick_id  int8;
    lowest_xmin     int8;
begin
    -- check if needed and load record
    select * from pgq.queue into cf
        where queue_name = i_queue_name
          and queue_rotation_period is not null
          and queue_switch_step2 is not null
          and queue_switch_time + queue_rotation_period < current_timestamp
        for update;
    if not found then
        return 0;
    end if;

    -- find lowest tick for that queue
    select min(sub_last_tick) into lowest_tick_id
      from pgq.subscription
     where sub_queue = cf.queue_id;

    -- if some consumer exists
    if lowest_tick_id is not null then
        -- is the slowest one still on previous table?
        select txid_snapshot_xmin(tick_snapshot) into lowest_xmin
          from pgq.tick
         where tick_queue = cf.queue_id
           and tick_id = lowest_tick_id;
        if lowest_xmin <= cf.queue_switch_step2 then
            return 0; -- skip rotation then
        end if;
    end if;

    -- nobody on previous table, we can rotate
    
    -- calc next table number and name
    nr := cf.queue_cur_table + 1;
    if nr = cf.queue_ntables then
        nr := 0;
    end if;
    tbl := cf.queue_data_pfx || '_' || nr;

    -- there may be long lock on the table from pg_dump,
    -- detect it and skip rotate then
    begin
        execute 'lock table ' || tbl || ' nowait';
        execute 'truncate ' || tbl;
    exception
        when lock_not_available then
            -- cannot truncate, skipping rotate
            return 0;
    end;

    -- remember the moment
    update pgq.queue
        set queue_cur_table = nr,
            queue_switch_time = current_timestamp,
            queue_switch_step1 = txid_current(),
            queue_switch_step2 = NULL
        where queue_id = cf.queue_id;

    -- Clean ticks by using step2 txid from previous rotation.
    -- That should keep all ticks for all batches that are completely
    -- in old table.  This keeps them for longer than needed, but:
    -- 1. we want the pgq.tick table to be big, to avoid Postgres
    --    accitentally switching to seqscans on that.
    -- 2. that way we guarantee to consumers that they an be moved
    --    back on the queue at least for one rotation_period.
    --    (may help in disaster recovery)
    delete from pgq.tick
        where tick_queue = cf.queue_id
          and txid_snapshot_xmin(tick_snapshot) < cf.queue_switch_step2;

    return 1;
end;
$$;


ALTER FUNCTION pgq.maint_rotate_tables_step1(i_queue_name text) OWNER TO rkottman;

--
-- Name: maint_rotate_tables_step2(); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION maint_rotate_tables_step2() RETURNS integer
    LANGUAGE plpgsql
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.maint_rotate_tables_step2(0)
--
--      Stores the txid when the rotation was visible.  It should be
--      called in separate transaction than pgq.maint_rotate_tables_step1()
-- ----------------------------------------------------------------------
begin
    update pgq.queue
       set queue_switch_step2 = txid_current()
     where queue_switch_step2 is null;
    return 1;
end;
$$;


ALTER FUNCTION pgq.maint_rotate_tables_step2() OWNER TO rkottman;

--
-- Name: maint_tables_to_vacuum(); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION maint_tables_to_vacuum() RETURNS SETOF text
    LANGUAGE plpgsql
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.maint_tables_to_vacuum(0)
--
--      Returns list of tablenames that need frequent vacuuming.
--
--      The goal is to avoid hardcoding them into maintenance process.
--
-- Returns:
--      List of table names.
-- ----------------------------------------------------------------------
declare
    row record;
begin
    return next 'pgq.subscription';
    return next 'pgq.consumer';
    return next 'pgq.queue';
    return next 'pgq.tick';
    return next 'pgq.retry_queue';

    -- include also txid, pgq_ext and londiste tables if they exist
    for row in
        select n.nspname as scm, t.relname as tbl
          from pg_class t, pg_namespace n
         where n.oid = t.relnamespace
           and n.nspname = 'txid' and t.relname = 'epoch'
        union all
        select n.nspname as scm, t.relname as tbl
          from pg_class t, pg_namespace n
         where n.oid = t.relnamespace
           and n.nspname = 'londiste' and t.relname = 'completed'
        union all
        select n.nspname as scm, t.relname as tbl
          from pg_class t, pg_namespace n
         where n.oid = t.relnamespace
           and n.nspname = 'pgq_ext'
           and t.relname in ('completed_tick', 'completed_batch', 'completed_event', 'partial_batch')
    loop
        return next row.scm || '.' || row.tbl;
    end loop;

    return;
end;
$$;


ALTER FUNCTION pgq.maint_tables_to_vacuum() OWNER TO rkottman;

--
-- Name: next_batch(text, text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION next_batch(x_queue_name text, x_consumer_name text) RETURNS bigint
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.next_batch(2)
--
--      Makes next block of events active.
--
--      If it returns NULL, there is no events available in queue.
--      Consumer should sleep a bith then.
--
-- Parameters:
--      x_queue_name        - Name of the queue
--      x_consumer_name     - Name of the consumer
--
-- Returns:
--      Batch ID or NULL if there are no more events available.
-- ----------------------------------------------------------------------
declare
    next_tick       bigint;
    batch_id        bigint;
    errmsg          text;
    sub             record;
begin
    select sub_queue, sub_consumer, sub_id, sub_last_tick, sub_batch into sub
        from pgq.queue q, pgq.consumer c, pgq.subscription s
        where q.queue_name = x_queue_name
          and c.co_name = x_consumer_name
          and s.sub_queue = q.queue_id
          and s.sub_consumer = c.co_id;
    if not found then
        errmsg := 'Not subscriber to queue: '
            || coalesce(x_queue_name, 'NULL')
            || '/'
            || coalesce(x_consumer_name, 'NULL');
        raise exception '%', errmsg;
    end if;

    -- has already active batch
    if sub.sub_batch is not null then
        return sub.sub_batch;
    end if;

    -- find next tick
    select tick_id into next_tick
        from pgq.tick
        where tick_id > sub.sub_last_tick
          and tick_queue = sub.sub_queue
        order by tick_queue asc, tick_id asc
        limit 1;
    if not found then
        -- nothing to do
        return null;
    end if;

    -- get next batch
    batch_id := nextval('pgq.batch_id_seq');
    update pgq.subscription
        set sub_batch = batch_id,
            sub_next_tick = next_tick,
            sub_active = now()
        where sub_queue = sub.sub_queue
          and sub_consumer = sub.sub_consumer;
    return batch_id;
end;
$$;


ALTER FUNCTION pgq.next_batch(x_queue_name text, x_consumer_name text) OWNER TO rkottman;

--
-- Name: register_consumer(text, text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION register_consumer(x_queue_name text, x_consumer_id text) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.register_consumer(2)
--
--      Subscribe consumer on a queue.
--
--      From this moment forward, consumer will see all events in the queue.
--
-- Parameters:
--      x_queue_name        - Name of queue
--      x_consumer_name     - Name of consumer
--
-- Returns:
--      0  - if already registered
--      1  - if new registration
-- ----------------------------------------------------------------------
begin
    return pgq.register_consumer(x_queue_name, x_consumer_id, NULL);
end;
$$;


ALTER FUNCTION pgq.register_consumer(x_queue_name text, x_consumer_id text) OWNER TO rkottman;

--
-- Name: register_consumer(text, text, bigint); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION register_consumer(x_queue_name text, x_consumer_name text, x_tick_pos bigint) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.register_consumer(3)
--
--      Extended registration, allows to specify tick_id.
--
-- Note:
--      For usage in special situations.
--
-- Parameters:
--      x_queue_name        - Name of a queue
--      x_consumer_name     - Name of consumer
--      x_tick_pos          - Tick ID
--
-- Returns:
--      0/1 whether consumer has already registered.
-- ----------------------------------------------------------------------
declare
    tmp         text;
    last_tick   bigint;
    x_queue_id          integer;
    x_consumer_id integer;
    queue integer;
    sub record;
begin
    select queue_id into x_queue_id from pgq.queue
        where queue_name = x_queue_name;
    if not found then
        raise exception 'Event queue not created yet';
    end if;

    -- get consumer and create if new
    select co_id into x_consumer_id from pgq.consumer
        where co_name = x_consumer_name;
    if not found then
        insert into pgq.consumer (co_name) values (x_consumer_name);
        x_consumer_id := currval('pgq.consumer_co_id_seq');
    end if;

    -- if particular tick was requested, check if it exists
    if x_tick_pos is not null then
        perform 1 from pgq.tick
            where tick_queue = x_queue_id
              and tick_id = x_tick_pos;
        if not found then
            raise exception 'cannot reposition, tick not found: %', x_tick_pos;
        end if;
    end if;

    -- check if already registered
    select sub_last_tick, sub_batch into sub
        from pgq.subscription
        where sub_consumer = x_consumer_id
          and sub_queue  = x_queue_id;
    if found then
        if x_tick_pos is not null then
            if sub.sub_batch is not null then
                raise exception 'reposition while active not allowed';
            end if;
            -- update tick pos if requested
            update pgq.subscription
                set sub_last_tick = x_tick_pos
                where sub_consumer = x_consumer_id
                  and sub_queue = x_queue_id;
        end if;
        -- already registered
        return 0;
    end if;

    --  new registration
    if x_tick_pos is null then
        -- start from current tick
        select tick_id into last_tick from pgq.tick
            where tick_queue = x_queue_id
            order by tick_queue desc, tick_id desc
            limit 1;
        if not found then
            raise exception 'No ticks for this queue.  Please run ticker on database.';
        end if;
    else
        last_tick := x_tick_pos;
    end if;

    -- register
    insert into pgq.subscription (sub_queue, sub_consumer, sub_last_tick)
        values (x_queue_id, x_consumer_id, last_tick);
    return 1;
end;
$$;


ALTER FUNCTION pgq.register_consumer(x_queue_name text, x_consumer_name text, x_tick_pos bigint) OWNER TO rkottman;

--
-- Name: sqltriga(); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION sqltriga() RETURNS trigger
    LANGUAGE c
    AS '$libdir/pgq_triggers', 'pgq_sqltriga';


ALTER FUNCTION pgq.sqltriga() OWNER TO rkottman;

--
-- Name: ticker(); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION ticker() RETURNS bigint
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.ticker(0)
--
--     Creates ticks for all queues which dont have external ticker.
--
-- Returns:
--     Number of queues that were processed.
-- ----------------------------------------------------------------------
declare
    res bigint;
begin
    select count(pgq.ticker(queue_name)) into res 
        from pgq.queue where not queue_external_ticker;
    return res;
end;
$$;


ALTER FUNCTION pgq.ticker() OWNER TO rkottman;

--
-- Name: ticker(text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION ticker(i_queue_name text) RETURNS bigint
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.ticker(1)
--
--     Insert a tick with a tick_id from sequence.
--
--     For pgqadm usage.
--
-- Parameters:
--     i_queue_name     - Name of the queue
--
-- Returns:
--     Tick id.
-- ----------------------------------------------------------------------
declare
    res bigint;
    ext boolean;
    seq text;
    q record;
begin
    select queue_id, queue_tick_seq, queue_external_ticker into q
        from pgq.queue where queue_name = i_queue_name;
    if not found then
        raise exception 'no such queue';
    end if;

    if q.queue_external_ticker then
        raise exception 'This queue has external tick source.';
    end if;

    insert into pgq.tick (tick_queue, tick_id)
        values (q.queue_id, nextval(q.queue_tick_seq));

    res = currval(q.queue_tick_seq);
    return res;
end;
$$;


ALTER FUNCTION pgq.ticker(i_queue_name text) OWNER TO rkottman;

--
-- Name: ticker(text, bigint); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION ticker(i_queue_name text, i_tick_id bigint) RETURNS bigint
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.ticker(2)
--
--     Insert a tick with a particular tick_id.
--
--     For external tickers.
--
-- Parameters:
--     i_queue_name     - Name of the queue
--     i_tick_id        - Id of new tick.
--
-- Returns:
--     Tick id.
-- ----------------------------------------------------------------------
begin
    insert into pgq.tick (tick_queue, tick_id)
    select queue_id, i_tick_id
        from pgq.queue
        where queue_name = i_queue_name
          and queue_external_ticker;
    if not found then
        raise exception 'queue not found';
    end if;
    return i_tick_id;
end;
$$;


ALTER FUNCTION pgq.ticker(i_queue_name text, i_tick_id bigint) OWNER TO rkottman;

--
-- Name: unregister_consumer(text, text); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION unregister_consumer(x_queue_name text, x_consumer_name text) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.unregister_consumer(2)
--
--      Unsubscriber consumer from the queue.  Also consumer's failed
--      and retry events are deleted.
--
-- Parameters:
--      x_queue_name        - Name of the queue
--      x_consumer_name     - Name of the consumer
--
-- Returns:
--      nothing
-- ----------------------------------------------------------------------
declare
    x_sub_id integer;
begin
    select sub_id into x_sub_id
        from pgq.subscription, pgq.consumer, pgq.queue
        where sub_queue = queue_id
          and sub_consumer = co_id
          and queue_name = x_queue_name
          and co_name = x_consumer_name;
    if not found then
        raise exception 'consumer not registered on queue';
    end if;

    delete from pgq.retry_queue
        where ev_owner = x_sub_id;

    delete from pgq.failed_queue
        where ev_owner = x_sub_id;

    delete from pgq.subscription
        where sub_id = x_sub_id;

    return 1;
end;
$$;


ALTER FUNCTION pgq.unregister_consumer(x_queue_name text, x_consumer_name text) OWNER TO rkottman;

--
-- Name: version(); Type: FUNCTION; Schema: pgq; Owner: rkottman
--

CREATE FUNCTION version() RETURNS text
    LANGUAGE plpgsql
    AS $$
-- ----------------------------------------------------------------------
-- Function: pgq.version(0)
--
--      Returns verison string for pgq.  ATM its SkyTools version
--      that is only bumped when PGQ database code changes.
-- ----------------------------------------------------------------------
begin
    return '2.1.8';
end;
$$;


ALTER FUNCTION pgq.version() OWNER TO rkottman;

SET search_path = pgq_ext, pg_catalog;

--
-- Name: get_last_tick(text); Type: FUNCTION; Schema: pgq_ext; Owner: rkottman
--

CREATE FUNCTION get_last_tick(a_consumer text) RETURNS bigint
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
    res   int8;
begin
    select last_tick_id into res
      from pgq_ext.completed_tick
     where consumer_id = a_consumer;
    return res;
end;
$$;


ALTER FUNCTION pgq_ext.get_last_tick(a_consumer text) OWNER TO rkottman;

--
-- Name: is_batch_done(text, bigint); Type: FUNCTION; Schema: pgq_ext; Owner: rkottman
--

CREATE FUNCTION is_batch_done(a_consumer text, a_batch_id bigint) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
    res   boolean;
begin
    select last_batch_id = a_batch_id
      into res from pgq_ext.completed_batch
     where consumer_id = a_consumer;
    if not found then
        return false;
    end if;
    return res;
end;
$$;


ALTER FUNCTION pgq_ext.is_batch_done(a_consumer text, a_batch_id bigint) OWNER TO rkottman;

--
-- Name: is_event_done(text, bigint, bigint); Type: FUNCTION; Schema: pgq_ext; Owner: rkottman
--

CREATE FUNCTION is_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
    res   bigint;
begin
    perform 1 from pgq_ext.completed_event
     where consumer_id = a_consumer
       and batch_id = a_batch_id
       and event_id = a_event_id;
    return found;
end;
$$;


ALTER FUNCTION pgq_ext.is_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) OWNER TO rkottman;

--
-- Name: set_batch_done(text, bigint); Type: FUNCTION; Schema: pgq_ext; Owner: rkottman
--

CREATE FUNCTION set_batch_done(a_consumer text, a_batch_id bigint) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
begin
    if pgq_ext.is_batch_done(a_consumer, a_batch_id) then
        return false;
    end if;

    if a_batch_id > 0 then
        update pgq_ext.completed_batch
           set last_batch_id = a_batch_id
         where consumer_id = a_consumer;
        if not found then
            insert into pgq_ext.completed_batch (consumer_id, last_batch_id)
                values (a_consumer, a_batch_id);
        end if;
    end if;

    return true;
end;
$$;


ALTER FUNCTION pgq_ext.set_batch_done(a_consumer text, a_batch_id bigint) OWNER TO rkottman;

--
-- Name: set_event_done(text, bigint, bigint); Type: FUNCTION; Schema: pgq_ext; Owner: rkottman
--

CREATE FUNCTION set_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
declare
    old_batch bigint;
begin
    -- check if done
    perform 1 from pgq_ext.completed_event
     where consumer_id = a_consumer
       and batch_id = a_batch_id
       and event_id = a_event_id;
    if found then
        return false;
    end if;

    -- if batch changed, do cleanup
    select cur_batch_id into old_batch
        from pgq_ext.partial_batch
        where consumer_id = a_consumer;
    if not found then
        -- first time here
        insert into pgq_ext.partial_batch
            (consumer_id, cur_batch_id)
            values (a_consumer, a_batch_id);
    elsif old_batch <> a_batch_id then
        -- batch changed, that means old is finished on queue db
        -- thus the tagged events are not needed anymore
        delete from pgq_ext.completed_event
            where consumer_id = a_consumer
              and batch_id = old_batch;
        -- remember current one
        update pgq_ext.partial_batch
            set cur_batch_id = a_batch_id
            where consumer_id = a_consumer;
    end if;

    -- tag as done
    insert into pgq_ext.completed_event (consumer_id, batch_id, event_id)
      values (a_consumer, a_batch_id, a_event_id);

    return true;
end;
$$;


ALTER FUNCTION pgq_ext.set_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) OWNER TO rkottman;

--
-- Name: set_last_tick(text, bigint); Type: FUNCTION; Schema: pgq_ext; Owner: rkottman
--

CREATE FUNCTION set_last_tick(a_consumer text, a_tick_id bigint) RETURNS integer
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
begin
    if a_tick_id is null then
        delete from pgq_ext.completed_tick
         where consumer_id = a_consumer;
    else   
        update pgq_ext.completed_tick
           set last_tick_id = a_tick_id
         where consumer_id = a_consumer;
        if not found then
            insert into pgq_ext.completed_tick (consumer_id, last_tick_id)
                values (a_consumer, a_tick_id);
        end if;
    end if;

    return 1;
end;
$$;


ALTER FUNCTION pgq_ext.set_last_tick(a_consumer text, a_tick_id bigint) OWNER TO rkottman;

--
-- Name: version(); Type: FUNCTION; Schema: pgq_ext; Owner: rkottman
--

CREATE FUNCTION version() RETURNS text
    LANGUAGE plpgsql
    AS $$
begin
    return '2.1.6';
end;
$$;


ALTER FUNCTION pgq_ext.version() OWNER TO rkottman;

SET search_path = stage_r8, pg_catalog;

--
-- Name: update_marine_phages(); Type: FUNCTION; Schema: stage_r8; Owner: rkottman
--

CREATE FUNCTION update_marine_phages() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    SET search_path TO public, stage_r8, core
    AS $$
  DECLARE

  BEGIN

    IF TG_OP = 'UPDATE' OR TG_OP = 'INSERT' THEN
      IF (NEW.latitude IS NOT NULL) AND (NEW.longitude IS NOT NULL) THEN
        IF (NEW.latitude != 'NaN') AND (NEW.longitude != 'NaN') THEN
          --RAISE NOTICE 'HELLO';
            NEW.geom := ST_PointFromText('POINT(' || NEW.longitude::text || ' ' || NEW.latitude::text || ')',4326);
        END IF;
      END IF;
    END IF;
    RETURN NEW;
  END;
$$;


ALTER FUNCTION stage_r8.update_marine_phages() OWNER TO rkottman;

SET search_path = web, pg_catalog;

--
-- Name: pangaea_url(public.geometry); Type: FUNCTION; Schema: web; Owner: rkottman
--

CREATE FUNCTION pangaea_url(geom public.geometry) RETURNS text
    LANGUAGE plpgsql IMMUTABLE
    AS $$
   DECLARE
     p CONSTANT text  = 'http://www.pangaea.de/search?count=10&q=&env=All';
     
BEGIN

    RETURN p || '&minlat='::text || (y(geom) - 1::double precision) 
             || '&maxlat='::text || (y(geom) + 1::double precision) 
             || '&minlon='::text || (x(geom) - 1::double precision) 
             || '&maxlat='::text || (x(geom) + 1::double precision); 

END;
$$;


ALTER FUNCTION web.pangaea_url(geom public.geometry) OWNER TO rkottman;

SET search_path = web_r8, pg_catalog;

--
-- Name: habitat_lite_distribution(text); Type: FUNCTION; Schema: web_r8; Owner: ikostadi
--

CREATE FUNCTION habitat_lite_distribution(viewname text) RETURNS TABLE(term text, term_count smallint)
    LANGUAGE plpgsql
    SET search_path TO web_r8
    AS $$

DECLARE
 BEGIN

  RETURN QUERY EXECUTE 'SELECT hab_lite, COUNT(hab_lite)::smallint FROM '||quote_ident(viewname)||' GROUP BY hab_lite ORDER BY hab_lite ASC';
 END;
$$;


ALTER FUNCTION web_r8.habitat_lite_distribution(viewname text) OWNER TO ikostadi;

SET search_path = core, pg_catalog;

--
-- Name: blast_run; Type: TABLE; Schema: core; Owner: ikostadi; Tablespace: 
--

CREATE TABLE blast_run (
    sid text NOT NULL,
    jid numeric(16,15) DEFAULT (random())::numeric(16,15) NOT NULL,
    time_submitted timestamp without time zone DEFAULT now() NOT NULL,
    time_finished timestamp without time zone DEFAULT 'infinity'::timestamp without time zone NOT NULL,
    who text NOT NULL,
    tool_label text DEFAULT ''::text NOT NULL,
    tool_ver text DEFAULT ''::text NOT NULL,
    program_name text NOT NULL,
    db text NOT NULL,
    seq text NOT NULL,
    evalue numeric,
    gap_open smallint,
    gap_extend smallint,
    x_dropoff smallint,
    gi_defline boolean,
    nuc_mismatch smallint,
    nuc_match smallint,
    num_desc smallint,
    num_align smallint,
    ext_threshold smallint,
    gap_align boolean,
    genetic_code smallint,
    db_gen_code smallint,
    num_processors smallint,
    believe_seq_file boolean,
    matrix text,
    word_size smallint,
    effective_db numeric,
    kept_hits integer,
    effective_space numeric,
    query_strand smallint,
    x_dropoff_ungap numeric,
    x_dropoff_gap numeric,
    multi_hits_win_size smallint,
    concat_queries smallint,
    legacy_engine boolean,
    composition_stat text,
    local_optimum boolean,
    result xml DEFAULT '<e/>'::xml NOT NULL,
    result_raw xml DEFAULT '<e/>'::xml NOT NULL,
    filter "char" DEFAULT ''::"char",
    CONSTRAINT blast_run_filter_check CHECK ((filter = ANY (ARRAY['t'::"char", 'f'::"char", ''::"char"]))),
    CONSTRAINT valid_program_name CHECK (((program_name = 'blastp'::text) OR (program_name = 'blastn'::text))),
    CONSTRAINT valid_seq CHECK ((seq ~* '[^j,o]+'::text))
);


ALTER TABLE core.blast_run OWNER TO ikostadi;

--
-- Name: TABLE blast_run; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON TABLE blast_run IS 'Parameters for Blast run and spended time';


--
-- Name: COLUMN blast_run.sid; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.sid IS 'session id';


--
-- Name: COLUMN blast_run.jid; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.jid IS 'job identifier';


--
-- Name: COLUMN blast_run.time_submitted; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.time_submitted IS 'date and time of job submission';


--
-- Name: COLUMN blast_run.time_finished; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.time_finished IS 'date and time of job finished';


--
-- Name: COLUMN blast_run.who; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.who IS 'who submitted the job';


--
-- Name: COLUMN blast_run.tool_label; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.tool_label IS 'name of the tool';


--
-- Name: COLUMN blast_run.tool_ver; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.tool_ver IS 'version of the tool';


--
-- Name: COLUMN blast_run.program_name; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.program_name IS 'name of the used program';


--
-- Name: COLUMN blast_run.db; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.db IS 'name of the database used';


--
-- Name: COLUMN blast_run.seq; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.seq IS 'sequence used for the job';


--
-- Name: COLUMN blast_run.evalue; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.evalue IS 'obtained evalue';


--
-- Name: COLUMN blast_run.gap_open; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.gap_open IS 'number of gap openings';


--
-- Name: COLUMN blast_run.gap_extend; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.gap_extend IS 'number of gap extensions';


--
-- Name: COLUMN blast_run.x_dropoff; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.x_dropoff IS 'value for evalue dropoff???';


--
-- Name: COLUMN blast_run.nuc_mismatch; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.nuc_mismatch IS 'number of nucleotide mismatches';


--
-- Name: COLUMN blast_run.nuc_match; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.nuc_match IS 'number of nucleotide matches';


--
-- Name: COLUMN blast_run.ext_threshold; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.ext_threshold IS 'extension threshold';


--
-- Name: COLUMN blast_run.genetic_code; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.genetic_code IS 'genetic code used for protein translation';


--
-- Name: COLUMN blast_run.num_processors; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.num_processors IS 'number of processors used to run the job';


--
-- Name: COLUMN blast_run.matrix; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.matrix IS 'used matrix';


--
-- Name: COLUMN blast_run.word_size; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.word_size IS 'minimum word size';


--
-- Name: COLUMN blast_run.kept_hits; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.kept_hits IS 'hits kept with the drop off criteria';


--
-- Name: COLUMN blast_run.result; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.result IS 'results after filtering';


--
-- Name: COLUMN blast_run.result_raw; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.result_raw IS 'all results';


--
-- Name: COLUMN blast_run.filter; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN blast_run.filter IS 'filter used';


SET search_path = web_r8, pg_catalog;

--
-- Name: insert_blast_run(core.blast_run); Type: FUNCTION; Schema: web_r8; Owner: megx_team
--

CREATE FUNCTION insert_blast_run(ablastjob core.blast_run) RETURNS TABLE(term text, term_count smallint)
    LANGUAGE plpgsql
    AS $$
-- 12. INSERT INTO core.blast_run(sid, who, tool_label,tool_ver, db, program_name, seq, evalue)
--                    VALUES (#{sid}, #{who}, #{tool_label}, #{tool_ver}, #{db}, #{program_name}, #{seq}, #{evalue}) 
DECLARE
 BEGIN
INSERT INTO core.blast_run  SELECT aBlastJob.*;
  
 END;
$$;


ALTER FUNCTION web_r8.insert_blast_run(ablastjob core.blast_run) OWNER TO megx_team;

SET search_path = core, pg_catalog;

--
-- Name: genome_dnas; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE genome_dnas (
    isolate_id integer NOT NULL,
    msid bigint NOT NULL,
    gpid integer,
    center text,
    fold_coverage numeric DEFAULT 'NaN'::numeric NOT NULL,
    topology text DEFAULT ''::text,
    genome_material text,
    status text DEFAULT ''::text,
    did text DEFAULT ''::text NOT NULL,
    did_auth text DEFAULT ''::text NOT NULL,
    seq_method text DEFAULT ''::text NOT NULL,
    seq_platform text DEFAULT ''::text NOT NULL,
    seq_approach text DEFAULT ''::text NOT NULL,
    study text DEFAULT ''::text NOT NULL,
    isolate_name text DEFAULT ''::text NOT NULL,
    assembly_tool text DEFAULT 'unknown'::text NOT NULL,
    assembly_tool_version text DEFAULT ''::text NOT NULL,
    assembly_method text DEFAULT ''::text NOT NULL,
    estimated_error_rate text DEFAULT ''::text NOT NULL,
    calculation_method text DEFAULT ''::text NOT NULL,
    CONSTRAINT genome_dnas_status_check CHECK ((status = ANY (ARRAY['draft'::text, 'complete'::text, ''::text]))),
    CONSTRAINT genome_dnas_topology_check CHECK ((topology = ANY (ARRAY['circular'::text, 'linear'::text, ''::text])))
);


ALTER TABLE core.genome_dnas OWNER TO rkottman;

--
-- Name: TABLE genome_dnas; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE genome_dnas IS 'Information about the origin of the genome and how it was sequenced.';


--
-- Name: COLUMN genome_dnas.isolate_id; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_dnas.isolate_id IS 'isolate identifier';


--
-- Name: COLUMN genome_dnas.center; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_dnas.center IS 'name of the center where the genome was sequenced';


--
-- Name: COLUMN genome_dnas.fold_coverage; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_dnas.fold_coverage IS 'how often was the whole genome sequenced';


--
-- Name: COLUMN genome_dnas.topology; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_dnas.topology IS 'the structure of the genome: linear or circular';


--
-- Name: COLUMN genome_dnas.genome_material; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_dnas.genome_material IS 'content of the genome: chromosome or not';


--
-- Name: COLUMN genome_dnas.status; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_dnas.status IS 'status of the sequencing';


--
-- Name: COLUMN genome_dnas.did; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_dnas.did IS 'The DNA sequence identifier';


--
-- Name: COLUMN genome_dnas.did_auth; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_dnas.did_auth IS 'The authority of did';


--
-- Name: COLUMN genome_dnas.seq_method; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_dnas.seq_method IS 'method used for sequencing';


--
-- Name: COLUMN genome_dnas.seq_approach; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_dnas.seq_approach IS 'TODO better define. most propably approach means which sequencing strategy was used e.g. WGS MDA';


--
-- Name: COLUMN genome_dnas.study; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_dnas.study IS 'kind of study';


--
-- Name: COLUMN genome_dnas.isolate_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_dnas.isolate_name IS 'name of the sequenced isolate';


--
-- Name: genome_studies; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE genome_studies (
    label text DEFAULT ''::text NOT NULL,
    isolate_name text NOT NULL,
    descr_short text DEFAULT ''::text NOT NULL,
    abstract text DEFAULT ''::text NOT NULL,
    gpid integer DEFAULT (-1) NOT NULL,
    goldstamp text DEFAULT ''::text NOT NULL,
    gcat_id text DEFAULT ''::text NOT NULL,
    img_oid text DEFAULT ''::text NOT NULL,
    seq_center text DEFAULT ''::text NOT NULL,
    resequencing boolean DEFAULT false,
    status text DEFAULT ''::text NOT NULL,
    fold_coverage numeric DEFAULT 'NaN'::numeric NOT NULL,
    CONSTRAINT genome_studies_gpid_check CHECK ((gpid > (-1)))
);


ALTER TABLE core.genome_studies OWNER TO rkottman;

--
-- Name: TABLE genome_studies; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE genome_studies IS 'Information about genome sequencing project and its status';


--
-- Name: COLUMN genome_studies.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_studies.label IS 'Name of the project sequencing this genome';


--
-- Name: COLUMN genome_studies.isolate_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_studies.isolate_name IS 'Name of isolate which is FK to isolates';


--
-- Name: COLUMN genome_studies.descr_short; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_studies.descr_short IS 'short description of the sudy';


--
-- Name: COLUMN genome_studies.abstract; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_studies.abstract IS 'abstract of the study';


--
-- Name: COLUMN genome_studies.gpid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_studies.gpid IS 'The INSDC genome project identifier';


--
-- Name: COLUMN genome_studies.goldstamp; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_studies.goldstamp IS 'gold (Genomes OnLine Database) sequence identifier';


--
-- Name: COLUMN genome_studies.seq_center; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_studies.seq_center IS 'center where the genome was sequenced';


--
-- Name: COLUMN genome_studies.resequencing; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_studies.resequencing IS 'information if the genome was resequenced';


--
-- Name: COLUMN genome_studies.status; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN genome_studies.status IS 'status of the sequencing:  e.g. completed in progress ect.';


--
-- Name: isolates; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE isolates (
    id integer DEFAULT 0 NOT NULL,
    sid integer DEFAULT 0 NOT NULL,
    label text DEFAULT ''::text NOT NULL,
    taxid integer DEFAULT 0,
    genus text DEFAULT ''::text NOT NULL,
    species text DEFAULT ''::text NOT NULL,
    strain text DEFAULT ''::text NOT NULL,
    type_strain smallint DEFAULT (-1) NOT NULL,
    subspecies text DEFAULT ''::text NOT NULL,
    serovar text DEFAULT ''::text NOT NULL,
    gpid integer DEFAULT (-1) NOT NULL,
    num_chromosomes smallint DEFAULT (-1) NOT NULL,
    num_plasmids smallint DEFAULT (-1) NOT NULL,
    oxygen_class text DEFAULT ''::text NOT NULL,
    cell_shape text DEFAULT ''::text NOT NULL,
    cell_arrange text DEFAULT ''::text NOT NULL,
    energy_source text DEFAULT ''::text NOT NULL,
    temperature_range text DEFAULT ''::text NOT NULL,
    temperature_class text DEFAULT ''::text NOT NULL,
    salinity_class text DEFAULT ''::text NOT NULL,
    motility text DEFAULT ''::text NOT NULL,
    sporulation text DEFAULT ''::text NOT NULL,
    dsmz text DEFAULT ''::text NOT NULL,
    atcc text DEFAULT ''::text NOT NULL,
    straininfo integer DEFAULT (-1) NOT NULL,
    ph_range text DEFAULT ''::text NOT NULL,
    project integer DEFAULT 0,
    own text DEFAULT 'megdb'::text,
    gram_stain smallint DEFAULT (-1) NOT NULL,
    culture_collection_label text DEFAULT ''::text NOT NULL,
    study text NOT NULL,
    sample_name text NOT NULL,
    biotic_relationship text DEFAULT ''::text NOT NULL,
    attr public.hstore,
    CONSTRAINT isolates_gpid_check CHECK ((gpid >= (-1))),
    CONSTRAINT isolates_num_chromosomes_check CHECK ((num_chromosomes >= (-1))),
    CONSTRAINT isolates_num_plasmids_check CHECK ((num_plasmids >= (-1))),
    CONSTRAINT isolates_straininfo_check CHECK ((straininfo >= (-1))),
    CONSTRAINT isolates_type_strain_check CHECK ((type_strain = ANY (ARRAY[(-1), 0, 1])))
);


ALTER TABLE core.isolates OWNER TO rkottman;

--
-- Name: TABLE isolates; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE isolates IS 'Cultured Organism (prelimenary version)';


--
-- Name: COLUMN isolates.id; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.id IS 'isolate identifier';


--
-- Name: COLUMN isolates.sid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.sid IS 'sample identifier';


--
-- Name: COLUMN isolates.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.label IS 'name of isolate';


--
-- Name: COLUMN isolates.taxid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.taxid IS 'taxonomic identifier';


--
-- Name: COLUMN isolates.genus; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.genus IS 'genus of the isolate';


--
-- Name: COLUMN isolates.species; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.species IS 'species name of the isolate';


--
-- Name: COLUMN isolates.strain; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.strain IS 'strain name of the isolate';


--
-- Name: COLUMN isolates.type_strain; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.type_strain IS 'type_strain name';


--
-- Name: COLUMN isolates.subspecies; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.subspecies IS 'subspecies name of the isolate';


--
-- Name: COLUMN isolates.serovar; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.serovar IS 'name of the serovar (variation in subspecies)';


--
-- Name: COLUMN isolates.num_chromosomes; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.num_chromosomes IS 'number of chromosomes in one cell';


--
-- Name: COLUMN isolates.num_plasmids; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.num_plasmids IS 'number of plasmids in one cell';


--
-- Name: COLUMN isolates.oxygen_class; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.oxygen_class IS 'dependency of the bacteria on oxygen: aerobic anarobic facultative';


--
-- Name: COLUMN isolates.cell_shape; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.cell_shape IS 'morphology of the single cell';


--
-- Name: COLUMN isolates.cell_arrange; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.cell_arrange IS 'appearance of the cells as singel cells or in special cell aggregations';


--
-- Name: COLUMN isolates.energy_source; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.energy_source IS 'the source the bacteria uses to gain energy: e.g. heterotroph photosynthetic lithothroph';


--
-- Name: COLUMN isolates.temperature_range; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.temperature_range IS 'the temperature range the bacteria grow the best: e.g. mesophile thermophil';


--
-- Name: COLUMN isolates.temperature_class; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.temperature_class IS 'maximum growth temperature';


--
-- Name: COLUMN isolates.salinity_class; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.salinity_class IS 'the salinity range the bacteria grow the best: e.g halophile';


--
-- Name: COLUMN isolates.motility; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.motility IS 'the ability of the bacteria to move independently: motile or nonmotile';


--
-- Name: COLUMN isolates.sporulation; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.sporulation IS 'the ability of the bacteria to form spores: sporulating or nonsporulating';


--
-- Name: COLUMN isolates.dsmz; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.dsmz IS 'dmsz(german collection of microorganism and cell cultures) identifier of the isolate';


--
-- Name: COLUMN isolates.atcc; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.atcc IS 'dmsz(german collection of microorganism and cell cultures) identifier of the isolate';


--
-- Name: COLUMN isolates.ph_range; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.ph_range IS 'the pH range the bacteria grow the best';


--
-- Name: COLUMN isolates.own; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.own IS 'owner';


--
-- Name: COLUMN isolates.gram_stain; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.gram_stain IS 'if the bacteria is gram positive (1) or gram negative (-1) or unknown (0)';


--
-- Name: COLUMN isolates.culture_collection_label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.culture_collection_label IS 'Arbitray identifier of a culture collection';


--
-- Name: COLUMN isolates.study; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.study IS 'type of study';


--
-- Name: COLUMN isolates.sample_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates.sample_name IS 'name of the samples';


--
-- Name: samples; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE samples (
    sid integer DEFAULT 0 NOT NULL,
    max_uncertain numeric DEFAULT 'NaN'::numeric,
    date_taken timestamp with time zone DEFAULT 'infinity'::timestamp with time zone NOT NULL,
    date_res date_resolution DEFAULT 'minute'::date_resolution NOT NULL,
    label text DEFAULT ''::text NOT NULL,
    material text DEFAULT ''::text NOT NULL,
    habitat text DEFAULT ''::text NOT NULL,
    hab_lite text DEFAULT ''::text NOT NULL,
    country text DEFAULT ''::text NOT NULL,
    project integer DEFAULT 0,
    own text DEFAULT 'megdb'::text,
    old_geom public.geometry,
    study text DEFAULT ''::text NOT NULL,
    pool smallint DEFAULT 0 NOT NULL,
    id integer NOT NULL,
    geom public.geometry,
    device text DEFAULT ''::text NOT NULL,
    biome text DEFAULT ''::text NOT NULL,
    feature text DEFAULT ''::text NOT NULL,
    attr public.hstore,
    CONSTRAINT enforce_dims_geom CHECK ((public.st_ndims(geom) = 2)),
    CONSTRAINT enforce_dims_old_geom CHECK ((public.ndims(old_geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'POINT'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_geotype_old_geom CHECK (((public.geometrytype(old_geom) = 'POINT'::text) OR (old_geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.st_srid(geom) = 4326)),
    CONSTRAINT enforce_srid_old_geom CHECK ((public.srid(old_geom) = (-1)))
);


ALTER TABLE core.samples OWNER TO rkottman;

--
-- Name: TABLE samples; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE samples IS 'The original sample table see CloneLibrary and Isolate';


--
-- Name: COLUMN samples.sid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.sid IS 'sample identifier';


--
-- Name: COLUMN samples.date_taken; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.date_taken IS 'the date the sample was taken';


--
-- Name: COLUMN samples.date_res; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.date_res IS 'how exact is the time the sample was taken documented';


--
-- Name: COLUMN samples.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.label IS 'sample name';


--
-- Name: COLUMN samples.material; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.material IS 'of what does the sample consist. e.g. water sediment ect.';


--
-- Name: COLUMN samples.habitat; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.habitat IS 'habitat the sample was taken from';


--
-- Name: COLUMN samples.hab_lite; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.hab_lite IS 'The habitat description according to Habitat-Lite controlled vocabulary';


--
-- Name: COLUMN samples.country; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.country IS 'country the sample was taken from';


--
-- Name: COLUMN samples.project; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.project IS 'project name';


--
-- Name: COLUMN samples.own; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.own IS 'owner of ???';


--
-- Name: COLUMN samples.old_geom; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.old_geom IS 'for website map???';


--
-- Name: COLUMN samples.study; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.study IS 'study type';


--
-- Name: COLUMN samples.pool; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.pool IS 'samples pooled or not';


--
-- Name: COLUMN samples.device; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples.device IS 'The device used for obtaining this sample';


--
-- Name: samplingsites; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE samplingsites (
    id integer NOT NULL,
    label text DEFAULT ''::text NOT NULL,
    locdesc text DEFAULT ''::text NOT NULL,
    locshortdesc text DEFAULT ''::text NOT NULL,
    gmslabel character varying(20) DEFAULT ''::character varying NOT NULL,
    max_uncertain numeric DEFAULT 'NaN'::numeric NOT NULL,
    loc_estim text DEFAULT 'ng'::text,
    region text DEFAULT ''::text,
    project integer DEFAULT 0,
    own text DEFAULT 'megdb'::text,
    old_geom public.geometry,
    verb_coords text DEFAULT ''::text NOT NULL,
    verb_coord_sys text DEFAULT ''::text NOT NULL,
    verification text DEFAULT ''::text NOT NULL,
    georef_validation text DEFAULT ''::text NOT NULL,
    georef_prot text DEFAULT ''::text NOT NULL,
    georef_source text DEFAULT ''::text NOT NULL,
    spatial_fit real DEFAULT (-1) NOT NULL,
    georef_by text DEFAULT "current_user"() NOT NULL,
    georef_time timestamp with time zone DEFAULT now() NOT NULL,
    georef_remark text DEFAULT ''::text NOT NULL,
    geom public.geometry NOT NULL,
    CONSTRAINT enforce_dims_geom CHECK ((public.st_ndims(geom) = 2)),
    CONSTRAINT enforce_dims_old_geom CHECK ((public.ndims(old_geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'POINT'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_geotype_old_geom CHECK (((public.geometrytype(old_geom) = 'POINT'::text) OR (old_geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.st_srid(geom) = 4326)),
    CONSTRAINT enforce_srid_old_geom CHECK ((public.srid(old_geom) = (-1)))
);


ALTER TABLE core.samplingsites OWNER TO rkottman;

--
-- Name: TABLE samplingsites; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE samplingsites IS 'The site where a Sample was taken; Table conforms to OpenGIS Simple Features Specification for SQL. Enables georeferencing acordin    g to BioGeomancer Guide (see GeoReferencing and http://www2.gbif.org/BioGeomancerGuide.pdf';


--
-- Name: COLUMN samplingsites.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.label IS 'The label as displayed on Genes Mapserver';


--
-- Name: COLUMN samplingsites.locdesc; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.locdesc IS 'description of the location of the sampling site';


--
-- Name: COLUMN samplingsites.locshortdesc; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.locshortdesc IS 'short description of the location of the sampling site';


--
-- Name: COLUMN samplingsites.max_uncertain; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.max_uncertain IS 'The upper limit of the distance from the given latitude and longitude describing a circle within which the whole of the described locality must lie';


--
-- Name: COLUMN samplingsites.project; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.project IS 'project type';


--
-- Name: COLUMN samplingsites.own; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.own IS 'owner';


--
-- Name: COLUMN samplingsites.verb_coords; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.verb_coords IS 'The original (verbatim) coordinates of the raw data before any transformations were carried out';


--
-- Name: COLUMN samplingsites.verb_coord_sys; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.verb_coord_sys IS 'The coordinate system in which the raw data were recorded. If data are being entered into the database in Decimal Degrees. For example the geographic coordinates of the map or gazetteer used should be entered (e.g. decimal degrees degrees-minutes-seconds degrees-decimal minutes UTM coordinates)';


--
-- Name: COLUMN samplingsites.verification; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.verification IS 'A categorical description of the extent to which the georeference and uncertainty have been verified to represent the location and uncertainty for where the specimen or observation was collected. See table cv.verification_codes';


--
-- Name: COLUMN samplingsites.georef_validation; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.georef_validation IS 'Shows what validation procedures have been conducted on the georeferences for example various outlier detection procedures revisits to the location etc. Relates to Verification Status. NOt sure if useful for MegDb';


--
-- Name: COLUMN samplingsites.georef_prot; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.georef_prot IS 'A reference to the method(s) used for determining the coordinates and uncertainty estimates (e.g. MaNIS Georeferencing Calculator).';


--
-- Name: COLUMN samplingsites.georef_source; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.georef_source IS 'A measure of how well the geometric representation matches the original spatial representation and is reported as the ratio of the area of the presented geometry to the area of the original spatial representation. A value of 1 is an exact match or 100% overlap. This is a new concept for use with biodiversity data but one that we are recommending here';


--
-- Name: COLUMN samplingsites.georef_by; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.georef_by IS 'The person or organization making the coordinate and uncertainty determination';


--
-- Name: COLUMN samplingsites.georef_time; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.georef_time IS 'The time on which the determination was made';


--
-- Name: COLUMN samplingsites.georef_remark; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.georef_remark IS 'Comments on methods and assumptions used in determining coordinates or uncertainties when those methods or assumptions differ from or expand upon the methods referenced in the Georeference Protocol field';


--
-- Name: COLUMN samplingsites.geom; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samplingsites.geom IS 'geometric data';


SET search_path = web_r8, pg_catalog;

--
-- Name: genome_reports; Type: VIEW; Schema: web_r8; Owner: rkottman
--

CREATE VIEW genome_reports AS
    SELECT site.label AS site_name, public.st_y(site.geom) AS lat, public.st_x(site.geom) AS lon, (((public.st_y(site.geom))::text || ' '::text) || (public.st_x(site.geom))::text) AS lat_lon, sam.date_taken AS collection_date, sam.date_res, sam.label AS sample_name, sam.material, sam.hab_lite AS biome, sam.country AS geo_loc_name, i.label AS isolate_name, i.taxid, i.genus, i.species, i.strain, CASE WHEN (i.type_strain = (-1)) THEN 'f'::text ELSE 't'::text END AS type_strain, i.subspecies, i.serovar, i.num_chromosomes, i.num_plasmids, (i.num_chromosomes + i.num_plasmids) AS num_replicons, i.oxygen_class, i.cell_shape, i.cell_arrange, i.energy_source, i.temperature_range, i.temperature_class, i.salinity_class, i.motility, i.sporulation, i.dsmz, i.atcc, i.straininfo, i.ph_range, i.gram_stain, i.culture_collection_label, gs.descr_short, gs.abstract, gs.gpid, gs.goldstamp, gs.gcat_id, gs.img_oid, gs.seq_center, gs.resequencing, gs.status AS finishing_strategy, array_to_string(seqs.seq_ids, ','::text) AS seq_ids, 'bacteria_archaea'::text AS investigation_type, true AS submitted_to_insdc FROM ((((core.samplingsites site RIGHT JOIN core.samples sam ON (((site.geom OPERATOR(public.=) sam.geom) AND (site.max_uncertain = sam.max_uncertain)))) JOIN core.isolates i ON (((sam.study = i.study) AND (sam.label = i.sample_name)))) JOIN core.genome_studies gs ON ((gs.isolate_name = i.label))) LEFT JOIN (SELECT genome_dnas.gpid, array_agg(genome_dnas.did) AS seq_ids FROM core.genome_dnas WHERE (genome_dnas.did_auth <> 'acc'::text) GROUP BY genome_dnas.gpid) seqs ON ((seqs.gpid = gs.gpid)));


ALTER TABLE web_r8.genome_reports OWNER TO rkottman;

--
-- Name: VIEW genome_reports; Type: COMMENT; Schema: web_r8; Owner: rkottman
--

COMMENT ON VIEW genome_reports IS 'Web view on MIGS consistent genome reports;';


--
-- Name: insert_genome_report(genome_reports); Type: FUNCTION; Schema: web_r8; Owner: megx_team
--

CREATE FUNCTION insert_genome_report(agenome genome_reports) RETURNS TABLE(term text, term_count smallint)
    LANGUAGE plpgsql
    SET search_path TO web_r8, core, public
    AS $$

DECLARE
   pwkt text := 'POINT(' || aGenome.lon || ' ' || aGenome.lat || ')';
   pos geometry := ST_PointFromText ( 
                 COALESCE(pwkt,'POINT EMPTY'), 4326 
               ); 

 BEGIN

RAISE NOTICE 'hello=%,%    %', pwkt, geometrytype(pos), pos;

--RAISE NOTICE 'hello=%', aGenome;

IF pos IS NOT NULL THEN

RAISE NOTICE 'not null %', pos;

  INSERT INTO core.samplingsites (
         label, 
         max_uncertain,
         geom,
         own,
         region
         )
    VALUES (
         COALESCE(aGenome.site_name, 'unknown'),
         'NaN' ,
         pos,
        'anonymous',
        null
    );
END IF;

    INSERT INTO core.samples (
         study,
         label,
         geom,
         max_uncertain,
         own
    )
    VALUES (
         'genome',
         aGenome.sample_name,
         pos,
         'NaN',
         'anonymous'
    );
   --INSERT INTO core.isolates (


EXCEPTION WHEN unique_violation THEN

 END;
$$;


ALTER FUNCTION web_r8.insert_genome_report(agenome genome_reports) OWNER TO megx_team;

--
-- Name: parse_silva_coldate(text); Type: FUNCTION; Schema: web_r8; Owner: ikostadi
--

CREATE FUNCTION parse_silva_coldate(coldate text) RETURNS TABLE(datum timestamp with time zone, res core.date_resolution)
    LANGUAGE plpgsql
    AS $$

DECLARE

da text;
mo text;
yr text;
ho text := '00';
mn text := '00';
sc text := '00';
ms text := '000';
tdate text;
reg_dmy text  :=  E'([[:digit:]]+)\-([^[:space:]]+)\-([[:digit:]]+)'; -- DD-MM-YYYY format
reg_my text :=  E'([^[:space:]]+)-([[:digit:]]+)'; -- MM-YYYY format
reg_y text :=  E'([[:digit:]]+)'; -- YYYY format
datef text := 'YYYY MON DD HH24 MI SS MS'; --the format we supply to the timestamp function
res core.date_resolution;

BEGIN

	IF (coldate ~ reg_dmy) THEN 

	  da := regexp_replace(coldate, reg_dmy, E'\\1');
	  mo := upper(regexp_replace(coldate, reg_dmy, E'\\2'));
	  yr := regexp_replace(coldate, reg_dmy, E'\\3');
	  res := 'day';
	tdate := yr || ' ' || mo  || ' ' || da || ' ' || ho || ' ' || mn || ' ' || sc || ' ' || ms;
        RETURN QUERY SELECT to_timestamp(tdate, datef),res;
	  
	ELSIF (coldate ~ reg_my) THEN 

	  da := '01';
	  mo := regexp_replace(coldate, reg_my, E'\\1');
	  yr := regexp_replace(coldate, reg_my, E'\\2');
	  res := 'month';
	tdate := yr || ' ' || mo  || ' ' || da || ' ' || ho || ' ' || mn || ' ' || sc || ' ' || ms;
        RETURN QUERY SELECT to_timestamp(tdate, datef),res;
	
	ELSIF (coldate ~ reg_y) THEN

   	  da := '01';
 	  mo := 'JAN';
	  yr := regexp_replace(coldate, reg_y, E'\\1');
	  res := 'year';
	tdate := yr || ' ' || mo  || ' ' || da || ' ' || ho || ' ' || mn || ' ' || sc || ' ' || ms;
        RETURN QUERY SELECT to_timestamp(tdate, datef),res;
	
	ELSE
          RETURN QUERY SELECT 'infinity'::timestamp with time zone, 'month'::core.date_resolution;
	END IF;


END;

$$;


ALTER FUNCTION web_r8.parse_silva_coldate(coldate text) OWNER TO ikostadi;

SET search_path = core, pg_catalog;

--
-- Name: mg_dnas; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE mg_dnas (
    study text NOT NULL,
    sample_name text NOT NULL,
    did text DEFAULT ''::text NOT NULL,
    did_code text DEFAULT ''::text NOT NULL
);


ALTER TABLE core.mg_dnas OWNER TO rkottman;

--
-- Name: TABLE mg_dnas; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE mg_dnas IS 'The relation of all NON-pooled samples to dna sequences derived from the samples.';


--
-- Name: COLUMN mg_dnas.study; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN mg_dnas.study IS 'name of study';


--
-- Name: COLUMN mg_dnas.sample_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN mg_dnas.sample_name IS 'name of the sample';


--
-- Name: COLUMN mg_dnas.did; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN mg_dnas.did IS 'The sequence identifier dna id';


--
-- Name: COLUMN mg_dnas.did_code; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN mg_dnas.did_code IS 'Authority code of dna id';


--
-- Name: mg_pooled_dnas; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE mg_pooled_dnas (
    pool_label text NOT NULL,
    did text NOT NULL,
    did_code text NOT NULL,
    study text NOT NULL
);


ALTER TABLE core.mg_pooled_dnas OWNER TO rkottman;

--
-- Name: TABLE mg_pooled_dnas; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE mg_pooled_dnas IS 'The relation of all POOLED samples to dna sequences derived from the pooled samples.';


--
-- Name: COLUMN mg_pooled_dnas.pool_label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN mg_pooled_dnas.pool_label IS 'name of the sample pool';


--
-- Name: COLUMN mg_pooled_dnas.did; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN mg_pooled_dnas.did IS 'DNA identifier';


--
-- Name: COLUMN mg_pooled_dnas.study; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN mg_pooled_dnas.study IS 'name of the study';


--
-- Name: mg_all_dnas; Type: VIEW; Schema: core; Owner: rkottman
--

CREATE VIEW mg_all_dnas AS
    SELECT mg_dnas.study, mg_dnas.sample_name AS sample_label, mg_dnas.did, mg_dnas.did_code FROM mg_dnas UNION ALL SELECT mg_pooled_dnas.study, mg_pooled_dnas.pool_label AS sample_label, mg_pooled_dnas.did, mg_pooled_dnas.did_code FROM mg_pooled_dnas;


ALTER TABLE core.mg_all_dnas OWNER TO rkottman;

--
-- Name: annotation; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE annotation (
    gid integer NOT NULL,
    annotatorid integer NOT NULL,
    product text DEFAULT ''::text,
    proteinid text DEFAULT ''::text,
    genename text DEFAULT ''::text,
    remark text DEFAULT ''::text,
    ecnum text DEFAULT ''::text,
    date date DEFAULT '0001-01-01 BC'::date
);


ALTER TABLE core.annotation OWNER TO rkottman;

--
-- Name: TABLE annotation; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE annotation IS 'Annotation for a certain Region';


--
-- Name: COLUMN annotation.gid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN annotation.gid IS 'genome identifier';


--
-- Name: COLUMN annotation.annotatorid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN annotation.annotatorid IS 'annotator identifier';


--
-- Name: COLUMN annotation.product; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN annotation.product IS 'product of the gene';


--
-- Name: COLUMN annotation.proteinid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN annotation.proteinid IS 'protein identifier';


--
-- Name: COLUMN annotation.genename; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN annotation.genename IS 'name of the gene';


--
-- Name: COLUMN annotation.remark; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN annotation.remark IS 'comments to the annotation';


--
-- Name: COLUMN annotation.ecnum; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN annotation.ecnum IS 'Enzyme Commission (EC) number';


--
-- Name: COLUMN annotation.date; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN annotation.date IS 'date of the annotation';


--
-- Name: annotation_gid_seq; Type: SEQUENCE; Schema: core; Owner: rkottman
--

CREATE SEQUENCE annotation_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.annotation_gid_seq OWNER TO rkottman;

--
-- Name: annotation_gid_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: rkottman
--

ALTER SEQUENCE annotation_gid_seq OWNED BY annotation.gid;


--
-- Name: annotator; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE annotator (
    gid integer NOT NULL,
    name text NOT NULL,
    description text DEFAULT ''::text
);


ALTER TABLE core.annotator OWNER TO rkottman;

--
-- Name: TABLE annotator; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE annotator IS 'The one who assigns Region to DNASequence';


--
-- Name: COLUMN annotator.gid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN annotator.gid IS 'genome identifier';


--
-- Name: COLUMN annotator.name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN annotator.name IS 'name of the annotator';


--
-- Name: annotator_gid_seq; Type: SEQUENCE; Schema: core; Owner: rkottman
--

CREATE SEQUENCE annotator_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.annotator_gid_seq OWNER TO rkottman;

--
-- Name: annotator_gid_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: rkottman
--

ALTER SEQUENCE annotator_gid_seq OWNED BY annotator.gid;


--
-- Name: articles; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE articles (
    id text DEFAULT ''::text NOT NULL,
    id_code text NOT NULL,
    title text DEFAULT ''::text NOT NULL,
    pubstatus text DEFAULT ''::text NOT NULL,
    linkout http,
    journalid integer,
    issue text DEFAULT ''::text NOT NULL,
    volume text DEFAULT ''::text NOT NULL,
    yr text DEFAULT ''::text NOT NULL,
    mon text DEFAULT ''::text NOT NULL,
    firstpage text DEFAULT ''::text NOT NULL,
    lastpage text DEFAULT ''::text NOT NULL,
    abstract text DEFAULT ''::text NOT NULL,
    published boolean DEFAULT false NOT NULL,
    pdf http,
    html_abstract http,
    html_fulltext http
);


ALTER TABLE core.articles OWNER TO rkottman;

--
-- Name: TABLE articles; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE articles IS 'The articels with some kind of information needed for Genomes Mapserver. Most attributes are taken from www.pubmed.com entries';


--
-- Name: COLUMN articles.title; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.title IS 'Title of article';


--
-- Name: COLUMN articles.pubstatus; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.pubstatus IS 'status of publication';


--
-- Name: COLUMN articles.linkout; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.linkout IS 'The url of the fulltext as given bu NCBI LinkOut database';


--
-- Name: COLUMN articles.journalid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.journalid IS 'The journal this article is published';


--
-- Name: COLUMN articles.issue; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.issue IS 'Issue of journal';


--
-- Name: COLUMN articles.volume; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.volume IS 'Volume of journal';


--
-- Name: COLUMN articles.yr; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.yr IS 'Year of publication';


--
-- Name: COLUMN articles.mon; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.mon IS 'Month of publication';


--
-- Name: COLUMN articles.firstpage; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.firstpage IS 'First page number';


--
-- Name: COLUMN articles.lastpage; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.lastpage IS 'Last page number';


--
-- Name: COLUMN articles.abstract; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.abstract IS 'Abstract of article';


--
-- Name: COLUMN articles.published; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.published IS 'Whether article is officially published';


--
-- Name: COLUMN articles.pdf; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.pdf IS 'name of the pdf document containing the article';


--
-- Name: COLUMN articles.html_abstract; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.html_abstract IS 'html version of the articles abstract';


--
-- Name: COLUMN articles.html_fulltext; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN articles.html_fulltext IS 'html version of the full article';


--
-- Name: assignments; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE assignments (
    project integer NOT NULL,
    person text NOT NULL,
    role text NOT NULL
);


ALTER TABLE core.assignments OWNER TO rkottman;

--
-- Name: TABLE assignments; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE assignments IS 'An assignments defines the roles/privileges a person has in a certain project';


--
-- Name: COLUMN assignments.project; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN assignments.project IS 'project name';


--
-- Name: COLUMN assignments.person; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN assignments.person IS 'person involved in the project';


--
-- Name: COLUMN assignments.role; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN assignments.role IS 'role of person in the project';


--
-- Name: authorlists; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE authorlists (
    article_id text NOT NULL,
    article_id_code text NOT NULL,
    first_name text NOT NULL,
    initials text NOT NULL,
    last_name text NOT NULL,
    sex gender NOT NULL,
    pos smallint NOT NULL,
    corres boolean DEFAULT false NOT NULL
);


ALTER TABLE core.authorlists OWNER TO rkottman;

--
-- Name: TABLE authorlists; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE authorlists IS 'Ordered list of authors for each article';


--
-- Name: COLUMN authorlists.article_id; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN authorlists.article_id IS 'article identifier';


--
-- Name: COLUMN authorlists.first_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN authorlists.first_name IS 'first name of the author';


--
-- Name: COLUMN authorlists.initials; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN authorlists.initials IS 'initials of the author';


--
-- Name: COLUMN authorlists.last_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN authorlists.last_name IS 'last name of the author';


--
-- Name: COLUMN authorlists.sex; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN authorlists.sex IS 'ISO gender code for sex. 0=unknown; 1=male; 2=female; 9=not applicable';


--
-- Name: COLUMN authorlists.pos; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN authorlists.pos IS 'The position of the author in an article. Zero if not known';


--
-- Name: COLUMN authorlists.corres; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN authorlists.corres IS 'correspondence information';


--
-- Name: authors; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE authors (
    first_name text DEFAULT ''::text NOT NULL,
    initials text DEFAULT ''::text NOT NULL,
    last_name text NOT NULL,
    institute text DEFAULT ''::text NOT NULL,
    sex gender NOT NULL
);


ALTER TABLE core.authors OWNER TO rkottman;

--
-- Name: TABLE authors; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE authors IS 'Authors of articles. Most attributes are taken from www.pubmed.com entries';


--
-- Name: COLUMN authors.first_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN authors.first_name IS 'first name of the author';


--
-- Name: COLUMN authors.initials; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN authors.initials IS 'initials of the author';


--
-- Name: COLUMN authors.last_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN authors.last_name IS 'last name of the author';


--
-- Name: COLUMN authors.institute; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN authors.institute IS 'institut the author is associated';


--
-- Name: COLUMN authors.sex; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN authors.sex IS 'ISO gender code for sex. 0=unknown; 1=male; 2=female; 9=not applicable';


--
-- Name: aux_audit; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE aux_audit (
    auditor text DEFAULT "current_user"() NOT NULL,
    op "char" NOT NULL,
    atime timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE core.aux_audit OWNER TO rkottman;

--
-- Name: aux_cv; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE aux_cv (
    term text NOT NULL,
    descr text DEFAULT ''::text NOT NULL
);


ALTER TABLE core.aux_cv OWNER TO rkottman;

--
-- Name: aux_project; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE aux_project (
    project integer DEFAULT 0,
    own text DEFAULT 'megdb'::text
);


ALTER TABLE core.aux_project OWNER TO rkottman;

--
-- Name: COLUMN aux_project.own; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN aux_project.own IS 'owner';


--
-- Name: aux_row_time; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE aux_row_time (
    ctime timestamp with time zone DEFAULT now() NOT NULL,
    mtime timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE core.aux_row_time OWNER TO rkottman;

--
-- Name: TABLE aux_row_time; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE aux_row_time IS 'Auxiliary table as template for tables which store creation time (ctime) and last modified (mtime = modified time)';


--
-- Name: blast_hits; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE blast_hits (
    sid text NOT NULL,
    jid numeric NOT NULL,
    db text NOT NULL,
    hit smallint DEFAULT (-1) NOT NULL,
    hit_id text NOT NULL,
    hit_def text NOT NULL,
    hit_acc text NOT NULL,
    hsp smallint DEFAULT (-1) NOT NULL,
    h_length integer DEFAULT (-1) NOT NULL,
    evalue numeric NOT NULL,
    bit_score numeric DEFAULT 'NaN'::numeric NOT NULL,
    q_from integer DEFAULT (-1) NOT NULL,
    q_to integer DEFAULT (-1) NOT NULL,
    h_from integer DEFAULT (-1) NOT NULL,
    h_to integer DEFAULT (-1) NOT NULL,
    q_frame smallint DEFAULT (-1) NOT NULL,
    h_frame smallint DEFAULT (-1) NOT NULL,
    ident integer DEFAULT (-1) NOT NULL,
    pos integer DEFAULT (-1) NOT NULL,
    a_length integer DEFAULT (-1) NOT NULL,
    id bigint NOT NULL
);


ALTER TABLE core.blast_hits OWNER TO rkottman;

--
-- Name: TABLE blast_hits; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE blast_hits IS 'Blast results and search parameters.';


--
-- Name: COLUMN blast_hits.sid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN blast_hits.sid IS 'sample identifier';


--
-- Name: COLUMN blast_hits.hit; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN blast_hits.hit IS '<Hit_num>';


--
-- Name: COLUMN blast_hits.hit_id; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN blast_hits.hit_id IS 'hit identifier';


--
-- Name: COLUMN blast_hits.hsp; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN blast_hits.hsp IS 'high-scoring segment pairs';


--
-- Name: COLUMN blast_hits.h_length; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN blast_hits.h_length IS 'length of the HSP';


--
-- Name: COLUMN blast_hits.evalue; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN blast_hits.evalue IS '<Hsp_evalue>';


--
-- Name: COLUMN blast_hits.bit_score; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN blast_hits.bit_score IS '<Hsp_bit-score>';


--
-- Name: COLUMN blast_hits.q_from; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN blast_hits.q_from IS '<Hsp_query-from>';


--
-- Name: COLUMN blast_hits.q_to; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN blast_hits.q_to IS '<hsp_query-to>';


--
-- Name: COLUMN blast_hits.ident; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN blast_hits.ident IS 'identity percentage';


--
-- Name: COLUMN blast_hits.pos; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN blast_hits.pos IS 'position';


--
-- Name: COLUMN blast_hits.id; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN blast_hits.id IS 'only needed for mapserver getfeature request. Pure artificial key';


--
-- Name: blast_hits_id_seq; Type: SEQUENCE; Schema: core; Owner: rkottman
--

CREATE SEQUENCE blast_hits_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.blast_hits_id_seq OWNER TO rkottman;

--
-- Name: blast_hits_id_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: rkottman
--

ALTER SEQUENCE blast_hits_id_seq OWNED BY blast_hits.id;


--
-- Name: clonelib_dnas; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE clonelib_dnas (
    study text NOT NULL,
    lib_name text NOT NULL,
    clone_name text NOT NULL,
    did text NOT NULL,
    did_code text NOT NULL
);


ALTER TABLE core.clonelib_dnas OWNER TO rkottman;

--
-- Name: TABLE clonelib_dnas; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE clonelib_dnas IS 'Gives the origin of a DNA sequence from a certain clone of a certain clone library.';


--
-- Name: COLUMN clonelib_dnas.study; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clonelib_dnas.study IS 'kind of study';


--
-- Name: COLUMN clonelib_dnas.lib_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clonelib_dnas.lib_name IS 'name of clone library';


--
-- Name: COLUMN clonelib_dnas.clone_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clonelib_dnas.clone_name IS 'name of clone';


--
-- Name: COLUMN clonelib_dnas.did; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clonelib_dnas.did IS 'The DNA sequence identifier';


--
-- Name: COLUMN clonelib_dnas.did_code; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clonelib_dnas.did_code IS 'The authority of the DNA sequence identifier';


--
-- Name: clonelibs; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE clonelibs (
    label text NOT NULL,
    study text NOT NULL,
    sample_name text NOT NULL,
    libtype text,
    clonevector text DEFAULT ''::text,
    constucted timestamp with time zone DEFAULT 'infinity'::timestamp with time zone NOT NULL,
    constructed_res date_resolution DEFAULT 'minute'::date_resolution NOT NULL,
    numclones integer DEFAULT 0,
    project integer DEFAULT 0 NOT NULL,
    own text DEFAULT 'megdb'::text NOT NULL,
    CONSTRAINT clonelibs_libtype_check CHECK ((libtype = ANY (ARRAY['metagenome'::text, '16S'::text])))
);


ALTER TABLE core.clonelibs OWNER TO rkottman;

--
-- Name: TABLE clonelibs; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE clonelibs IS 'Either Metagenome or 16S clonelibrary';


--
-- Name: COLUMN clonelibs.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clonelibs.label IS 'name of clone library';


--
-- Name: COLUMN clonelibs.study; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clonelibs.study IS 'kind of study';


--
-- Name: COLUMN clonelibs.sample_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clonelibs.sample_name IS 'name of sample used for the clone library';


--
-- Name: COLUMN clonelibs.libtype; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clonelibs.libtype IS 'type of library ???';


--
-- Name: COLUMN clonelibs.clonevector; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clonelibs.clonevector IS 'vector used for cloning';


--
-- Name: COLUMN clonelibs.numclones; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clonelibs.numclones IS 'number of clones in the clone library';


--
-- Name: COLUMN clonelibs.project; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clonelibs.project IS 'project name';


--
-- Name: COLUMN clonelibs.own; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clonelibs.own IS 'owner of the clone library???';


--
-- Name: clones; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE clones (
    label text NOT NULL,
    study text NOT NULL,
    lib_name text NOT NULL,
    well_id text,
    vector text
);


ALTER TABLE core.clones OWNER TO rkottman;

--
-- Name: TABLE clones; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE clones IS 'Gives infromation where to find the clone which vector was used and to which experiment it belongs.';


--
-- Name: COLUMN clones.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clones.label IS 'name of clone';


--
-- Name: COLUMN clones.study; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clones.study IS 'kind of study';


--
-- Name: COLUMN clones.lib_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clones.lib_name IS 'name of clone library';


--
-- Name: COLUMN clones.well_id; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clones.well_id IS 'well (where clones are stored) identifier';


--
-- Name: COLUMN clones.vector; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN clones.vector IS 'vector used for cloning';


--
-- Name: data_sources; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE data_sources (
    code text NOT NULL,
    download_url text DEFAULT ''::text,
    doc_url text DEFAULT ''::text,
    download_dir text DEFAULT ''::text,
    staging_dir text DEFAULT ''::text,
    maintainer text DEFAULT ''::text NOT NULL,
    last_updated date DEFAULT now(),
    label text DEFAULT ''::text NOT NULL
);


ALTER TABLE core.data_sources OWNER TO rkottman;

--
-- Name: TABLE data_sources; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE data_sources IS 'The external sources of data incoporated in this database with reference to the local maintainer';


--
-- Name: COLUMN data_sources.download_url; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN data_sources.download_url IS 'url where the data was downloaded';


--
-- Name: COLUMN data_sources.download_dir; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN data_sources.download_dir IS 'directory the data was downloaded to';


--
-- Name: COLUMN data_sources.maintainer; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN data_sources.maintainer IS 'maintainer of the data';


--
-- Name: COLUMN data_sources.last_updated; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN data_sources.last_updated IS 'date of the last update';


--
-- Name: COLUMN data_sources.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN data_sources.label IS 'Title or name of the data source';


--
-- Name: dna_id_maps; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE dna_id_maps (
    pid text NOT NULL,
    pid_type text NOT NULL,
    sid text NOT NULL,
    sid_type text NOT NULL,
    CONSTRAINT dna_id_maps_check CHECK (((pid <> sid) AND (pid_type <> sid_type)))
);


ALTER TABLE core.dna_id_maps OWNER TO rkottman;

--
-- Name: COLUMN dna_id_maps.sid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_id_maps.sid IS 'sample identifier';


--
-- Name: dna_regions; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE dna_regions (
    gi bigint DEFAULT (-1) NOT NULL,
    msid bigint DEFAULT 0 NOT NULL,
    did text DEFAULT ''::text NOT NULL,
    did_auth text DEFAULT ''::text NOT NULL,
    rid text DEFAULT ''::text NOT NULL,
    rid_type text DEFAULT ''::text NOT NULL
);


ALTER TABLE core.dna_regions OWNER TO rkottman;

--
-- Name: COLUMN dna_regions.gi; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_regions.gi IS 'genebank sequence identifier';


--
-- Name: COLUMN dna_regions.did; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_regions.did IS 'The DNA sequence identifier';


--
-- Name: COLUMN dna_regions.did_auth; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_regions.did_auth IS 'The authority of the DNA sequence identifier';


--
-- Name: COLUMN dna_regions.rid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_regions.rid IS 'region identifier';


--
-- Name: dna_seqs; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE dna_seqs (
    msid bigint NOT NULL,
    gi bigint DEFAULT 0 NOT NULL,
    dna text DEFAULT ''::text NOT NULL,
    size integer DEFAULT 0 NOT NULL,
    gc numeric DEFAULT 'NaN'::numeric NOT NULL,
    seq_method text DEFAULT ''::text NOT NULL,
    data_source text,
    assembly_status text NOT NULL,
    retrieved timestamp without time zone DEFAULT now() NOT NULL,
    project integer DEFAULT 0,
    own text DEFAULT 'megdb'::text,
    did text DEFAULT ''::text NOT NULL,
    did_auth text DEFAULT ''::text NOT NULL,
    mol_type text DEFAULT ''::text,
    acc_ver text DEFAULT ''::text NOT NULL
);


ALTER TABLE core.dna_seqs OWNER TO rkottman;

--
-- Name: TABLE dna_seqs; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE dna_seqs IS 'Sequence method assembly status GC content size';


--
-- Name: COLUMN dna_seqs.gi; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_seqs.gi IS 'Genbank sequence identifier';


--
-- Name: COLUMN dna_seqs.dna; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_seqs.dna IS 'whole DNA nucleotid sequence';


--
-- Name: COLUMN dna_seqs.size; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_seqs.size IS 'nucleotid length of the sequence';


--
-- Name: COLUMN dna_seqs.gc; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_seqs.gc IS 'GC content in %';


--
-- Name: COLUMN dna_seqs.seq_method; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_seqs.seq_method IS 'method used for sequencing';


--
-- Name: COLUMN dna_seqs.data_source; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_seqs.data_source IS 'origin of data';


--
-- Name: COLUMN dna_seqs.retrieved; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_seqs.retrieved IS 'when was the data retrieved';


--
-- Name: COLUMN dna_seqs.own; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_seqs.own IS 'owner';


--
-- Name: COLUMN dna_seqs.did; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_seqs.did IS 'A DNA identifier from some resource see did_auth';


--
-- Name: COLUMN dna_seqs.did_auth; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_seqs.did_auth IS 'The authority of the did. Technically a symbol refering to the organisation which issues the identifiers see table is_codes.';


--
-- Name: dna_seqs_msid_seq; Type: SEQUENCE; Schema: core; Owner: rkottman
--

CREATE SEQUENCE dna_seqs_msid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.dna_seqs_msid_seq OWNER TO rkottman;

--
-- Name: dna_seqs_msid_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: rkottman
--

ALTER SEQUENCE dna_seqs_msid_seq OWNED BY dna_seqs.msid;


--
-- Name: dna_set_mdata; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE dna_set_mdata (
    label text NOT NULL,
    descr text DEFAULT ''::text NOT NULL,
    owner text DEFAULT ''::text NOT NULL,
    cdate timestamp without time zone
);


ALTER TABLE core.dna_set_mdata OWNER TO rkottman;

--
-- Name: TABLE dna_set_mdata; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE dna_set_mdata IS 'Metadata for DNA sets';


--
-- Name: dna_sets; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE dna_sets (
    label text NOT NULL,
    msid bigint NOT NULL,
    did text DEFAULT ''::text NOT NULL,
    did_auth text DEFAULT ''::text NOT NULL
);


ALTER TABLE core.dna_sets OWNER TO rkottman;

--
-- Name: COLUMN dna_sets.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_sets.label IS 'dna-set name';


--
-- Name: COLUMN dna_sets.msid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_sets.msid IS 'metagenome sample identifier ???';


--
-- Name: COLUMN dna_sets.did; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_sets.did IS 'The DNA sequence identifier';


--
-- Name: COLUMN dna_sets.did_auth; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN dna_sets.did_auth IS 'The authority of the DNA sequence identifier';


--
-- Name: gcdml_reports; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE gcdml_reports (
    gcat_id text DEFAULT 'not assigned'::text NOT NULL,
    source_name text DEFAULT ''::text NOT NULL,
    source_version text DEFAULT ''::text NOT NULL,
    gcdml xml DEFAULT '<e/>'::xml NOT NULL,
    authoritative boolean DEFAULT false NOT NULL,
    category text NOT NULL,
    CONSTRAINT gcdml_reports_category_check CHECK ((category = ANY (ARRAY['gcd'::text, 'migs'::text])))
);


ALTER TABLE core.gcdml_reports OWNER TO rkottman;

--
-- Name: TABLE gcdml_reports; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE gcdml_reports IS 'MIGS/MIMS compliant reports in GCDML. Stores original GCDML document and additional attributes taken from the resp. document to de    fine a Primary Key.';


--
-- Name: geo_regions; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE geo_regions (
    label text DEFAULT ''::text NOT NULL,
    locdesc text DEFAULT ''::text NOT NULL,
    locshortdesc text DEFAULT ''::text NOT NULL,
    gmslabel character varying(20) DEFAULT ''::character varying NOT NULL,
    loc_error numeric DEFAULT 'NaN'::numeric,
    loc_estim text DEFAULT 'ng'::text,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.ndims(geom) = 2)),
    CONSTRAINT enforce_srid_geom CHECK ((public.srid(geom) = (-1)))
);


ALTER TABLE core.geo_regions OWNER TO rkottman;

--
-- Name: TABLE geo_regions; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE geo_regions IS 'To construct geographic collections of samples with uncertain geometry';


--
-- Name: COLUMN geo_regions.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN geo_regions.label IS 'name of geographic region';


--
-- Name: COLUMN geo_regions.locdesc; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN geo_regions.locdesc IS 'description of the location';


--
-- Name: COLUMN geo_regions.locshortdesc; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN geo_regions.locshortdesc IS 'short description of the location';


--
-- Name: COLUMN geo_regions.gmslabel; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN geo_regions.gmslabel IS 'gms (Geostationary Meteorological Satellite) name';


--
-- Name: id_codes; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE id_codes (
    code text DEFAULT ''::text NOT NULL,
    descr text DEFAULT ''::text NOT NULL,
    full_name text DEFAULT ''::text NOT NULL,
    url text DEFAULT ''::text NOT NULL,
    authority_code text DEFAULT ''::text NOT NULL,
    preferred boolean DEFAULT false NOT NULL
);


ALTER TABLE core.id_codes OWNER TO rkottman;

--
-- Name: TABLE id_codes; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE id_codes IS 'Metadata abut the authority and code name of an identifier used within MegDB';


--
-- Name: COLUMN id_codes.code; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN id_codes.code IS 'The code name of the identifier authority';


--
-- Name: COLUMN id_codes.descr; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN id_codes.descr IS 'Description of the authority';


--
-- Name: COLUMN id_codes.full_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN id_codes.full_name IS 'Fullname of the authority';


--
-- Name: COLUMN id_codes.url; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN id_codes.url IS 'The url of the authority for further information';


--
-- Name: isolate_sites; Type: VIEW; Schema: core; Owner: rkottman
--

CREATE VIEW isolate_sites AS
    SELECT iso.id, sam.sid, iso.label AS isolate_label, iso.taxid, iso.genus, iso.species, iso.strain, iso.type_strain, iso.subspecies, iso.serovar, iso.gpid, iso.num_chromosomes, iso.num_plasmids, iso.oxygen_class, iso.cell_shape, iso.cell_arrange, iso.energy_source, iso.temperature_range, iso.temperature_class, iso.salinity_class, iso.motility, iso.sporulation, iso.dsmz, iso.atcc, iso.straininfo, iso.ph_range, iso.gram_stain, sam.max_uncertain AS loc_error, sam.date_taken, sam.date_res, sam.label AS sample_label, sam.material, sam.habitat, sam.hab_lite, sam.country, sam.old_geom AS geom FROM (isolates iso JOIN samples sam ON ((iso.sid = sam.sid)));


ALTER TABLE core.isolate_sites OWNER TO rkottman;

--
-- Name: isolates_audit_old; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE isolates_audit_old (
    auditor text DEFAULT "current_user"() NOT NULL,
    op "char" NOT NULL,
    atime timestamp without time zone DEFAULT now() NOT NULL,
    id integer DEFAULT 0 NOT NULL,
    sid integer DEFAULT 0 NOT NULL,
    label text DEFAULT ''::text NOT NULL,
    taxid integer DEFAULT 0,
    genus text DEFAULT ''::text NOT NULL,
    species text DEFAULT ''::text NOT NULL,
    strain text DEFAULT ''::text NOT NULL,
    type_strain smallint DEFAULT (-1) NOT NULL,
    subspecies text DEFAULT ''::text NOT NULL,
    serovar text DEFAULT ''::text NOT NULL,
    gpid integer DEFAULT (-1) NOT NULL,
    num_chromosomes smallint DEFAULT (-1) NOT NULL,
    num_plasmids smallint DEFAULT (-1) NOT NULL,
    oxygen_class text DEFAULT ''::text NOT NULL,
    cell_shape text DEFAULT ''::text NOT NULL,
    cell_arrange text DEFAULT ''::text NOT NULL,
    energy_source text DEFAULT ''::text NOT NULL,
    temperature_range text DEFAULT ''::text NOT NULL,
    temperature_class text DEFAULT ''::text NOT NULL,
    salinity_class text DEFAULT ''::text NOT NULL,
    motility text DEFAULT ''::text NOT NULL,
    sporulation text DEFAULT ''::text NOT NULL,
    dsmz text DEFAULT ''::text NOT NULL,
    atcc text DEFAULT ''::text NOT NULL,
    straininfo integer DEFAULT (-1) NOT NULL,
    ph_range text DEFAULT ''::text NOT NULL,
    project integer DEFAULT 0,
    own text DEFAULT 'megdb'::text,
    gram_stain smallint DEFAULT (-1) NOT NULL,
    culture_collection_label text DEFAULT ''::text NOT NULL,
    study text,
    sample_name text
);


ALTER TABLE core.isolates_audit_old OWNER TO rkottman;

--
-- Name: COLUMN isolates_audit_old.sid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.sid IS 'sample identifier';


--
-- Name: COLUMN isolates_audit_old.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.label IS 'isolate name';


--
-- Name: COLUMN isolates_audit_old.taxid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.taxid IS 'taxonomic identifier';


--
-- Name: COLUMN isolates_audit_old.genus; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.genus IS 'isolated genus name';


--
-- Name: COLUMN isolates_audit_old.species; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.species IS 'isolated species name';


--
-- Name: COLUMN isolates_audit_old.strain; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.strain IS 'strain name';


--
-- Name: COLUMN isolates_audit_old.subspecies; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.subspecies IS 'isolate subspecies name';


--
-- Name: COLUMN isolates_audit_old.gpid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.gpid IS 'genome project identifier';


--
-- Name: COLUMN isolates_audit_old.num_chromosomes; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.num_chromosomes IS 'number of chromosomes found in one cell of the isolate';


--
-- Name: COLUMN isolates_audit_old.num_plasmids; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.num_plasmids IS 'number of plasmids found in one cell of the isolate';


--
-- Name: COLUMN isolates_audit_old.oxygen_class; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.oxygen_class IS 'gives information if the strain needs oxygen or not';


--
-- Name: COLUMN isolates_audit_old.cell_shape; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.cell_shape IS 'shape of the cell';


--
-- Name: COLUMN isolates_audit_old.cell_arrange; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.cell_arrange IS 'how the cells assemble e.g. single cells aggregates etc.';


--
-- Name: COLUMN isolates_audit_old.energy_source; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.energy_source IS 'which sources does the cell need to gain energy';


--
-- Name: COLUMN isolates_audit_old.temperature_range; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.temperature_range IS 'optimal growth temperature in celsius';


--
-- Name: COLUMN isolates_audit_old.temperature_class; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.temperature_class IS 'gives the optimal growt temperature range';


--
-- Name: COLUMN isolates_audit_old.salinity_class; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.salinity_class IS 'which salinity is optimal for the strain';


--
-- Name: COLUMN isolates_audit_old.motility; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.motility IS 'Ability of individual movement of the cell';


--
-- Name: COLUMN isolates_audit_old.sporulation; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.sporulation IS 'Ability of the cell to form spores';


--
-- Name: COLUMN isolates_audit_old.dsmz; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.dsmz IS 'dmsz(german collection of microorganism and cell cultures) identifier of the isolate';


--
-- Name: COLUMN isolates_audit_old.atcc; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.atcc IS 'dmsz(german collection of microorganism and cell cultures) identifier of the isolate';


--
-- Name: COLUMN isolates_audit_old.ph_range; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.ph_range IS 'pH values in which the isolate is able to exist';


--
-- Name: COLUMN isolates_audit_old.project; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.project IS 'project name';


--
-- Name: COLUMN isolates_audit_old.own; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.own IS 'owner';


--
-- Name: COLUMN isolates_audit_old.gram_stain; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.gram_stain IS 'Gives information if the strain is gram positive (0) or gram negative (-1) ???';


--
-- Name: COLUMN isolates_audit_old.culture_collection_label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.culture_collection_label IS 'name of the culture collection';


--
-- Name: COLUMN isolates_audit_old.study; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.study IS 'type of study the isolate was used for';


--
-- Name: COLUMN isolates_audit_old.sample_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN isolates_audit_old.sample_name IS 'name of the sample';


--
-- Name: journals; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE journals (
    gid integer NOT NULL,
    title text DEFAULT ''::text NOT NULL,
    publisher text DEFAULT ''::text NOT NULL,
    iso_abbr text DEFAULT ''::text NOT NULL,
    med_abbr text,
    homepage url,
    pissn text,
    eissn text,
    country text DEFAULT ''::text NOT NULL,
    pubstart text DEFAULT ''::text NOT NULL,
    lang text DEFAULT ''::text NOT NULL,
    nlmid text,
    created timestamp without time zone DEFAULT now() NOT NULL,
    updated timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE core.journals OWNER TO rkottman;

--
-- Name: TABLE journals; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE journals IS 'The journals articles are published. Most attributes are taken from www.pubmed.com entries';


--
-- Name: COLUMN journals.gid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN journals.gid IS 'genome identifier';


--
-- Name: COLUMN journals.title; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN journals.title IS 'name of journal';


--
-- Name: COLUMN journals.publisher; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN journals.publisher IS 'publisher of the journal';


--
-- Name: COLUMN journals.iso_abbr; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN journals.iso_abbr IS 'Abbreveation of journals established by ISO Standard';


--
-- Name: COLUMN journals.homepage; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN journals.homepage IS 'Homepage of journal';


--
-- Name: COLUMN journals.pissn; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN journals.pissn IS 'ISSN of journals print version';


--
-- Name: COLUMN journals.eissn; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN journals.eissn IS 'ISSN of journals electronic version';


--
-- Name: COLUMN journals.country; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN journals.country IS 'Home country of journal';


--
-- Name: COLUMN journals.pubstart; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN journals.pubstart IS 'date the journal startet to publish';


--
-- Name: COLUMN journals.lang; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN journals.lang IS 'Language of journal';


--
-- Name: COLUMN journals.nlmid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN journals.nlmid IS 'National Library of Medicine Identifier';


--
-- Name: journals_gid_seq; Type: SEQUENCE; Schema: core; Owner: rkottman
--

CREATE SEQUENCE journals_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.journals_gid_seq OWNER TO rkottman;

--
-- Name: journals_gid_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: rkottman
--

ALTER SEQUENCE journals_gid_seq OWNED BY journals.gid;


--
-- Name: logins; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE logins (
    logname character varying(40) NOT NULL,
    first_name character varying(20) DEFAULT ''::character varying NOT NULL,
    initials character varying(20) DEFAULT ''::character varying NOT NULL,
    last_name character varying(30) DEFAULT ''::character varying NOT NULL,
    descr text DEFAULT ''::text NOT NULL,
    join_date date DEFAULT now() NOT NULL,
    pass text NOT NULL
);


ALTER TABLE core.logins OWNER TO rkottman;

--
-- Name: TABLE logins; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE logins IS 'The the login names which use the Private Data Management';


--
-- Name: COLUMN logins.logname; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN logins.logname IS 'log in username';


--
-- Name: COLUMN logins.first_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN logins.first_name IS 'first name of user';


--
-- Name: COLUMN logins.initials; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN logins.initials IS 'initials of the middle name of teh user';


--
-- Name: COLUMN logins.last_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN logins.last_name IS 'last name of the user';


--
-- Name: COLUMN logins.descr; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN logins.descr IS 'description of the role of the user';


--
-- Name: COLUMN logins.join_date; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN logins.join_date IS 'date the user account was assigned to the database';


--
-- Name: mg_pooled_samples; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE mg_pooled_samples (
    study text NOT NULL,
    sample_label text NOT NULL,
    pool_label text DEFAULT ''::text NOT NULL
);


ALTER TABLE core.mg_pooled_samples OWNER TO rkottman;

--
-- Name: TABLE mg_pooled_samples; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE mg_pooled_samples IS 'Relation of pooled sample to original samples';


--
-- Name: COLUMN mg_pooled_samples.sample_label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN mg_pooled_samples.sample_label IS 'name of the sample used for sample pool';


--
-- Name: COLUMN mg_pooled_samples.pool_label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN mg_pooled_samples.pool_label IS 'name of the sample pool';


--
-- Name: mg_studies; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE mg_studies (
    study text NOT NULL,
    gcat_id text DEFAULT ''::text NOT NULL,
    title text DEFAULT ''::text NOT NULL,
    released date DEFAULT '0001-01-01 BC'::date NOT NULL,
    gpid integer DEFAULT (-1) NOT NULL,
    goldstamp text DEFAULT ''::text NOT NULL,
    img_oid text DEFAULT ''::text NOT NULL,
    CONSTRAINT mg_studies_gpid_check CHECK ((gpid >= (-1)))
);


ALTER TABLE core.mg_studies OWNER TO rkottman;

--
-- Name: TABLE mg_studies; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE mg_studies IS 'Information and identifier of metagenome studies';


--
-- Name: COLUMN mg_studies.study; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN mg_studies.study IS 'name of the study';


--
-- Name: COLUMN mg_studies.title; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN mg_studies.title IS 'title of the published study';


--
-- Name: COLUMN mg_studies.released; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN mg_studies.released IS 'date of data release';


--
-- Name: COLUMN mg_studies.goldstamp; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN mg_studies.goldstamp IS 'gold (Genomes [https://projects.mpi-bremen.de/megxnet/trac/search?q=wiki%3AOnLine OnLine] Database) sequence identifier';


--
-- Name: multiregion_members; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE multiregion_members (
    did text DEFAULT ''::text NOT NULL,
    did_auth text DEFAULT ''::text NOT NULL,
    lpos integer DEFAULT (-1) NOT NULL,
    rpos integer DEFAULT (-1) NOT NULL,
    strand boolean NOT NULL,
    rfeature text DEFAULT ''::text NOT NULL,
    label text DEFAULT ''::text NOT NULL,
    span_lpos integer DEFAULT (-1) NOT NULL,
    span_rpos integer DEFAULT (-1) NOT NULL,
    mfeature text NOT NULL,
    CONSTRAINT multiregion_members_lpos_check CHECK ((lpos > (-1))),
    CONSTRAINT multiregion_members_rpos_check1 CHECK ((rpos > (-1))),
    CONSTRAINT multiregion_members_span_lpos_check CHECK ((span_lpos > (-1))),
    CONSTRAINT multiregion_members_span_rpos_check CHECK ((span_rpos > (-1))),
    CONSTRAINT multiregion_members_within_span_check CHECK (((lpos >= span_lpos) AND (rpos <= span_rpos)))
);


ALTER TABLE core.multiregion_members OWNER TO rkottman;

--
-- Name: COLUMN multiregion_members.did; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN multiregion_members.did IS 'DNA identifier';


--
-- Name: COLUMN multiregion_members.strand; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN multiregion_members.strand IS 'location of the sequence on the genome on the leading or lagging strand';


--
-- Name: multiregions; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE multiregions (
    label text NOT NULL,
    feature text NOT NULL,
    span_lpos integer NOT NULL,
    span_rpos integer NOT NULL,
    prediction text DEFAULT ''::text NOT NULL,
    CONSTRAINT multiregions_span_lpos_check CHECK ((span_lpos > (-1))),
    CONSTRAINT multiregions_span_rpos_check CHECK ((span_rpos > (-1)))
);


ALTER TABLE core.multiregions OWNER TO rkottman;

--
-- Name: ncbi_tax_names; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE ncbi_tax_names (
    tax_id integer NOT NULL,
    tax_name text NOT NULL,
    unique_name text NOT NULL,
    name_class text
);


ALTER TABLE core.ncbi_tax_names OWNER TO rkottman;

--
-- Name: TABLE ncbi_tax_names; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE ncbi_tax_names IS 'taxonomic names and identifier derived from NCBI';


--
-- Name: COLUMN ncbi_tax_names.tax_id; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN ncbi_tax_names.tax_id IS 'taxonomic identifier';


--
-- Name: COLUMN ncbi_tax_names.tax_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN ncbi_tax_names.tax_name IS 'taxonomic name';


--
-- Name: ncbi_tax_nodes; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE ncbi_tax_nodes (
    tax_id integer NOT NULL,
    parent_tax_id integer,
    rank text DEFAULT ''::text NOT NULL,
    embl_code text,
    division_id integer,
    inherited_div_flag boolean,
    genetic_code_id integer,
    inherited_gc_flag boolean,
    mitochondrial_genetic_code_id integer,
    inherited_mgc_flag boolean,
    genbank_hidden_flag boolean,
    hidden_subtree_root_flag boolean,
    comments text,
    scientific_name text,
    parent_name text
);


ALTER TABLE core.ncbi_tax_nodes OWNER TO rkottman;

--
-- Name: COLUMN ncbi_tax_nodes.tax_id; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN ncbi_tax_nodes.tax_id IS 'taxonomic identifier';


--
-- Name: COLUMN ncbi_tax_nodes.genetic_code_id; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN ncbi_tax_nodes.genetic_code_id IS 'identifier for the genetic code used by this organism';


--
-- Name: COLUMN ncbi_tax_nodes.mitochondrial_genetic_code_id; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN ncbi_tax_nodes.mitochondrial_genetic_code_id IS 'identifier for the genetic code used for mitochondrial DNA in this organism';


--
-- Name: observation; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE observation (
    gid integer NOT NULL,
    regionid integer DEFAULT 0,
    tool_run_id integer DEFAULT 0,
    description text DEFAULT ''::text,
    toolresult text DEFAULT ''::text
);


ALTER TABLE core.observation OWNER TO rkottman;

--
-- Name: COLUMN observation.gid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN observation.gid IS 'genome identifier ???';


--
-- Name: COLUMN observation.regionid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN observation.regionid IS 'region identifier';


--
-- Name: COLUMN observation.tool_run_id; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN observation.tool_run_id IS 'tool run identifier';


--
-- Name: COLUMN observation.toolresult; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN observation.toolresult IS 'results obtained from the tool';


--
-- Name: observation_gid_seq; Type: SEQUENCE; Schema: core; Owner: rkottman
--

CREATE SEQUENCE observation_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.observation_gid_seq OWNER TO rkottman;

--
-- Name: observation_gid_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: rkottman
--

ALTER SEQUENCE observation_gid_seq OWNED BY observation.gid;


--
-- Name: organisms; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE organisms (
    genus text DEFAULT ''::text NOT NULL,
    species text DEFAULT ''::text NOT NULL,
    taxid integer DEFAULT (-1) NOT NULL
);


ALTER TABLE core.organisms OWNER TO rkottman;

--
-- Name: TABLE organisms; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE organisms IS 'Describes organisms in genus and species';


--
-- Name: COLUMN organisms.genus; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN organisms.genus IS 'genus name';


--
-- Name: COLUMN organisms.species; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN organisms.species IS 'species name';


--
-- Name: COLUMN organisms.taxid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN organisms.taxid IS 'taxonomic identifier';


--
-- Name: person_roles; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE person_roles (
    person text NOT NULL,
    role text NOT NULL
);


ALTER TABLE core.person_roles OWNER TO rkottman;

--
-- Name: TABLE person_roles; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE person_roles IS 'The roles a person can have';


--
-- Name: COLUMN person_roles.person; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN person_roles.person IS 'name of the user';


--
-- Name: COLUMN person_roles.role; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN person_roles.role IS 'role of the user';


--
-- Name: pfam_group_descr; Type: TABLE; Schema: core; Owner: ikostadi; Tablespace: 
--

CREATE TABLE pfam_group_descr (
    label text DEFAULT ''::text NOT NULL,
    pfam_version smallint DEFAULT (-1) NOT NULL,
    creator text DEFAULT "current_user"() NOT NULL,
    creation_date date DEFAULT ('now'::text)::date NOT NULL,
    descr text DEFAULT ''::text NOT NULL,
    remark text DEFAULT ''::text NOT NULL,
    url text DEFAULT ''::text
);


ALTER TABLE core.pfam_group_descr OWNER TO ikostadi;

--
-- Name: TABLE pfam_group_descr; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON TABLE pfam_group_descr IS 'Individually defines groups of PFAM domain models';


--
-- Name: COLUMN pfam_group_descr.label; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN pfam_group_descr.label IS 'User defined group name';


--
-- Name: COLUMN pfam_group_descr.pfam_version; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN pfam_group_descr.pfam_version IS 'Pfam version used to define group';


--
-- Name: COLUMN pfam_group_descr.creator; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN pfam_group_descr.creator IS 'Defines the user that created the Pfam group';


--
-- Name: COLUMN pfam_group_descr.creation_date; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN pfam_group_descr.creation_date IS 'Date of Pfam group creation';


--
-- Name: COLUMN pfam_group_descr.descr; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN pfam_group_descr.descr IS 'Rationale and motivation for defining a Pfam group';


--
-- Name: COLUMN pfam_group_descr.remark; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN pfam_group_descr.remark IS 'Field for additional comments / remarks on Pfam group';


--
-- Name: COLUMN pfam_group_descr.url; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN pfam_group_descr.url IS 'Link to documentation on this group. May refer for example to a page on the group wiki';


--
-- Name: pfam_groups; Type: TABLE; Schema: core; Owner: core_admin; Tablespace: 
--

CREATE TABLE pfam_groups (
    label text NOT NULL,
    pfam_23_acc text NOT NULL,
    pfam_24_acc text
);


ALTER TABLE core.pfam_groups OWNER TO core_admin;

--
-- Name: TABLE pfam_groups; Type: COMMENT; Schema: core; Owner: core_admin
--

COMMENT ON TABLE pfam_groups IS 'Defines the list of Pfam models in a group present in pfamA';


--
-- Name: COLUMN pfam_groups.label; Type: COMMENT; Schema: core; Owner: core_admin
--

COMMENT ON COLUMN pfam_groups.label IS 'Refers to the group name in pfam_group_descr';


--
-- Name: COLUMN pfam_groups.pfam_23_acc; Type: COMMENT; Schema: core; Owner: core_admin
--

COMMENT ON COLUMN pfam_groups.pfam_23_acc IS 'Refers to the Pfam 23.0 accession number of the family present in a group';


--
-- Name: COLUMN pfam_groups.pfam_24_acc; Type: COMMENT; Schema: core; Owner: core_admin
--

COMMENT ON COLUMN pfam_groups.pfam_24_acc IS 'Refers to the Pfam 24.0 accession number of the family present in a group';


--
-- Name: privs; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE privs (
    label character varying(80) NOT NULL,
    descr character varying(160) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE core.privs OWNER TO rkottman;

--
-- Name: TABLE privs; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE privs IS 'Privileges that can be assigned to roles';


--
-- Name: projects; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE projects (
    id integer DEFAULT project_pk_next() NOT NULL,
    samples integer DEFAULT 0 NOT NULL,
    label character varying(80) NOT NULL,
    descr text,
    CONSTRAINT projects_id_check CHECK ((id >= 0)),
    CONSTRAINT projects_samples_check CHECK ((samples >= 0))
);


ALTER TABLE core.projects OWNER TO rkottman;

--
-- Name: TABLE projects; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE projects IS 'All assignments can be project specific';


--
-- Name: COLUMN projects.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN projects.label IS 'name of project';


--
-- Name: COLUMN projects.descr; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN projects.descr IS 'description of project';


--
-- Name: role_links; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE role_links (
    role_label text NOT NULL,
    has_role text NOT NULL
);


ALTER TABLE core.role_links OWNER TO rkottman;

--
-- Name: TABLE role_links; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE role_links IS 'A role can have several other roles';


--
-- Name: role_privs; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE role_privs (
    role_label text NOT NULL,
    privil text NOT NULL
);


ALTER TABLE core.role_privs OWNER TO rkottman;

--
-- Name: TABLE role_privs; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE role_privs IS 'The privileges per role';


--
-- Name: roles; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE roles (
    label character varying(80) NOT NULL,
    descr text
);


ALTER TABLE core.roles OWNER TO rkottman;

--
-- Name: TABLE roles; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE roles IS 'The roles a person can be assigned to';


--
-- Name: COLUMN roles.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN roles.label IS 'name of the role';


--
-- Name: COLUMN roles.descr; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN roles.descr IS 'description of the role and authorizations';


--
-- Name: sample_measures; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE sample_measures (
    mid integer NOT NULL,
    sid integer,
    material text DEFAULT ''::text NOT NULL,
    param text NOT NULL,
    unit text NOT NULL,
    vals numeric[] NOT NULL,
    mcode text DEFAULT ''::text,
    conducted timestamp with time zone DEFAULT 'infinity'::timestamp with time zone NOT NULL,
    conducted_res date_resolution DEFAULT 'minute'::date_resolution NOT NULL,
    device text DEFAULT ''::text NOT NULL,
    project integer DEFAULT 0,
    own text DEFAULT 'megdb'::text,
    min numeric DEFAULT 'NaN'::numeric NOT NULL,
    max numeric DEFAULT 'NaN'::numeric NOT NULL,
    std numeric DEFAULT 'NaN'::numeric NOT NULL,
    meas_tot integer DEFAULT 0 NOT NULL,
    study text NOT NULL,
    sample_name text NOT NULL,
    CONSTRAINT sample_measures_meas_tot_check CHECK ((meas_tot >= 0))
);


ALTER TABLE core.sample_measures OWNER TO rkottman;

--
-- Name: TABLE sample_measures; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE sample_measures IS 'additional measurements conducted on the sample';


--
-- Name: COLUMN sample_measures.sid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_measures.sid IS 'The sample identifier FK to samples';


--
-- Name: COLUMN sample_measures.material; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_measures.material IS 'the exact material description of the part of sample on which measurement is conducted';


--
-- Name: COLUMN sample_measures.param; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_measures.param IS 'measured parameter e.g. depth or temperature';


--
-- Name: COLUMN sample_measures.unit; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_measures.unit IS 'unit of measurement e.g meter or degree celsius';


--
-- Name: COLUMN sample_measures.conducted; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_measures.conducted IS 'time the measurement was conducted';


--
-- Name: COLUMN sample_measures.device; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_measures.device IS 'name of the device used for the measurement';


--
-- Name: COLUMN sample_measures.project; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_measures.project IS 'project name';


--
-- Name: COLUMN sample_measures.own; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_measures.own IS 'owner';


--
-- Name: COLUMN sample_measures.min; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_measures.min IS 'minimum value of the measurement';


--
-- Name: COLUMN sample_measures.max; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_measures.max IS 'maximum value of the measurement';


--
-- Name: COLUMN sample_measures.std; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_measures.std IS 'standard derivation of the measurment';


--
-- Name: COLUMN sample_measures.study; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_measures.study IS 'type of study';


--
-- Name: COLUMN sample_measures.sample_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_measures.sample_name IS 'name of sample';


--
-- Name: sample_measures_mid_seq; Type: SEQUENCE; Schema: core; Owner: rkottman
--

CREATE SEQUENCE sample_measures_mid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.sample_measures_mid_seq OWNER TO rkottman;

--
-- Name: sample_measures_mid_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: rkottman
--

ALTER SEQUENCE sample_measures_mid_seq OWNED BY sample_measures.mid;


--
-- Name: sample_pools; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE sample_pools (
    label text NOT NULL,
    study text NOT NULL
);


ALTER TABLE core.sample_pools OWNER TO rkottman;

--
-- Name: TABLE sample_pools; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE sample_pools IS 'Sample sets witch are thrown together (GOS)';


--
-- Name: COLUMN sample_pools.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_pools.label IS 'name of the sample pool';


--
-- Name: COLUMN sample_pools.study; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_pools.study IS 'name of the study';


--
-- Name: sample_set_mdata; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE sample_set_mdata (
    label text NOT NULL,
    descr text DEFAULT ''::text NOT NULL,
    project integer DEFAULT 0,
    own text DEFAULT 'megdb'::text,
    cdate timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE core.sample_set_mdata OWNER TO rkottman;

--
-- Name: TABLE sample_set_mdata; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE sample_set_mdata IS 'Metadata for sample sets';


--
-- Name: COLUMN sample_set_mdata.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_set_mdata.label IS 'name of the sample set';


--
-- Name: COLUMN sample_set_mdata.descr; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_set_mdata.descr IS 'description of the sample set';


--
-- Name: COLUMN sample_set_mdata.own; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_set_mdata.own IS 'owner';


--
-- Name: COLUMN sample_set_mdata.cdate; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_set_mdata.cdate IS 'date and time data was imported into the database';


--
-- Name: sample_sets; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE sample_sets (
    label text NOT NULL,
    study text NOT NULL,
    sample_name text NOT NULL
);


ALTER TABLE core.sample_sets OWNER TO rkottman;

--
-- Name: TABLE sample_sets; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE sample_sets IS 'free independently created sample sets';


--
-- Name: COLUMN sample_sets.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_sets.label IS 'name of study';


--
-- Name: COLUMN sample_sets.study; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_sets.study IS 'name of study';


--
-- Name: COLUMN sample_sets.sample_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sample_sets.sample_name IS 'name of sample';


--
-- Name: sampleid_seq; Type: SEQUENCE; Schema: core; Owner: rkottman
--

CREATE SEQUENCE sampleid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.sampleid_seq OWNER TO rkottman;

--
-- Name: samples_audit_old; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE samples_audit_old (
    auditor text DEFAULT "current_user"() NOT NULL,
    op "char" NOT NULL,
    atime timestamp without time zone DEFAULT now() NOT NULL,
    sid integer DEFAULT 0 NOT NULL,
    max_uncertain numeric DEFAULT 'NaN'::numeric,
    date_taken timestamp with time zone DEFAULT 'infinity'::timestamp with time zone NOT NULL,
    date_res date_resolution DEFAULT 'minute'::date_resolution NOT NULL,
    label text DEFAULT ''::text NOT NULL,
    material text DEFAULT ''::text NOT NULL,
    habitat text DEFAULT ''::text NOT NULL,
    hab_lite text DEFAULT ''::text NOT NULL,
    country text DEFAULT ''::text NOT NULL,
    project integer DEFAULT 0,
    own text DEFAULT 'megdb'::text,
    internalcomment text DEFAULT ''::text NOT NULL,
    publiccomment text DEFAULT ''::text NOT NULL,
    geom public.geometry,
    study text DEFAULT ''::text NOT NULL,
    pool smallint DEFAULT 0 NOT NULL,
    id integer
);


ALTER TABLE core.samples_audit_old OWNER TO rkottman;

--
-- Name: COLUMN samples_audit_old.sid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples_audit_old.sid IS 'sample identifier';


--
-- Name: COLUMN samples_audit_old.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN samples_audit_old.label IS 'sample name';


--
-- Name: samples_id_seq; Type: SEQUENCE; Schema: core; Owner: rkottman
--

CREATE SEQUENCE samples_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.samples_id_seq OWNER TO rkottman;

--
-- Name: samples_id_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: rkottman
--

ALTER SEQUENCE samples_id_seq OWNED BY samples.id;


--
-- Name: samplingsites_id_seq; Type: SEQUENCE; Schema: core; Owner: rkottman
--

CREATE SEQUENCE samplingsites_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.samplingsites_id_seq OWNER TO rkottman;

--
-- Name: samplingsites_id_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: rkottman
--

ALTER SEQUENCE samplingsites_id_seq OWNED BY samplingsites.id;


--
-- Name: seq_regions; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE seq_regions (
    msid bigint NOT NULL,
    gi bigint DEFAULT (-1) NOT NULL,
    lpos integer DEFAULT (-1) NOT NULL,
    rpos integer DEFAULT (-1) NOT NULL,
    frame smallint DEFAULT 0 NOT NULL,
    label text DEFAULT ''::text NOT NULL,
    strand boolean DEFAULT false NOT NULL,
    prediction text DEFAULT ''::text NOT NULL,
    feature text DEFAULT ''::text NOT NULL,
    did text DEFAULT ''::text NOT NULL,
    did_auth text DEFAULT ''::text NOT NULL,
    rid text DEFAULT ''::text NOT NULL,
    rid_type text DEFAULT ''::text NOT NULL,
    CONSTRAINT seq_regions_frame_check CHECK ((frame = ANY (ARRAY[(-3), (-2), (-1), 0, 1, 2, 3]))),
    CONSTRAINT seq_regions_lpos_check CHECK ((lpos >= (-1))),
    CONSTRAINT seq_regions_lpos_check1 CHECK ((lpos >= (-1)))
);


ALTER TABLE core.seq_regions OWNER TO rkottman;

--
-- Name: TABLE seq_regions; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE seq_regions IS 'Region on DNA Sequence with certain feature and position';


--
-- Name: COLUMN seq_regions.gi; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN seq_regions.gi IS 'GenBank sequence identifier';


--
-- Name: COLUMN seq_regions.lpos; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN seq_regions.lpos IS 'left position';


--
-- Name: COLUMN seq_regions.rpos; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN seq_regions.rpos IS 'right position';


--
-- Name: COLUMN seq_regions.did; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN seq_regions.did IS 'The DNA sequence identifier';


--
-- Name: COLUMN seq_regions.did_auth; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN seq_regions.did_auth IS 'The authority of the DNA sequence identifier';


--
-- Name: COLUMN seq_regions.rid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN seq_regions.rid IS 'region identifier';


--
-- Name: sequenceentries; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE sequenceentries (
    gid integer NOT NULL,
    gbkacc text NOT NULL,
    gbkgi text,
    taxid integer DEFAULT 0 NOT NULL,
    taxdesc text DEFAULT ''::text NOT NULL,
    clonelabel text DEFAULT ''::text NOT NULL,
    clone_lib text DEFAULT ''::text NOT NULL,
    collec_by text DEFAULT ''::text NOT NULL,
    collec_date text DEFAULT ''::text NOT NULL,
    eco_type text DEFAULT ''::text NOT NULL,
    env_sample smallint DEFAULT (-1) NOT NULL,
    isolate text DEFAULT ''::text NOT NULL,
    label text DEFAULT ''::text NOT NULL,
    lab_host text DEFAULT ''::text NOT NULL,
    pcr_primers text DEFAULT ''::text NOT NULL,
    plasmid text DEFAULT ''::text NOT NULL,
    location text DEFAULT ''::text NOT NULL,
    lat_lon text DEFAULT ''::text NOT NULL,
    country text DEFAULT ''::text NOT NULL,
    organism text DEFAULT ''::text NOT NULL,
    mol_type text DEFAULT ''::text NOT NULL,
    note text DEFAULT ''::text NOT NULL,
    definition text DEFAULT ''::text NOT NULL,
    topology text DEFAULT ''::text NOT NULL,
    strain text DEFAULT ''::text NOT NULL,
    sub_clone text DEFAULT ''::text NOT NULL,
    sub_species text DEFAULT ''::text NOT NULL,
    sub_strain text DEFAULT ''::text NOT NULL,
    specific_host text DEFAULT ''::text NOT NULL,
    chromsome text DEFAULT ''::text NOT NULL,
    devision text DEFAULT ''::text NOT NULL,
    ncbi_project integer DEFAULT 0 NOT NULL,
    seq_cat text DEFAULT ''::text NOT NULL,
    seq_status text DEFAULT ''::text NOT NULL,
    insdxml text DEFAULT ''::text NOT NULL,
    CONSTRAINT sequenceentries_env_sample_check CHECK (((env_sample >= (-1)) AND (env_sample <= 1)))
);


ALTER TABLE core.sequenceentries OWNER TO rkottman;

--
-- Name: TABLE sequenceentries; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE sequenceentries IS 'Metadata about a molecular sequence. Allmost all attributes vlaues are taken from GenBank';


--
-- Name: COLUMN sequenceentries.gid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.gid IS 'genome identifier ???';


--
-- Name: COLUMN sequenceentries.gbkacc; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.gbkacc IS 'GenBank accessionnumber';


--
-- Name: COLUMN sequenceentries.gbkgi; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.gbkgi IS 'GenBank GI (general identifier) number';


--
-- Name: COLUMN sequenceentries.taxid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.taxid IS 'Identifier of NCBI taxanomy entry';


--
-- Name: COLUMN sequenceentries.taxdesc; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.taxdesc IS 'Textual representation of NCBI taxanomy entry';


--
-- Name: COLUMN sequenceentries.clonelabel; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.clonelabel IS 'Corresponds to clone qualifier in genbank';


--
-- Name: COLUMN sequenceentries.clone_lib; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.clone_lib IS 'Corresponds to clone_lib qualifier in genbank';


--
-- Name: COLUMN sequenceentries.collec_by; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.collec_by IS 'Corresponds to collected_by qualifier in genbank';


--
-- Name: COLUMN sequenceentries.collec_date; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.collec_date IS 'Corresponds to collection_date qualifier in genbank';


--
-- Name: COLUMN sequenceentries.eco_type; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.eco_type IS 'Corresponds to ecotype qualifier in genbank';


--
-- Name: COLUMN sequenceentries.env_sample; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.env_sample IS 'Whether sequence is from environmental sample: -1=unknown 0=no 1=yes';


--
-- Name: COLUMN sequenceentries.isolate; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.isolate IS 'Corresponds to isolate qualifier in genbank';


--
-- Name: COLUMN sequenceentries.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.label IS 'Corresponds to label qualifier in genbank';


--
-- Name: COLUMN sequenceentries.lab_host; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.lab_host IS 'Corresponds to lab_host qualifier in genbank';


--
-- Name: COLUMN sequenceentries.pcr_primers; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.pcr_primers IS 'Corresponds to PCR_primers qualifier in genbank';


--
-- Name: COLUMN sequenceentries.plasmid; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.plasmid IS 'Corresponds to plasmid qualifier in genbank';


--
-- Name: COLUMN sequenceentries.location; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.location IS 'Corresponds to isolation_source qualifier in genbank';


--
-- Name: COLUMN sequenceentries.lat_lon; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.lat_lon IS 'Corresponds to lat_lon qualifier in genbank';


--
-- Name: COLUMN sequenceentries.country; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.country IS 'Corresponds to country qualifier in genbank';


--
-- Name: COLUMN sequenceentries.organism; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.organism IS 'Corresponds to mandatory organism qualifier in genbank';


--
-- Name: COLUMN sequenceentries.mol_type; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.mol_type IS 'Corresponds to mandatory mol_type qualifier in genbank';


--
-- Name: COLUMN sequenceentries.note; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.note IS 'Corresponds to note qualifier in genbank';


--
-- Name: COLUMN sequenceentries.definition; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.definition IS 'Corresponds to DEFINITION line in genbank entry';


--
-- Name: COLUMN sequenceentries.topology; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.topology IS 'The topology of the sequence: circular or linear';


--
-- Name: COLUMN sequenceentries.strain; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.strain IS 'Corresponds to strain qualifier in genbank';


--
-- Name: COLUMN sequenceentries.sub_clone; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.sub_clone IS 'Corresponds to sub_clone qualifier in genbank';


--
-- Name: COLUMN sequenceentries.sub_species; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.sub_species IS 'Corresponds to sub_species qualifier in genbank';


--
-- Name: COLUMN sequenceentries.sub_strain; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.sub_strain IS 'Corresponds to sub_strain qualifier in genbank';


--
-- Name: COLUMN sequenceentries.specific_host; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.specific_host IS 'Corresponds to specific_host qualifier in genbank';


--
-- Name: COLUMN sequenceentries.devision; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.devision IS 'The database devision of genbank as given in LOCUS line';


--
-- Name: COLUMN sequenceentries.insdxml; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN sequenceentries.insdxml IS 'The INSD xml file of this sequence';


--
-- Name: sequenceentries_gid_seq; Type: SEQUENCE; Schema: core; Owner: rkottman
--

CREATE SEQUENCE sequenceentries_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE core.sequenceentries_gid_seq OWNER TO rkottman;

--
-- Name: sequenceentries_gid_seq; Type: SEQUENCE OWNED BY; Schema: core; Owner: rkottman
--

ALTER SEQUENCE sequenceentries_gid_seq OWNED BY sequenceentries.gid;


--
-- Name: studies; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE studies (
    label text NOT NULL,
    full_name text DEFAULT ''::text NOT NULL,
    descr_short text DEFAULT ''::text NOT NULL,
    abstract text DEFAULT ''::text NOT NULL
);


ALTER TABLE core.studies OWNER TO rkottman;

--
-- Name: TABLE studies; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE studies IS 'Gives information about the study with a short name and an abstract';


--
-- Name: COLUMN studies.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN studies.label IS 'name of study';


--
-- Name: COLUMN studies.full_name; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN studies.full_name IS 'full name of study';


--
-- Name: COLUMN studies.descr_short; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN studies.descr_short IS 'short description of the study';


--
-- Name: COLUMN studies.abstract; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN studies.abstract IS 'abstract from the published study';


--
-- Name: tags; Type: TABLE; Schema: core; Owner: ikostadi; Tablespace: 
--

CREATE TABLE tags (
    tag character varying(30) NOT NULL,
    time_added timestamp with time zone DEFAULT now() NOT NULL,
    tag_count integer DEFAULT 1 NOT NULL,
    CONSTRAINT tag_syntax_check CHECK (((tag)::text ~ '[a-z0-9][-a-z0-9 :'']*[a-z0-9]'::text)),
    CONSTRAINT tags_tag_count_check CHECK ((tag_count >= 0))
);


ALTER TABLE core.tags OWNER TO ikostadi;

--
-- Name: TABLE tags; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON TABLE tags IS 'Holds the unique lower case variants of all tags ever used the time they were introduced and their count. If a tag is not in use anymore its count is set to zero but it is NOT deleted.';


--
-- Name: COLUMN tags.tag; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN tags.tag IS 'lower case spelling of tag';


--
-- Name: COLUMN tags.time_added; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN tags.time_added IS 'when the tag was first introduced';


--
-- Name: COLUMN tags.tag_count; Type: COMMENT; Schema: core; Owner: ikostadi
--

COMMENT ON COLUMN tags.tag_count IS 'how many entites are tagged with this tag';


--
-- Name: tool_dna_runs; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE tool_dna_runs (
    label text DEFAULT ''::text NOT NULL,
    ver text DEFAULT ''::text NOT NULL,
    job_submitted timestamp with time zone DEFAULT now() NOT NULL,
    job_finished timestamp with time zone DEFAULT 'infinity'::timestamp with time zone NOT NULL,
    who text DEFAULT "current_user"() NOT NULL,
    seq_set text
);


ALTER TABLE core.tool_dna_runs OWNER TO rkottman;

--
-- Name: TABLE tool_dna_runs; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE tool_dna_runs IS 'Who made let which tool analyse which set of DNA and when';


--
-- Name: COLUMN tool_dna_runs.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN tool_dna_runs.label IS 'Name of the tool';


--
-- Name: COLUMN tool_dna_runs.ver; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN tool_dna_runs.ver IS 'Version of the tool';


--
-- Name: COLUMN tool_dna_runs.job_submitted; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN tool_dna_runs.job_submitted IS 'Time the job was started/submitted';


--
-- Name: COLUMN tool_dna_runs.job_finished; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN tool_dna_runs.job_finished IS 'Time the job finished';


--
-- Name: COLUMN tool_dna_runs.who; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN tool_dna_runs.who IS 'Name of user letting the tool run';


--
-- Name: COLUMN tool_dna_runs.seq_set; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN tool_dna_runs.seq_set IS 'Name of DNA sequence set';


--
-- Name: tool_versions; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE tool_versions (
    label text NOT NULL,
    ver text NOT NULL
);


ALTER TABLE core.tool_versions OWNER TO rkottman;

--
-- Name: TABLE tool_versions; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE tool_versions IS 'Different versions of the collected software tools';


--
-- Name: tools; Type: TABLE; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE TABLE tools (
    label text NOT NULL,
    descr text DEFAULT ''::text NOT NULL,
    url text DEFAULT ''::text NOT NULL,
    cat text DEFAULT ''::text NOT NULL,
    remark text DEFAULT ''::text NOT NULL,
    ctime timestamp with time zone DEFAULT now() NOT NULL,
    mtime timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE core.tools OWNER TO rkottman;

--
-- Name: TABLE tools; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON TABLE tools IS 'Overview of exisitng bioinfomatic tools';


--
-- Name: COLUMN tools.label; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN tools.label IS 'name of the tool';


--
-- Name: COLUMN tools.descr; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN tools.descr IS 'description of the tool';


--
-- Name: COLUMN tools.url; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN tools.url IS 'The homepage of the tool';


--
-- Name: COLUMN tools.cat; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN tools.cat IS 'The main category this tool belongs to e.g. assambler similarity search etc.';


--
-- Name: COLUMN tools.remark; Type: COMMENT; Schema: core; Owner: rkottman
--

COMMENT ON COLUMN tools.remark IS 'A remark on this entry';


SET search_path = cv, pg_catalog;

--
-- Name: assembly_status; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE assembly_status (
    term text NOT NULL,
    descr text
);


ALTER TABLE cv.assembly_status OWNER TO rkottman;

--
-- Name: TABLE assembly_status; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON TABLE assembly_status IS 'What technical type of sequence and  in which assembly status it is raw_read, end_sequence, read, contig, scaffold';


--
-- Name: biotic_relationship; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE biotic_relationship (
    term text NOT NULL,
    descr text
);


ALTER TABLE cv.biotic_relationship OWNER TO rkottman;

--
-- Name: TABLE biotic_relationship; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON TABLE biotic_relationship IS 'What Is it free-living or in a host and if the latter what type of relationship is observed (e.g. pathogen, commensal, symbiont, opportunist)';


--
-- Name: envo_lite; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE envo_lite (
    term text DEFAULT ''::text NOT NULL,
    descr text DEFAULT ''::text NOT NULL,
    parent text DEFAULT ''::text NOT NULL,
    hlevel text DEFAULT ''::text NOT NULL,
    envo_id text DEFAULT ''::text NOT NULL
);


ALTER TABLE cv.envo_lite OWNER TO rkottman;

--
-- Name: estim_codes; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE estim_codes (
    term text DEFAULT ''::text NOT NULL,
    descr text DEFAULT ''::text NOT NULL
);


ALTER TABLE cv.estim_codes OWNER TO rkottman;

--
-- Name: TABLE estim_codes; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON TABLE estim_codes IS 'Controlled vocabluary of how lat/lon a geographic location  was obtained';


--
-- Name: gencodes; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE gencodes (
    code_id smallint NOT NULL,
    label text NOT NULL,
    code text NOT NULL,
    starts text NOT NULL
);


ALTER TABLE cv.gencodes OWNER TO rkottman;

--
-- Name: genome_materials; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE genome_materials (
    term text NOT NULL,
    descr text
);


ALTER TABLE cv.genome_materials OWNER TO rkottman;

--
-- Name: TABLE genome_materials; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON TABLE genome_materials IS 'Genomic material which was sequenced e.g. chromosome, plasmid, segemnt';


--
-- Name: genome_project_status; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE genome_project_status (
    term text DEFAULT ''::text NOT NULL,
    descr text DEFAULT ''::text NOT NULL
);


ALTER TABLE cv.genome_project_status OWNER TO rkottman;

--
-- Name: habitat; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE habitat (
    term text DEFAULT ''::text NOT NULL,
    descr text DEFAULT ''::text NOT NULL
);


ALTER TABLE cv.habitat OWNER TO rkottman;

--
-- Name: habitat_lite; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE habitat_lite (
    term text NOT NULL,
    descr text DEFAULT ''::text NOT NULL
);


ALTER TABLE cv.habitat_lite OWNER TO rkottman;

--
-- Name: COLUMN habitat_lite.term; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON COLUMN habitat_lite.term IS 'Term of habiatat lite version 0.1';


--
-- Name: insdc_features; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE insdc_features (
    term text NOT NULL,
    descr text
);


ALTER TABLE cv.insdc_features OWNER TO rkottman;

--
-- Name: mcodes; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE mcodes (
    term text NOT NULL,
    descr text NOT NULL
);


ALTER TABLE cv.mcodes OWNER TO rkottman;

--
-- Name: TABLE mcodes; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON TABLE mcodes IS 'Cv about how measure value was obtained';


--
-- Name: COLUMN mcodes.descr; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON COLUMN mcodes.descr IS 'Description of the term';


--
-- Name: parameters; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE parameters (
    label text NOT NULL,
    unit text NOT NULL,
    unicode text DEFAULT ''::text NOT NULL,
    html_symbol text DEFAULT ''::text NOT NULL,
    descr text DEFAULT ''::text NOT NULL
);


ALTER TABLE cv.parameters OWNER TO rkottman;

--
-- Name: TABLE parameters; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON TABLE parameters IS 'unit must use ASCII compatible symbology';


--
-- Name: COLUMN parameters.label; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON COLUMN parameters.label IS 'common name of unit';


--
-- Name: COLUMN parameters.unit; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON COLUMN parameters.unit IS 'Unit must be ASCII compatible symbology';


--
-- Name: COLUMN parameters.unicode; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON COLUMN parameters.unicode IS 'utf-8 coding of unit symbol';


--
-- Name: sample_materials; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE sample_materials (
    term text DEFAULT ''::text NOT NULL,
    descr text DEFAULT ''::text NOT NULL
);


ALTER TABLE cv.sample_materials OWNER TO rkottman;

--
-- Name: TABLE sample_materials; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON TABLE sample_materials IS 'Terms for describing the physical material that was sampled';


--
-- Name: seq_approaches; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE seq_approaches (
    term text NOT NULL,
    descr text DEFAULT ''::text NOT NULL
);


ALTER TABLE cv.seq_approaches OWNER TO rkottman;

--
-- Name: TABLE seq_approaches; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON TABLE seq_approaches IS 'Terms for describing the different sequencing approaches e.g. WGS or clone-by-clone';


--
-- Name: seq_methods; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE seq_methods (
    term text DEFAULT ''::text NOT NULL,
    descr text DEFAULT ''::text NOT NULL
);


ALTER TABLE cv.seq_methods OWNER TO rkottman;

--
-- Name: TABLE seq_methods; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON TABLE seq_methods IS 'Terms for desribing sequencing methods e.g. sanger, pyro etc.';


--
-- Name: seq_platforms; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE seq_platforms (
    term text NOT NULL,
    descr text DEFAULT ''::text NOT NULL
);


ALTER TABLE cv.seq_platforms OWNER TO rkottman;

--
-- Name: TABLE seq_platforms; Type: COMMENT; Schema: cv; Owner: rkottman
--

COMMENT ON TABLE seq_platforms IS 'Terms describing the platforms used for sequencing, the machines like e.g. 454 titanium';


--
-- Name: unit_definitions; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE unit_definitions (
    unit_name text NOT NULL,
    std_symbol text NOT NULL,
    ascii_symbol text DEFAULT ''::text,
    html_symbol text DEFAULT ''::text,
    quantity text DEFAULT ''::text,
    definition text DEFAULT ''::text,
    si_status character(1) DEFAULT ''::bpchar,
    si_base text DEFAULT ''::text,
    CONSTRAINT unit_definitions_si_status_check CHECK ((si_status = ANY (ARRAY['b'::bpchar, 'd'::bpchar, 'o'::bpchar, 'a'::bpchar, ''::bpchar])))
);


ALTER TABLE cv.unit_definitions OWNER TO rkottman;

--
-- Name: verification_codes; Type: TABLE; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE TABLE verification_codes (
    term text NOT NULL,
    descr text DEFAULT ''::text NOT NULL
);


ALTER TABLE cv.verification_codes OWNER TO rkottman;

SET search_path = elayers, pg_catalog;

--
-- Name: boundaries; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE boundaries (
    gid integer NOT NULL,
    objectid integer,
    iso3_code character varying,
    status character varying,
    capital character varying,
    terr_id integer,
    terr_name character varying,
    color_code character varying,
    shape_leng numeric,
    shape_le_1 numeric,
    shape_area numeric,
    geom public.geometry
);


ALTER TABLE elayers.boundaries OWNER TO rkottman;

--
-- Name: chlorophyll; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE chlorophyll (
    woa05_id integer DEFAULT 0 NOT NULL,
    season smallint DEFAULT (-1) NOT NULL,
    yr integer DEFAULT (-1) NOT NULL,
    val numeric DEFAULT (-1) NOT NULL,
    gid integer NOT NULL,
    geom public.geometry,
    sampling_size integer DEFAULT 0 NOT NULL,
    max_covar integer,
    CONSTRAINT enforce_dims_geom CHECK ((public.ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'MULTIPOLYGON'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.srid(geom) = (-1))),
    CONSTRAINT pos_value CHECK (((val = (- (1)::numeric)) OR (val >= (0)::numeric))),
    CONSTRAINT year_range CHECK (((((yr >= 1997) AND (yr <= 2006)) OR (yr = (-1))) OR (yr = 0))),
    CONSTRAINT zero_pos_sampling_size CHECK ((sampling_size >= 0))
);


ALTER TABLE elayers.chlorophyll OWNER TO rkottman;

--
-- Name: TABLE chlorophyll; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON TABLE chlorophyll IS 'Normalised chlorophyll layer from SeaWIFS';


--
-- Name: COLUMN chlorophyll.yr; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN chlorophyll.yr IS 'Year of measurement';


--
-- Name: COLUMN chlorophyll.val; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN chlorophyll.val IS 'The measured chlorophyll value';


--
-- Name: chlorophyll_gid_seq; Type: SEQUENCE; Schema: elayers; Owner: rkottman
--

CREATE SEQUENCE chlorophyll_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE elayers.chlorophyll_gid_seq OWNER TO rkottman;

--
-- Name: chlorophyll_gid_seq; Type: SEQUENCE OWNED BY; Schema: elayers; Owner: rkottman
--

ALTER SEQUENCE chlorophyll_gid_seq OWNED BY chlorophyll.gid;


SET default_with_oids = true;

--
-- Name: country; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE country (
    gid integer,
    fips_admin character varying,
    gmi_admin character varying,
    admin_name character varying,
    fips_cntry character varying,
    gmi_cntry character varying,
    cntry_name character varying,
    region character varying,
    continent character varying,
    pop_admin integer,
    sqkm_admin double precision,
    sqmi_admin double precision,
    type_eng character varying,
    type_loc character varying,
    color_map character varying,
    the_geom public.geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((public.ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((public.geometrytype(the_geom) = 'MULTIPOLYGON'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((public.srid(the_geom) = (-1)))
);


ALTER TABLE elayers.country OWNER TO rkottman;

--
-- Name: lake_quality_po; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE lake_quality_po (
    gid integer,
    id integer,
    ims_id integer,
    lake character varying,
    geo_reg character varying,
    gems_name character varying,
    area integer,
    volume bigint,
    max_depth bigint,
    residence bigint,
    tds integer,
    na_plus double precision,
    k_plus double precision,
    ca_plus_plus double precision,
    mg_plus_plus double precision,
    so4_minus_minus double precision,
    cl_minus double precision,
    hco3_minus double precision,
    sio2 double precision,
    po4_p double precision,
    no3_n double precision,
    the_geom public.geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((public.ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((public.geometrytype(the_geom) = 'MULTIPOLYGON'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((public.srid(the_geom) = (-1)))
);


ALTER TABLE elayers.lake_quality_po OWNER TO rkottman;

SET default_with_oids = false;

--
-- Name: longhurst_regions; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE longhurst_regions (
    gid integer NOT NULL,
    provcode character varying(5) NOT NULL,
    provdescr character varying(100),
    x numeric,
    y numeric,
    area_m2 numeric,
    geom public.geometry,
    book_pages text DEFAULT ''::text NOT NULL,
    synopsis text DEFAULT ''::text NOT NULL,
    extent_descr text DEFAULT ''::text NOT NULL,
    remark text DEFAULT ''::text NOT NULL,
    CONSTRAINT enforce_dims_geom CHECK ((public.st_ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'MULTIPOLYGON'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.st_srid(geom) = 4326))
);


ALTER TABLE elayers.longhurst_regions OWNER TO rkottman;

--
-- Name: COLUMN longhurst_regions.book_pages; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN longhurst_regions.book_pages IS 'Page numbers covering all citations from Longurst';


--
-- Name: COLUMN longhurst_regions.synopsis; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN longhurst_regions.synopsis IS 'Synopsis citation of Longurst';


--
-- Name: COLUMN longhurst_regions.extent_descr; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN longhurst_regions.extent_descr IS 'Extent of the Province citation of Longurst';


--
-- Name: COLUMN longhurst_regions.remark; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN longhurst_regions.remark IS 'Curator comment on the way the data was derived. ';


--
-- Name: longhurst_regions_gid_seq; Type: SEQUENCE; Schema: elayers; Owner: rkottman
--

CREATE SEQUENCE longhurst_regions_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE elayers.longhurst_regions_gid_seq OWNER TO rkottman;

--
-- Name: longhurst_regions_gid_seq; Type: SEQUENCE OWNED BY; Schema: elayers; Owner: rkottman
--

ALTER SEQUENCE longhurst_regions_gid_seq OWNED BY longhurst_regions.gid;


SET default_with_oids = true;

--
-- Name: marine_protected_area; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE marine_protected_area (
    gid integer,
    meta_data character varying,
    cntry_name character varying,
    sovereign character varying,
    iso_2_code character varying,
    iso_3_code character varying,
    geo_id integer,
    geo_region character varying,
    geo_subreg character varying,
    y_2002 bigint,
    the_geom public.geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((public.ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((public.geometrytype(the_geom) = 'MULTIPOLYGON'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((public.srid(the_geom) = (-1)))
);


ALTER TABLE elayers.marine_protected_area OWNER TO rkottman;

SET default_with_oids = false;

--
-- Name: ocean_limits; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE ocean_limits (
    iho_id character varying,
    label character varying NOT NULL,
    old_geom public.geometry,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.st_ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'MULTIPOLYGON'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.st_srid(geom) = 4326))
);


ALTER TABLE elayers.ocean_limits OWNER TO rkottman;

--
-- Name: seasons; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE seasons (
    season text NOT NULL,
    code smallint NOT NULL
);


ALTER TABLE elayers.seasons OWNER TO rkottman;

--
-- Name: TABLE seasons; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON TABLE seasons IS 'Standard season coding mostly used as lookup table';


--
-- Name: standard_levels; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE standard_levels (
    lev integer,
    depth integer NOT NULL
);


ALTER TABLE elayers.standard_levels OWNER TO rkottman;

--
-- Name: whale_falls; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE whale_falls (
    location_name text,
    lat double precision NOT NULL,
    lon double precision NOT NULL,
    depth double precision NOT NULL,
    natural_implanted text,
    whale_species text,
    estimated_wet_weight text,
    size_m text,
    osedax text,
    remark text,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.st_ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'POINT'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.st_srid(geom) = 4326))
);


ALTER TABLE elayers.whale_falls OWNER TO rkottman;

--
-- Name: woa05_nitrate; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE woa05_nitrate (
    woa05_id integer DEFAULT 0 NOT NULL,
    season smallint DEFAULT (-1) NOT NULL,
    depth integer DEFAULT (-1) NOT NULL,
    val numeric DEFAULT (-1) NOT NULL,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'MULTIPOLYGON'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.srid(geom) = (-1)))
);


ALTER TABLE elayers.woa05_nitrate OWNER TO rkottman;

--
-- Name: TABLE woa05_nitrate; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON TABLE woa05_nitrate IS 'From WOA 2005';


--
-- Name: COLUMN woa05_nitrate.season; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_nitrate.season IS 'Season of measurement see elayers.seasons';


--
-- Name: COLUMN woa05_nitrate.depth; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_nitrate.depth IS 'Depth of measurement';


--
-- Name: COLUMN woa05_nitrate.val; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_nitrate.val IS 'The measured value';


--
-- Name: woa05_nitrate_stability; Type: TABLE; Schema: elayers; Owner: ikostadi; Tablespace: 
--

CREATE TABLE woa05_nitrate_stability (
    geom public.geometry,
    val numeric,
    depth integer
);


ALTER TABLE elayers.woa05_nitrate_stability OWNER TO ikostadi;

--
-- Name: woa05_oxygen_dissolved; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE woa05_oxygen_dissolved (
    woa05_id integer DEFAULT 0 NOT NULL,
    season smallint DEFAULT (-1) NOT NULL,
    depth integer DEFAULT (-1) NOT NULL,
    val numeric DEFAULT (-1) NOT NULL,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'MULTIPOLYGON'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.srid(geom) = (-1)))
);


ALTER TABLE elayers.woa05_oxygen_dissolved OWNER TO rkottman;

--
-- Name: TABLE woa05_oxygen_dissolved; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON TABLE woa05_oxygen_dissolved IS 'From WOA 2005';


--
-- Name: COLUMN woa05_oxygen_dissolved.season; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_oxygen_dissolved.season IS 'Season of measurement see elayers.seasons';


--
-- Name: COLUMN woa05_oxygen_dissolved.depth; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_oxygen_dissolved.depth IS 'Depth of measurement';


--
-- Name: COLUMN woa05_oxygen_dissolved.val; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_oxygen_dissolved.val IS 'The measured value';


--
-- Name: woa05_oxygen_dissolved_stability; Type: TABLE; Schema: elayers; Owner: ikostadi; Tablespace: 
--

CREATE TABLE woa05_oxygen_dissolved_stability (
    geom public.geometry,
    val numeric,
    depth integer
);


ALTER TABLE elayers.woa05_oxygen_dissolved_stability OWNER TO ikostadi;

--
-- Name: woa05_oxygen_saturation; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE woa05_oxygen_saturation (
    woa05_id integer DEFAULT 0 NOT NULL,
    season smallint DEFAULT (-1) NOT NULL,
    depth integer DEFAULT (-1) NOT NULL,
    val numeric DEFAULT (-1) NOT NULL,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'MULTIPOLYGON'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.srid(geom) = (-1)))
);


ALTER TABLE elayers.woa05_oxygen_saturation OWNER TO rkottman;

--
-- Name: TABLE woa05_oxygen_saturation; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON TABLE woa05_oxygen_saturation IS 'From WOA 2005';


--
-- Name: COLUMN woa05_oxygen_saturation.season; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_oxygen_saturation.season IS 'Season of measurement see elayers.seasons';


--
-- Name: COLUMN woa05_oxygen_saturation.depth; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_oxygen_saturation.depth IS 'Depth of measurement';


--
-- Name: COLUMN woa05_oxygen_saturation.val; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_oxygen_saturation.val IS 'The measured value';


--
-- Name: woa05_oxygen_saturation_stability; Type: TABLE; Schema: elayers; Owner: ikostadi; Tablespace: 
--

CREATE TABLE woa05_oxygen_saturation_stability (
    geom public.geometry,
    val numeric,
    depth integer
);


ALTER TABLE elayers.woa05_oxygen_saturation_stability OWNER TO ikostadi;

--
-- Name: woa05_oxygen_utilization; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE woa05_oxygen_utilization (
    woa05_id integer DEFAULT 0 NOT NULL,
    season smallint DEFAULT (-1) NOT NULL,
    depth integer DEFAULT (-1) NOT NULL,
    val numeric DEFAULT (-1) NOT NULL,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'MULTIPOLYGON'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.srid(geom) = (-1)))
);


ALTER TABLE elayers.woa05_oxygen_utilization OWNER TO rkottman;

--
-- Name: TABLE woa05_oxygen_utilization; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON TABLE woa05_oxygen_utilization IS 'From WOA 2005';


--
-- Name: COLUMN woa05_oxygen_utilization.season; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_oxygen_utilization.season IS 'Season of measurement see elayers.seasons';


--
-- Name: COLUMN woa05_oxygen_utilization.depth; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_oxygen_utilization.depth IS 'Depth of measurement';


--
-- Name: COLUMN woa05_oxygen_utilization.val; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_oxygen_utilization.val IS 'The measured value';


--
-- Name: woa05_oxygen_utilization_stability; Type: TABLE; Schema: elayers; Owner: ikostadi; Tablespace: 
--

CREATE TABLE woa05_oxygen_utilization_stability (
    geom public.geometry,
    val numeric,
    depth integer
);


ALTER TABLE elayers.woa05_oxygen_utilization_stability OWNER TO ikostadi;

--
-- Name: woa05_phosphate; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE woa05_phosphate (
    woa05_id integer DEFAULT 0 NOT NULL,
    season smallint DEFAULT (-1) NOT NULL,
    depth integer DEFAULT (-1) NOT NULL,
    val numeric DEFAULT (-1) NOT NULL,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'MULTIPOLYGON'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.srid(geom) = (-1)))
);


ALTER TABLE elayers.woa05_phosphate OWNER TO rkottman;

--
-- Name: TABLE woa05_phosphate; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON TABLE woa05_phosphate IS 'From WOA 2005';


--
-- Name: COLUMN woa05_phosphate.season; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_phosphate.season IS 'Season of measurement see elayers.seasons';


--
-- Name: COLUMN woa05_phosphate.depth; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_phosphate.depth IS 'Depth of measurement';


--
-- Name: COLUMN woa05_phosphate.val; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_phosphate.val IS 'The measured value';


--
-- Name: woa05_phosphate_stability; Type: TABLE; Schema: elayers; Owner: ikostadi; Tablespace: 
--

CREATE TABLE woa05_phosphate_stability (
    geom public.geometry,
    val numeric,
    depth integer
);


ALTER TABLE elayers.woa05_phosphate_stability OWNER TO ikostadi;

--
-- Name: woa05_salinity; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE woa05_salinity (
    woa05_id integer DEFAULT 0 NOT NULL,
    season smallint DEFAULT (-1) NOT NULL,
    depth integer DEFAULT (-1) NOT NULL,
    val numeric DEFAULT (-1) NOT NULL,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'MULTIPOLYGON'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.srid(geom) = (-1)))
);


ALTER TABLE elayers.woa05_salinity OWNER TO rkottman;

--
-- Name: TABLE woa05_salinity; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON TABLE woa05_salinity IS 'From WOA 2005';


--
-- Name: COLUMN woa05_salinity.season; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_salinity.season IS 'Season of measurement see elayers.seasons';


--
-- Name: COLUMN woa05_salinity.depth; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_salinity.depth IS 'Depth of measurement';


--
-- Name: COLUMN woa05_salinity.val; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_salinity.val IS 'The measured value';


--
-- Name: woa05_salinity_stability; Type: TABLE; Schema: elayers; Owner: ikostadi; Tablespace: 
--

CREATE TABLE woa05_salinity_stability (
    geom public.geometry,
    val numeric,
    depth integer
);


ALTER TABLE elayers.woa05_salinity_stability OWNER TO ikostadi;

--
-- Name: woa05_silicate; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE woa05_silicate (
    woa05_id integer DEFAULT 0 NOT NULL,
    season smallint DEFAULT (-1) NOT NULL,
    depth integer DEFAULT (-1) NOT NULL,
    val numeric DEFAULT (-1) NOT NULL,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'MULTIPOLYGON'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.srid(geom) = (-1)))
);


ALTER TABLE elayers.woa05_silicate OWNER TO rkottman;

--
-- Name: TABLE woa05_silicate; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON TABLE woa05_silicate IS 'From WOA 2005';


--
-- Name: COLUMN woa05_silicate.season; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_silicate.season IS 'Season of measurement see elayers.seasons';


--
-- Name: COLUMN woa05_silicate.depth; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_silicate.depth IS 'Depth of measurement';


--
-- Name: COLUMN woa05_silicate.val; Type: COMMENT; Schema: elayers; Owner: rkottman
--

COMMENT ON COLUMN woa05_silicate.val IS 'The measured value';


--
-- Name: woa05_silicate_stability; Type: TABLE; Schema: elayers; Owner: ikostadi; Tablespace: 
--

CREATE TABLE woa05_silicate_stability (
    geom public.geometry,
    val numeric,
    depth integer
);


ALTER TABLE elayers.woa05_silicate_stability OWNER TO ikostadi;

--
-- Name: woa05_temperature; Type: TABLE; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE woa05_temperature (
    woa05_id integer NOT NULL,
    season smallint NOT NULL,
    depth integer NOT NULL,
    val numeric,
    gid integer,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'MULTIPOLYGON'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.srid(geom) = (-1)))
);


ALTER TABLE elayers.woa05_temperature OWNER TO rkottman;

--
-- Name: woa05_temperature_stability; Type: TABLE; Schema: elayers; Owner: ikostadi; Tablespace: 
--

CREATE TABLE woa05_temperature_stability (
    geom public.geometry,
    val numeric,
    depth integer,
    _id bigint NOT NULL
);


ALTER TABLE elayers.woa05_temperature_stability OWNER TO ikostadi;

--
-- Name: woa05_temperature_stability__id_seq; Type: SEQUENCE; Schema: elayers; Owner: ikostadi
--

CREATE SEQUENCE woa05_temperature_stability__id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE elayers.woa05_temperature_stability__id_seq OWNER TO ikostadi;

--
-- Name: woa05_temperature_stability__id_seq; Type: SEQUENCE OWNED BY; Schema: elayers; Owner: ikostadi
--

ALTER SEQUENCE woa05_temperature_stability__id_seq OWNED BY woa05_temperature_stability._id;


SET search_path = stage_r8, pg_catalog;

--
-- Name: camera_read_sample; Type: TABLE; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

CREATE TABLE camera_read_sample (
    did_code text NOT NULL,
    did bigint NOT NULL,
    sample_name text NOT NULL
);


ALTER TABLE stage_r8.camera_read_sample OWNER TO rkottman;

SET search_path = pfam_24, pg_catalog;

--
-- Name: pfama; Type: TABLE; Schema: pfam_24; Owner: ikostadi; Tablespace: 
--

CREATE TABLE pfama (
    auto_pfama bigint NOT NULL,
    pfama_acc text NOT NULL,
    pfama_id text NOT NULL,
    previous_id text,
    description text,
    author text,
    deposited_by text,
    seed_source text,
    _type text,
    _comment text,
    sequence_ga numeric(16,4),
    domain_ga numeric(16,4),
    sequence_tc numeric(16,4),
    domain_tc numeric(16,4),
    sequence_nc numeric(16,4),
    domain_nc numeric(16,4),
    buil_method text,
    model_length integer,
    search_method text,
    msv_lambda double precision,
    msv_mu double precision,
    viterbi_lambda double precision,
    viterbi_mu double precision,
    forward_lambda double precision,
    forward_tau double precision,
    num_seed integer,
    num_full integer,
    updated timestamp without time zone NOT NULL,
    created timestamp without time zone,
    _version smallint,
    number_archs integer,
    number_species integer,
    number_structures integer,
    number_ncbi integer,
    number_meta integer,
    average_length numeric(6,1),
    percentage_id integer,
    average_coverage numeric(6,2),
    change_status text,
    seed_consensus text,
    full_consensus text
);


ALTER TABLE pfam_24.pfama OWNER TO ikostadi;

SET search_path = mfdata, pg_catalog;

--
-- Name: sil_12_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_12_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_12_grid OWNER TO rkottman;

--
-- Name: b_interpol; Type: VIEW; Schema: mfdata; Owner: megxuser
--

CREATE VIEW b_interpol AS
    SELECT sil_12_grid.sil_0000 AS valup, sil_12_grid.sil_0000 AS valdown FROM sil_12_grid WHERE (public.distance(public.geomfromtext('Point(-158 22.75)'::text), sil_12_grid.the_geom) = (0)::double precision);


ALTER TABLE mfdata.b_interpol OWNER TO megxuser;

--
-- Name: chloro_0000_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_0000_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_0000_grid OWNER TO rkottman;

--
-- Name: chloro_1997_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_1997_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_1997_grid OWNER TO rkottman;

--
-- Name: chloro_1998_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_1998_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_1998_grid OWNER TO rkottman;

--
-- Name: chloro_1999_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_1999_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_1999_grid OWNER TO rkottman;

--
-- Name: chloro_2000_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_2000_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_2000_grid OWNER TO rkottman;

--
-- Name: chloro_2001_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_2001_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_2001_grid OWNER TO rkottman;

--
-- Name: chloro_2002_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_2002_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_2002_grid OWNER TO rkottman;

--
-- Name: chloro_2003_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_2003_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_2003_grid OWNER TO rkottman;

--
-- Name: chloro_2004_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_2004_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_2004_grid OWNER TO rkottman;

--
-- Name: chloro_2005_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_2005_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_2005_grid OWNER TO rkottman;

--
-- Name: chloro_2006_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_2006_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real
);


ALTER TABLE mfdata.chloro_2006_grid OWNER TO rkottman;

--
-- Name: chloro_cv_0000_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_cv_0000_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_cv_0000_grid OWNER TO rkottman;

--
-- Name: chloro_cv_1997_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_cv_1997_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_cv_1997_grid OWNER TO rkottman;

--
-- Name: chloro_cv_1998_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_cv_1998_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_cv_1998_grid OWNER TO rkottman;

--
-- Name: chloro_cv_1999_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_cv_1999_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_cv_1999_grid OWNER TO rkottman;

--
-- Name: chloro_cv_2000_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_cv_2000_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_cv_2000_grid OWNER TO rkottman;

--
-- Name: chloro_cv_2001_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_cv_2001_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_cv_2001_grid OWNER TO rkottman;

--
-- Name: chloro_cv_2002_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_cv_2002_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_cv_2002_grid OWNER TO rkottman;

--
-- Name: chloro_cv_2003_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_cv_2003_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_cv_2003_grid OWNER TO rkottman;

--
-- Name: chloro_cv_2004_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_cv_2004_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_cv_2004_grid OWNER TO rkottman;

--
-- Name: chloro_cv_2005_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_cv_2005_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_cv_2005_grid OWNER TO rkottman;

--
-- Name: chloro_cv_2006_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_cv_2006_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real
);


ALTER TABLE mfdata.chloro_cv_2006_grid OWNER TO rkottman;

--
-- Name: chloro_ss_0000_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_ss_0000_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_ss_0000_grid OWNER TO rkottman;

--
-- Name: chloro_ss_1997_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_ss_1997_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_ss_1997_grid OWNER TO rkottman;

--
-- Name: chloro_ss_1998_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_ss_1998_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_ss_1998_grid OWNER TO rkottman;

--
-- Name: chloro_ss_1999_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_ss_1999_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_ss_1999_grid OWNER TO rkottman;

--
-- Name: chloro_ss_2000_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_ss_2000_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_ss_2000_grid OWNER TO rkottman;

--
-- Name: chloro_ss_2001_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_ss_2001_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_ss_2001_grid OWNER TO rkottman;

--
-- Name: chloro_ss_2002_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_ss_2002_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_ss_2002_grid OWNER TO rkottman;

--
-- Name: chloro_ss_2003_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_ss_2003_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_ss_2003_grid OWNER TO rkottman;

--
-- Name: chloro_ss_2004_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_ss_2004_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_ss_2004_grid OWNER TO rkottman;

--
-- Name: chloro_ss_2005_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_ss_2005_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_00 real,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_12 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real,
    chloro_16 real
);


ALTER TABLE mfdata.chloro_ss_2005_grid OWNER TO rkottman;

--
-- Name: chloro_ss_2006_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE chloro_ss_2006_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    chloro_01 real,
    chloro_02 real,
    chloro_03 real,
    chloro_04 real,
    chloro_05 real,
    chloro_06 real,
    chloro_07 real,
    chloro_08 real,
    chloro_09 real,
    chloro_10 real,
    chloro_11 real,
    chloro_13 real,
    chloro_14 real,
    chloro_15 real
);


ALTER TABLE mfdata.chloro_ss_2006_grid OWNER TO rkottman;

--
-- Name: nitr_00_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_00_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real,
    nitr_0600 real,
    nitr_0700 real,
    nitr_0800 real,
    nitr_0900 real,
    nitr_1000 real,
    nitr_1100 real,
    nitr_1200 real,
    nitr_1300 real,
    nitr_1400 real,
    nitr_1500 real,
    nitr_1750 real,
    nitr_2000 real,
    nitr_2500 real,
    nitr_3000 real,
    nitr_3500 real,
    nitr_4000 real,
    nitr_4500 real,
    nitr_5000 real,
    nitr_5500 real
);


ALTER TABLE mfdata.nitr_00_grid OWNER TO rkottman;

--
-- Name: nitr_01_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_01_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_01_grid OWNER TO rkottman;

--
-- Name: nitr_02_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_02_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_02_grid OWNER TO rkottman;

--
-- Name: nitr_03_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_03_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_03_grid OWNER TO rkottman;

--
-- Name: nitr_04_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_04_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_04_grid OWNER TO rkottman;

--
-- Name: nitr_05_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_05_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_05_grid OWNER TO rkottman;

--
-- Name: nitr_06_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_06_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_06_grid OWNER TO rkottman;

--
-- Name: nitr_07_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_07_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_07_grid OWNER TO rkottman;

--
-- Name: nitr_08_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_08_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_08_grid OWNER TO rkottman;

--
-- Name: nitr_09_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_09_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_09_grid OWNER TO rkottman;

--
-- Name: nitr_10_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_10_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_10_grid OWNER TO rkottman;

--
-- Name: nitr_11_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_11_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_11_grid OWNER TO rkottman;

--
-- Name: nitr_12_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_12_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_12_grid OWNER TO rkottman;

--
-- Name: nitr_13_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_13_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_13_grid OWNER TO rkottman;

--
-- Name: nitr_14_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_14_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_14_grid OWNER TO rkottman;

--
-- Name: nitr_15_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_15_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_15_grid OWNER TO rkottman;

--
-- Name: nitr_16_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE nitr_16_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    nitr_0000 real,
    nitr_0010 real,
    nitr_0020 real,
    nitr_0030 real,
    nitr_0050 real,
    nitr_0075 real,
    nitr_0100 real,
    nitr_0125 real,
    nitr_0150 real,
    nitr_0200 real,
    nitr_0250 real,
    nitr_0300 real,
    nitr_0400 real,
    nitr_0500 real
);


ALTER TABLE mfdata.nitr_16_grid OWNER TO rkottman;

--
-- Name: oxy_dis_00_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_00_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real,
    oxy_dis_0600 real,
    oxy_dis_0700 real,
    oxy_dis_0800 real,
    oxy_dis_0900 real,
    oxy_dis_1000 real,
    oxy_dis_1100 real,
    oxy_dis_1200 real,
    oxy_dis_1300 real,
    oxy_dis_1400 real,
    oxy_dis_1500 real,
    oxy_dis_1750 real,
    oxy_dis_2000 real,
    oxy_dis_2500 real,
    oxy_dis_3000 real,
    oxy_dis_3500 real,
    oxy_dis_4000 real,
    oxy_dis_4500 real,
    oxy_dis_5000 real,
    oxy_dis_5500 real
);


ALTER TABLE mfdata.oxy_dis_00_grid OWNER TO rkottman;

--
-- Name: oxy_dis_01_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_01_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real
);


ALTER TABLE mfdata.oxy_dis_01_grid OWNER TO rkottman;

--
-- Name: oxy_dis_02_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_02_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real
);


ALTER TABLE mfdata.oxy_dis_02_grid OWNER TO rkottman;

--
-- Name: oxy_dis_03_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_03_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real
);


ALTER TABLE mfdata.oxy_dis_03_grid OWNER TO rkottman;

--
-- Name: oxy_dis_04_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_04_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real
);


ALTER TABLE mfdata.oxy_dis_04_grid OWNER TO rkottman;

--
-- Name: oxy_dis_05_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_05_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real
);


ALTER TABLE mfdata.oxy_dis_05_grid OWNER TO rkottman;

--
-- Name: oxy_dis_06_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_06_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real
);


ALTER TABLE mfdata.oxy_dis_06_grid OWNER TO rkottman;

--
-- Name: oxy_dis_07_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_07_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real
);


ALTER TABLE mfdata.oxy_dis_07_grid OWNER TO rkottman;

--
-- Name: oxy_dis_08_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_08_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real
);


ALTER TABLE mfdata.oxy_dis_08_grid OWNER TO rkottman;

--
-- Name: oxy_dis_09_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_09_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real
);


ALTER TABLE mfdata.oxy_dis_09_grid OWNER TO rkottman;

--
-- Name: oxy_dis_10_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_10_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real
);


ALTER TABLE mfdata.oxy_dis_10_grid OWNER TO rkottman;

--
-- Name: oxy_dis_11_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_11_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real
);


ALTER TABLE mfdata.oxy_dis_11_grid OWNER TO rkottman;

--
-- Name: oxy_dis_12_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_12_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real
);


ALTER TABLE mfdata.oxy_dis_12_grid OWNER TO rkottman;

--
-- Name: oxy_dis_13_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_13_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real,
    oxy_dis_0600 real,
    oxy_dis_0700 real,
    oxy_dis_0800 real,
    oxy_dis_0900 real,
    oxy_dis_1000 real,
    oxy_dis_1100 real,
    oxy_dis_1200 real,
    oxy_dis_1300 real,
    oxy_dis_1400 real,
    oxy_dis_1500 real,
    oxy_dis_1750 real,
    oxy_dis_2000 real,
    oxy_dis_2500 real,
    oxy_dis_3000 real,
    oxy_dis_3500 real,
    oxy_dis_4000 real,
    oxy_dis_4500 real,
    oxy_dis_5000 real,
    oxy_dis_5500 real
);


ALTER TABLE mfdata.oxy_dis_13_grid OWNER TO rkottman;

--
-- Name: oxy_dis_14_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_14_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real,
    oxy_dis_0600 real,
    oxy_dis_0700 real,
    oxy_dis_0800 real,
    oxy_dis_0900 real,
    oxy_dis_1000 real,
    oxy_dis_1100 real,
    oxy_dis_1200 real,
    oxy_dis_1300 real,
    oxy_dis_1400 real,
    oxy_dis_1500 real,
    oxy_dis_1750 real,
    oxy_dis_2000 real,
    oxy_dis_2500 real,
    oxy_dis_3000 real,
    oxy_dis_3500 real,
    oxy_dis_4000 real,
    oxy_dis_4500 real,
    oxy_dis_5000 real,
    oxy_dis_5500 real
);


ALTER TABLE mfdata.oxy_dis_14_grid OWNER TO rkottman;

--
-- Name: oxy_dis_15_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_15_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real,
    oxy_dis_0600 real,
    oxy_dis_0700 real,
    oxy_dis_0800 real,
    oxy_dis_0900 real,
    oxy_dis_1000 real,
    oxy_dis_1100 real,
    oxy_dis_1200 real,
    oxy_dis_1300 real,
    oxy_dis_1400 real,
    oxy_dis_1500 real,
    oxy_dis_1750 real,
    oxy_dis_2000 real,
    oxy_dis_2500 real,
    oxy_dis_3000 real,
    oxy_dis_3500 real,
    oxy_dis_4000 real,
    oxy_dis_4500 real,
    oxy_dis_5000 real,
    oxy_dis_5500 real
);


ALTER TABLE mfdata.oxy_dis_15_grid OWNER TO rkottman;

--
-- Name: oxy_dis_16_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_dis_16_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_dis_0000 real,
    oxy_dis_0010 real,
    oxy_dis_0020 real,
    oxy_dis_0030 real,
    oxy_dis_0050 real,
    oxy_dis_0075 real,
    oxy_dis_0100 real,
    oxy_dis_0125 real,
    oxy_dis_0150 real,
    oxy_dis_0200 real,
    oxy_dis_0250 real,
    oxy_dis_0300 real,
    oxy_dis_0400 real,
    oxy_dis_0500 real,
    oxy_dis_0600 real,
    oxy_dis_0700 real,
    oxy_dis_0800 real,
    oxy_dis_0900 real,
    oxy_dis_1000 real,
    oxy_dis_1100 real,
    oxy_dis_1200 real,
    oxy_dis_1300 real,
    oxy_dis_1400 real,
    oxy_dis_1500 real,
    oxy_dis_1750 real,
    oxy_dis_2000 real,
    oxy_dis_2500 real,
    oxy_dis_3000 real,
    oxy_dis_3500 real,
    oxy_dis_4000 real,
    oxy_dis_4500 real,
    oxy_dis_5000 real,
    oxy_dis_5500 real
);


ALTER TABLE mfdata.oxy_dis_16_grid OWNER TO rkottman;

--
-- Name: oxy_sat_00_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_00_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real,
    oxy_sat_0600 real,
    oxy_sat_0700 real,
    oxy_sat_0800 real,
    oxy_sat_0900 real,
    oxy_sat_1000 real,
    oxy_sat_1100 real,
    oxy_sat_1200 real,
    oxy_sat_1300 real,
    oxy_sat_1400 real,
    oxy_sat_1500 real,
    oxy_sat_1750 real,
    oxy_sat_2000 real,
    oxy_sat_2500 real,
    oxy_sat_3000 real,
    oxy_sat_3500 real,
    oxy_sat_4000 real,
    oxy_sat_4500 real,
    oxy_sat_5000 real,
    oxy_sat_5500 real
);


ALTER TABLE mfdata.oxy_sat_00_grid OWNER TO rkottman;

--
-- Name: oxy_sat_01_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_01_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real
);


ALTER TABLE mfdata.oxy_sat_01_grid OWNER TO rkottman;

--
-- Name: oxy_sat_02_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_02_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real
);


ALTER TABLE mfdata.oxy_sat_02_grid OWNER TO rkottman;

--
-- Name: oxy_sat_03_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_03_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real
);


ALTER TABLE mfdata.oxy_sat_03_grid OWNER TO rkottman;

--
-- Name: oxy_sat_04_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_04_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real
);


ALTER TABLE mfdata.oxy_sat_04_grid OWNER TO rkottman;

--
-- Name: oxy_sat_05_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_05_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real
);


ALTER TABLE mfdata.oxy_sat_05_grid OWNER TO rkottman;

--
-- Name: oxy_sat_06_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_06_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real
);


ALTER TABLE mfdata.oxy_sat_06_grid OWNER TO rkottman;

--
-- Name: oxy_sat_07_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_07_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real
);


ALTER TABLE mfdata.oxy_sat_07_grid OWNER TO rkottman;

--
-- Name: oxy_sat_08_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_08_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real
);


ALTER TABLE mfdata.oxy_sat_08_grid OWNER TO rkottman;

--
-- Name: oxy_sat_09_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_09_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real
);


ALTER TABLE mfdata.oxy_sat_09_grid OWNER TO rkottman;

--
-- Name: oxy_sat_10_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_10_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real
);


ALTER TABLE mfdata.oxy_sat_10_grid OWNER TO rkottman;

--
-- Name: oxy_sat_11_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_11_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real
);


ALTER TABLE mfdata.oxy_sat_11_grid OWNER TO rkottman;

--
-- Name: oxy_sat_12_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_12_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real
);


ALTER TABLE mfdata.oxy_sat_12_grid OWNER TO rkottman;

--
-- Name: oxy_sat_13_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_13_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real,
    oxy_sat_0600 real,
    oxy_sat_0700 real,
    oxy_sat_0800 real,
    oxy_sat_0900 real,
    oxy_sat_1000 real,
    oxy_sat_1100 real,
    oxy_sat_1200 real,
    oxy_sat_1300 real,
    oxy_sat_1400 real,
    oxy_sat_1500 real,
    oxy_sat_1750 real,
    oxy_sat_2000 real,
    oxy_sat_2500 real,
    oxy_sat_3000 real,
    oxy_sat_3500 real,
    oxy_sat_4000 real,
    oxy_sat_4500 real,
    oxy_sat_5000 real,
    oxy_sat_5500 real
);


ALTER TABLE mfdata.oxy_sat_13_grid OWNER TO rkottman;

--
-- Name: oxy_sat_14_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_14_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real,
    oxy_sat_0600 real,
    oxy_sat_0700 real,
    oxy_sat_0800 real,
    oxy_sat_0900 real,
    oxy_sat_1000 real,
    oxy_sat_1100 real,
    oxy_sat_1200 real,
    oxy_sat_1300 real,
    oxy_sat_1400 real,
    oxy_sat_1500 real,
    oxy_sat_1750 real,
    oxy_sat_2000 real,
    oxy_sat_2500 real,
    oxy_sat_3000 real,
    oxy_sat_3500 real,
    oxy_sat_4000 real,
    oxy_sat_4500 real,
    oxy_sat_5000 real,
    oxy_sat_5500 real
);


ALTER TABLE mfdata.oxy_sat_14_grid OWNER TO rkottman;

--
-- Name: oxy_sat_15_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_15_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real,
    oxy_sat_0600 real,
    oxy_sat_0700 real,
    oxy_sat_0800 real,
    oxy_sat_0900 real,
    oxy_sat_1000 real,
    oxy_sat_1100 real,
    oxy_sat_1200 real,
    oxy_sat_1300 real,
    oxy_sat_1400 real,
    oxy_sat_1500 real,
    oxy_sat_1750 real,
    oxy_sat_2000 real,
    oxy_sat_2500 real,
    oxy_sat_3000 real,
    oxy_sat_3500 real,
    oxy_sat_4000 real,
    oxy_sat_4500 real,
    oxy_sat_5000 real,
    oxy_sat_5500 real
);


ALTER TABLE mfdata.oxy_sat_15_grid OWNER TO rkottman;

--
-- Name: oxy_sat_16_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_sat_16_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_sat_0000 real,
    oxy_sat_0010 real,
    oxy_sat_0020 real,
    oxy_sat_0030 real,
    oxy_sat_0050 real,
    oxy_sat_0075 real,
    oxy_sat_0100 real,
    oxy_sat_0125 real,
    oxy_sat_0150 real,
    oxy_sat_0200 real,
    oxy_sat_0250 real,
    oxy_sat_0300 real,
    oxy_sat_0400 real,
    oxy_sat_0500 real,
    oxy_sat_0600 real,
    oxy_sat_0700 real,
    oxy_sat_0800 real,
    oxy_sat_0900 real,
    oxy_sat_1000 real,
    oxy_sat_1100 real,
    oxy_sat_1200 real,
    oxy_sat_1300 real,
    oxy_sat_1400 real,
    oxy_sat_1500 real,
    oxy_sat_1750 real,
    oxy_sat_2000 real,
    oxy_sat_2500 real,
    oxy_sat_3000 real,
    oxy_sat_3500 real,
    oxy_sat_4000 real,
    oxy_sat_4500 real,
    oxy_sat_5000 real,
    oxy_sat_5500 real
);


ALTER TABLE mfdata.oxy_sat_16_grid OWNER TO rkottman;

--
-- Name: oxy_util_00_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_00_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real,
    oxy_util_0600 real,
    oxy_util_0700 real,
    oxy_util_0800 real,
    oxy_util_0900 real,
    oxy_util_1000 real,
    oxy_util_1100 real,
    oxy_util_1200 real,
    oxy_util_1300 real,
    oxy_util_1400 real,
    oxy_util_1500 real,
    oxy_util_1750 real,
    oxy_util_2000 real,
    oxy_util_2500 real,
    oxy_util_3000 real,
    oxy_util_3500 real,
    oxy_util_4000 real,
    oxy_util_4500 real,
    oxy_util_5000 real,
    oxy_util_5500 real
);


ALTER TABLE mfdata.oxy_util_00_grid OWNER TO rkottman;

--
-- Name: oxy_util_01_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_01_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real
);


ALTER TABLE mfdata.oxy_util_01_grid OWNER TO rkottman;

--
-- Name: oxy_util_02_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_02_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real
);


ALTER TABLE mfdata.oxy_util_02_grid OWNER TO rkottman;

--
-- Name: oxy_util_03_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_03_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real
);


ALTER TABLE mfdata.oxy_util_03_grid OWNER TO rkottman;

--
-- Name: oxy_util_04_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_04_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real
);


ALTER TABLE mfdata.oxy_util_04_grid OWNER TO rkottman;

--
-- Name: oxy_util_05_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_05_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real
);


ALTER TABLE mfdata.oxy_util_05_grid OWNER TO rkottman;

--
-- Name: oxy_util_06_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_06_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real
);


ALTER TABLE mfdata.oxy_util_06_grid OWNER TO rkottman;

--
-- Name: oxy_util_07_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_07_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real
);


ALTER TABLE mfdata.oxy_util_07_grid OWNER TO rkottman;

--
-- Name: oxy_util_08_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_08_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real
);


ALTER TABLE mfdata.oxy_util_08_grid OWNER TO rkottman;

--
-- Name: oxy_util_09_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_09_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real
);


ALTER TABLE mfdata.oxy_util_09_grid OWNER TO rkottman;

--
-- Name: oxy_util_10_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_10_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real
);


ALTER TABLE mfdata.oxy_util_10_grid OWNER TO rkottman;

--
-- Name: oxy_util_11_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_11_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real
);


ALTER TABLE mfdata.oxy_util_11_grid OWNER TO rkottman;

--
-- Name: oxy_util_12_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_12_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real
);


ALTER TABLE mfdata.oxy_util_12_grid OWNER TO rkottman;

--
-- Name: oxy_util_13_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_13_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real,
    oxy_util_0600 real,
    oxy_util_0700 real,
    oxy_util_0800 real,
    oxy_util_0900 real,
    oxy_util_1000 real,
    oxy_util_1100 real,
    oxy_util_1200 real,
    oxy_util_1300 real,
    oxy_util_1400 real,
    oxy_util_1500 real,
    oxy_util_1750 real,
    oxy_util_2000 real,
    oxy_util_2500 real,
    oxy_util_3000 real,
    oxy_util_3500 real,
    oxy_util_4000 real,
    oxy_util_4500 real,
    oxy_util_5000 real,
    oxy_util_5500 real
);


ALTER TABLE mfdata.oxy_util_13_grid OWNER TO rkottman;

--
-- Name: oxy_util_14_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_14_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real,
    oxy_util_0600 real,
    oxy_util_0700 real,
    oxy_util_0800 real,
    oxy_util_0900 real,
    oxy_util_1000 real,
    oxy_util_1100 real,
    oxy_util_1200 real,
    oxy_util_1300 real,
    oxy_util_1400 real,
    oxy_util_1500 real,
    oxy_util_1750 real,
    oxy_util_2000 real,
    oxy_util_2500 real,
    oxy_util_3000 real,
    oxy_util_3500 real,
    oxy_util_4000 real,
    oxy_util_4500 real,
    oxy_util_5000 real,
    oxy_util_5500 real
);


ALTER TABLE mfdata.oxy_util_14_grid OWNER TO rkottman;

--
-- Name: oxy_util_15_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_15_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real,
    oxy_util_0600 real,
    oxy_util_0700 real,
    oxy_util_0800 real,
    oxy_util_0900 real,
    oxy_util_1000 real,
    oxy_util_1100 real,
    oxy_util_1200 real,
    oxy_util_1300 real,
    oxy_util_1400 real,
    oxy_util_1500 real,
    oxy_util_1750 real,
    oxy_util_2000 real,
    oxy_util_2500 real,
    oxy_util_3000 real,
    oxy_util_3500 real,
    oxy_util_4000 real,
    oxy_util_4500 real,
    oxy_util_5000 real,
    oxy_util_5500 real
);


ALTER TABLE mfdata.oxy_util_15_grid OWNER TO rkottman;

--
-- Name: oxy_util_16_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE oxy_util_16_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    oxy_util_0000 real,
    oxy_util_0010 real,
    oxy_util_0020 real,
    oxy_util_0030 real,
    oxy_util_0050 real,
    oxy_util_0075 real,
    oxy_util_0100 real,
    oxy_util_0125 real,
    oxy_util_0150 real,
    oxy_util_0200 real,
    oxy_util_0250 real,
    oxy_util_0300 real,
    oxy_util_0400 real,
    oxy_util_0500 real,
    oxy_util_0600 real,
    oxy_util_0700 real,
    oxy_util_0800 real,
    oxy_util_0900 real,
    oxy_util_1000 real,
    oxy_util_1100 real,
    oxy_util_1200 real,
    oxy_util_1300 real,
    oxy_util_1400 real,
    oxy_util_1500 real,
    oxy_util_1750 real,
    oxy_util_2000 real,
    oxy_util_2500 real,
    oxy_util_3000 real,
    oxy_util_3500 real,
    oxy_util_4000 real,
    oxy_util_4500 real,
    oxy_util_5000 real,
    oxy_util_5500 real
);


ALTER TABLE mfdata.oxy_util_16_grid OWNER TO rkottman;

--
-- Name: phosph_00_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_00_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real,
    phosph_0600 real,
    phosph_0700 real,
    phosph_0800 real,
    phosph_0900 real,
    phosph_1000 real,
    phosph_1100 real,
    phosph_1200 real,
    phosph_1300 real,
    phosph_1400 real,
    phosph_1500 real,
    phosph_1750 real,
    phosph_2000 real,
    phosph_2500 real,
    phosph_3000 real,
    phosph_3500 real,
    phosph_4000 real,
    phosph_4500 real,
    phosph_5000 real,
    phosph_5500 real
);


ALTER TABLE mfdata.phosph_00_grid OWNER TO rkottman;

--
-- Name: phosph_01_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_01_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_01_grid OWNER TO rkottman;

--
-- Name: phosph_02_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_02_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_02_grid OWNER TO rkottman;

--
-- Name: phosph_03_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_03_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_03_grid OWNER TO rkottman;

--
-- Name: phosph_04_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_04_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_04_grid OWNER TO rkottman;

--
-- Name: phosph_05_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_05_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_05_grid OWNER TO rkottman;

--
-- Name: phosph_06_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_06_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_06_grid OWNER TO rkottman;

--
-- Name: phosph_07_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_07_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_07_grid OWNER TO rkottman;

--
-- Name: phosph_08_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_08_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_08_grid OWNER TO rkottman;

--
-- Name: phosph_09_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_09_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_09_grid OWNER TO rkottman;

--
-- Name: phosph_10_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_10_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_10_grid OWNER TO rkottman;

--
-- Name: phosph_11_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_11_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_11_grid OWNER TO rkottman;

--
-- Name: phosph_12_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_12_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_12_grid OWNER TO rkottman;

--
-- Name: phosph_13_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_13_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_13_grid OWNER TO rkottman;

--
-- Name: phosph_14_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_14_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_14_grid OWNER TO rkottman;

--
-- Name: phosph_15_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_15_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_15_grid OWNER TO rkottman;

--
-- Name: phosph_16_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE phosph_16_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    phosph_0000 real,
    phosph_0010 real,
    phosph_0020 real,
    phosph_0030 real,
    phosph_0050 real,
    phosph_0075 real,
    phosph_0100 real,
    phosph_0125 real,
    phosph_0150 real,
    phosph_0200 real,
    phosph_0250 real,
    phosph_0300 real,
    phosph_0400 real,
    phosph_0500 real
);


ALTER TABLE mfdata.phosph_16_grid OWNER TO rkottman;

--
-- Name: sal_00_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_00_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real,
    sal_1750 real,
    sal_2000 real,
    sal_2500 real,
    sal_3000 real,
    sal_3500 real,
    sal_4000 real,
    sal_4500 real,
    sal_5000 real,
    sal_5500 real
);


ALTER TABLE mfdata.sal_00_grid OWNER TO rkottman;

--
-- Name: sal_01_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_01_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real
);


ALTER TABLE mfdata.sal_01_grid OWNER TO rkottman;

--
-- Name: sal_02_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_02_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real
);


ALTER TABLE mfdata.sal_02_grid OWNER TO rkottman;

--
-- Name: sal_03_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_03_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real
);


ALTER TABLE mfdata.sal_03_grid OWNER TO rkottman;

--
-- Name: sal_04_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_04_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real
);


ALTER TABLE mfdata.sal_04_grid OWNER TO rkottman;

--
-- Name: sal_05_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_05_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real
);


ALTER TABLE mfdata.sal_05_grid OWNER TO rkottman;

--
-- Name: sal_06_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_06_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real
);


ALTER TABLE mfdata.sal_06_grid OWNER TO rkottman;

--
-- Name: sal_07_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_07_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real
);


ALTER TABLE mfdata.sal_07_grid OWNER TO rkottman;

--
-- Name: sal_08_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_08_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real
);


ALTER TABLE mfdata.sal_08_grid OWNER TO rkottman;

--
-- Name: sal_09_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_09_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real
);


ALTER TABLE mfdata.sal_09_grid OWNER TO rkottman;

--
-- Name: sal_10_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_10_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real
);


ALTER TABLE mfdata.sal_10_grid OWNER TO rkottman;

--
-- Name: sal_11_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_11_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real
);


ALTER TABLE mfdata.sal_11_grid OWNER TO rkottman;

--
-- Name: sal_12_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_12_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real
);


ALTER TABLE mfdata.sal_12_grid OWNER TO rkottman;

--
-- Name: sal_13_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_13_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real,
    sal_1750 real,
    sal_2000 real,
    sal_2500 real,
    sal_3000 real,
    sal_3500 real,
    sal_4000 real,
    sal_4500 real,
    sal_5000 real,
    sal_5500 real
);


ALTER TABLE mfdata.sal_13_grid OWNER TO rkottman;

--
-- Name: sal_14_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_14_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real,
    sal_1750 real,
    sal_2000 real,
    sal_2500 real,
    sal_3000 real,
    sal_3500 real,
    sal_4000 real,
    sal_4500 real,
    sal_5000 real,
    sal_5500 real
);


ALTER TABLE mfdata.sal_14_grid OWNER TO rkottman;

--
-- Name: sal_15_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_15_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real,
    sal_1750 real,
    sal_2000 real,
    sal_2500 real,
    sal_3000 real,
    sal_3500 real,
    sal_4000 real,
    sal_4500 real,
    sal_5000 real,
    sal_5500 real
);


ALTER TABLE mfdata.sal_15_grid OWNER TO rkottman;

--
-- Name: sal_16_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sal_16_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sal_0000 real,
    sal_0010 real,
    sal_0020 real,
    sal_0030 real,
    sal_0050 real,
    sal_0075 real,
    sal_0100 real,
    sal_0125 real,
    sal_0150 real,
    sal_0200 real,
    sal_0250 real,
    sal_0300 real,
    sal_0400 real,
    sal_0500 real,
    sal_0600 real,
    sal_0700 real,
    sal_0800 real,
    sal_0900 real,
    sal_1000 real,
    sal_1100 real,
    sal_1200 real,
    sal_1300 real,
    sal_1400 real,
    sal_1500 real,
    sal_1750 real,
    sal_2000 real,
    sal_2500 real,
    sal_3000 real,
    sal_3500 real,
    sal_4000 real,
    sal_4500 real,
    sal_5000 real,
    sal_5500 real
);


ALTER TABLE mfdata.sal_16_grid OWNER TO rkottman;

--
-- Name: seasons; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE seasons (
    season text NOT NULL,
    code smallint NOT NULL
);


ALTER TABLE mfdata.seasons OWNER TO rkottman;

--
-- Name: TABLE seasons; Type: COMMENT; Schema: mfdata; Owner: rkottman
--

COMMENT ON TABLE seasons IS 'standarad season coding';


--
-- Name: sil_00_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_00_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real,
    sil_0600 real,
    sil_0700 real,
    sil_0800 real,
    sil_0900 real,
    sil_1000 real,
    sil_1100 real,
    sil_1200 real,
    sil_1300 real,
    sil_1400 real,
    sil_1500 real,
    sil_1750 real,
    sil_2000 real,
    sil_2500 real,
    sil_3000 real,
    sil_3500 real,
    sil_4000 real,
    sil_4500 real,
    sil_5000 real,
    sil_5500 real
);


ALTER TABLE mfdata.sil_00_grid OWNER TO rkottman;

--
-- Name: sil_01_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_01_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_01_grid OWNER TO rkottman;

--
-- Name: sil_02_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_02_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_02_grid OWNER TO rkottman;

--
-- Name: sil_03_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_03_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_03_grid OWNER TO rkottman;

--
-- Name: sil_04_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_04_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_04_grid OWNER TO rkottman;

--
-- Name: sil_05_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_05_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_05_grid OWNER TO rkottman;

--
-- Name: sil_06_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_06_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_06_grid OWNER TO rkottman;

--
-- Name: sil_07_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_07_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_07_grid OWNER TO rkottman;

--
-- Name: sil_08_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_08_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_08_grid OWNER TO rkottman;

--
-- Name: sil_09_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_09_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_09_grid OWNER TO rkottman;

--
-- Name: sil_10_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_10_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_10_grid OWNER TO rkottman;

--
-- Name: sil_11_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_11_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_11_grid OWNER TO rkottman;

--
-- Name: sil_13_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_13_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_13_grid OWNER TO rkottman;

--
-- Name: sil_14_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_14_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_14_grid OWNER TO rkottman;

--
-- Name: sil_15_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_15_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_15_grid OWNER TO rkottman;

--
-- Name: sil_16_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE sil_16_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    sil_0000 real,
    sil_0010 real,
    sil_0020 real,
    sil_0030 real,
    sil_0050 real,
    sil_0075 real,
    sil_0100 real,
    sil_0125 real,
    sil_0150 real,
    sil_0200 real,
    sil_0250 real,
    sil_0300 real,
    sil_0400 real,
    sil_0500 real
);


ALTER TABLE mfdata.sil_16_grid OWNER TO rkottman;

--
-- Name: standard_levels; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE standard_levels (
    lev integer,
    depth integer NOT NULL
);


ALTER TABLE mfdata.standard_levels OWNER TO rkottman;

--
-- Name: temp_00_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_00_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real,
    temp_1750 real,
    temp_2000 real,
    temp_2500 real,
    temp_3000 real,
    temp_3500 real,
    temp_4000 real,
    temp_4500 real,
    temp_5000 real,
    temp_5500 real
);


ALTER TABLE mfdata.temp_00_grid OWNER TO rkottman;

--
-- Name: temp_01_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_01_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real
);


ALTER TABLE mfdata.temp_01_grid OWNER TO rkottman;

--
-- Name: temp_02_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_02_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real
);


ALTER TABLE mfdata.temp_02_grid OWNER TO rkottman;

--
-- Name: temp_03_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_03_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real
);


ALTER TABLE mfdata.temp_03_grid OWNER TO rkottman;

--
-- Name: temp_04_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_04_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real
);


ALTER TABLE mfdata.temp_04_grid OWNER TO rkottman;

--
-- Name: temp_05_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_05_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real
);


ALTER TABLE mfdata.temp_05_grid OWNER TO rkottman;

--
-- Name: temp_06_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_06_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real
);


ALTER TABLE mfdata.temp_06_grid OWNER TO rkottman;

--
-- Name: temp_07_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_07_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real
);


ALTER TABLE mfdata.temp_07_grid OWNER TO rkottman;

--
-- Name: temp_08_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_08_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real
);


ALTER TABLE mfdata.temp_08_grid OWNER TO rkottman;

--
-- Name: temp_09_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_09_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real
);


ALTER TABLE mfdata.temp_09_grid OWNER TO rkottman;

--
-- Name: temp_10_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_10_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real
);


ALTER TABLE mfdata.temp_10_grid OWNER TO rkottman;

--
-- Name: temp_11_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_11_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real
);


ALTER TABLE mfdata.temp_11_grid OWNER TO rkottman;

--
-- Name: temp_12_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_12_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real
);


ALTER TABLE mfdata.temp_12_grid OWNER TO rkottman;

--
-- Name: temp_13_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_13_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real,
    temp_1750 real,
    temp_2000 real,
    temp_2500 real,
    temp_3000 real,
    temp_3500 real,
    temp_4000 real,
    temp_4500 real,
    temp_5000 real,
    temp_5500 real
);


ALTER TABLE mfdata.temp_13_grid OWNER TO rkottman;

--
-- Name: temp_14_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_14_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real,
    temp_1750 real,
    temp_2000 real,
    temp_2500 real,
    temp_3000 real,
    temp_3500 real,
    temp_4000 real,
    temp_4500 real,
    temp_5000 real,
    temp_5500 real
);


ALTER TABLE mfdata.temp_14_grid OWNER TO rkottman;

--
-- Name: temp_15_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_15_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real,
    temp_1750 real,
    temp_2000 real,
    temp_2500 real,
    temp_3000 real,
    temp_3500 real,
    temp_4000 real,
    temp_4500 real,
    temp_5000 real,
    temp_5500 real
);


ALTER TABLE mfdata.temp_15_grid OWNER TO rkottman;

--
-- Name: temp_16_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE temp_16_grid (
    woa05_id numeric NOT NULL,
    gid integer,
    the_geom public.geometry,
    temp_0000 real,
    temp_0010 real,
    temp_0020 real,
    temp_0030 real,
    temp_0050 real,
    temp_0075 real,
    temp_0100 real,
    temp_0125 real,
    temp_0150 real,
    temp_0200 real,
    temp_0250 real,
    temp_0300 real,
    temp_0400 real,
    temp_0500 real,
    temp_0600 real,
    temp_0700 real,
    temp_0800 real,
    temp_0900 real,
    temp_1000 real,
    temp_1100 real,
    temp_1200 real,
    temp_1300 real,
    temp_1400 real,
    temp_1500 real,
    temp_1750 real,
    temp_2000 real,
    temp_2500 real,
    temp_3000 real,
    temp_3500 real,
    temp_4000 real,
    temp_4500 real,
    temp_5000 real,
    temp_5500 real
);


ALTER TABLE mfdata.temp_16_grid OWNER TO rkottman;

--
-- Name: units; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE units (
    unit_id integer,
    parameter_long character varying(255),
    parameter_short character varying(255),
    parameter_form character varying(255),
    standard_unit_long character varying(255),
    standard_unit_short character varying(255),
    param_id integer NOT NULL
);


ALTER TABLE mfdata.units OWNER TO rkottman;

--
-- Name: woa05_grid_gid_seq; Type: SEQUENCE; Schema: mfdata; Owner: rkottman
--

CREATE SEQUENCE woa05_grid_gid_seq
    START WITH 64800
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfdata.woa05_grid_gid_seq OWNER TO rkottman;

--
-- Name: woa05_grid; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE woa05_grid (
    gid integer DEFAULT nextval('woa05_grid_gid_seq'::regclass) NOT NULL,
    woa05_id numeric,
    the_geom public.geometry,
    CONSTRAINT woa05_grid_the_geom_check CHECK (((public.geometrytype(the_geom) = 'MULTIPOLYGON'::text) OR (the_geom IS NULL))),
    CONSTRAINT woa05_grid_the_geom_check1 CHECK ((public.ndims(the_geom) = 2)),
    CONSTRAINT woa05_grid_the_geom_check2 CHECK ((public.srid(the_geom) = (-1)))
);


ALTER TABLE mfdata.woa05_grid OWNER TO rkottman;

--
-- Name: woa05_level; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE woa05_level (
    woa05_level_id smallint NOT NULL,
    woa05_depth character varying,
    woa05_depth_code character varying,
    woa05_depth_f real
);


ALTER TABLE mfdata.woa05_level OWNER TO rkottman;

--
-- Name: woa05_variable; Type: TABLE; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE TABLE woa05_variable (
    woa05_var character varying,
    woa05_nblevel smallint
);


ALTER TABLE mfdata.woa05_variable OWNER TO rkottman;

--
-- Name: wod05_osd_all_wod05_2id_seq; Type: SEQUENCE; Schema: mfdata; Owner: rkottman
--

CREATE SEQUENCE wod05_osd_all_wod05_2id_seq
    START WITH 22833287
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfdata.wod05_osd_all_wod05_2id_seq OWNER TO rkottman;

SET search_path = mflayers, pg_catalog;

--
-- Name: boundaries; Type: TABLE; Schema: mflayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE boundaries (
    gid integer NOT NULL,
    objectid integer,
    iso3_code character varying,
    status character varying,
    capital character varying,
    terr_id integer,
    terr_name character varying,
    color_code character varying,
    shape_leng numeric,
    shape_le_1 numeric,
    shape_area numeric,
    the_geom public.geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((public.ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((public.geometrytype(the_geom) = 'MULTIPOLYGON'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((public.srid(the_geom) = (-1)))
);


ALTER TABLE mflayers.boundaries OWNER TO rkottman;

--
-- Name: boundaries_gid_seq; Type: SEQUENCE; Schema: mflayers; Owner: rkottman
--

CREATE SEQUENCE boundaries_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mflayers.boundaries_gid_seq OWNER TO rkottman;

--
-- Name: boundaries_gid_seq; Type: SEQUENCE OWNED BY; Schema: mflayers; Owner: rkottman
--

ALTER SEQUENCE boundaries_gid_seq OWNED BY boundaries.gid;


--
-- Name: coordinates; Type: TABLE; Schema: mflayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE coordinates (
    label character varying NOT NULL,
    geom public.geometry,
    direction text,
    CONSTRAINT enforce_dims_the_geom CHECK ((public.ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((public.geometrytype(geom) = 'MULTILINESTRING'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((public.srid(geom) = (-1)))
);


ALTER TABLE mflayers.coordinates OWNER TO rkottman;

--
-- Name: lakes; Type: TABLE; Schema: mflayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE lakes (
    gid integer NOT NULL,
    name character varying,
    shape_leng numeric,
    shape_le_1 numeric,
    shape_area numeric,
    the_geom public.geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((public.ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((public.geometrytype(the_geom) = 'MULTIPOLYGON'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((public.srid(the_geom) = (-1)))
);


ALTER TABLE mflayers.lakes OWNER TO rkottman;

--
-- Name: lakes_gid_seq; Type: SEQUENCE; Schema: mflayers; Owner: rkottman
--

CREATE SEQUENCE lakes_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mflayers.lakes_gid_seq OWNER TO rkottman;

--
-- Name: lakes_gid_seq; Type: SEQUENCE OWNED BY; Schema: mflayers; Owner: rkottman
--

ALTER SEQUENCE lakes_gid_seq OWNED BY lakes.gid;


--
-- Name: undersea_arc; Type: TABLE; Schema: mflayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE undersea_arc (
    gid integer NOT NULL,
    id integer,
    fromnode integer,
    tonode integer,
    leftpolyg integer,
    rightpoly integer,
    oid_ integer,
    id_1 integer,
    geogr_name character varying,
    chart_type character varying,
    ref double precision,
    history character varying,
    remarks character varying,
    the_geom public.geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((public.ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((public.geometrytype(the_geom) = 'MULTILINESTRING'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((public.srid(the_geom) = (-1)))
);


ALTER TABLE mflayers.undersea_arc OWNER TO rkottman;

--
-- Name: undersea_arc_gid_seq; Type: SEQUENCE; Schema: mflayers; Owner: rkottman
--

CREATE SEQUENCE undersea_arc_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mflayers.undersea_arc_gid_seq OWNER TO rkottman;

--
-- Name: undersea_arc_gid_seq; Type: SEQUENCE OWNED BY; Schema: mflayers; Owner: rkottman
--

ALTER SEQUENCE undersea_arc_gid_seq OWNED BY undersea_arc.gid;


--
-- Name: undersea_point; Type: TABLE; Schema: mflayers; Owner: rkottman; Tablespace: 
--

CREATE TABLE undersea_point (
    gid integer NOT NULL,
    id bigint,
    name_feat character varying,
    lat1 numeric,
    long1 numeric,
    the_geom public.geometry,
    CONSTRAINT enforce_dims_the_geom CHECK ((public.ndims(the_geom) = 2)),
    CONSTRAINT enforce_geotype_the_geom CHECK (((public.geometrytype(the_geom) = 'POINT'::text) OR (the_geom IS NULL))),
    CONSTRAINT enforce_srid_the_geom CHECK ((public.srid(the_geom) = (-1)))
);


ALTER TABLE mflayers.undersea_point OWNER TO rkottman;

--
-- Name: undersea_point_gid_seq; Type: SEQUENCE; Schema: mflayers; Owner: rkottman
--

CREATE SEQUENCE undersea_point_gid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mflayers.undersea_point_gid_seq OWNER TO rkottman;

--
-- Name: undersea_point_gid_seq; Type: SEQUENCE OWNED BY; Schema: mflayers; Owner: rkottman
--

ALTER SEQUENCE undersea_point_gid_seq OWNED BY undersea_point.gid;


SET search_path = mfmetadata, pg_catalog;

--
-- Name: cl_address_id_cl_address_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE cl_address_id_cl_address_seq
    START WITH 2
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.cl_address_id_cl_address_seq OWNER TO rkottman;

--
-- Name: cl_address; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE cl_address (
    delpoint character varying(80),
    city character varying(60),
    adminarea character varying(60),
    postcode character varying(40),
    country character varying(60),
    emailadd character varying(60),
    id_cl_address integer DEFAULT nextval('cl_address_id_cl_address_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.cl_address OWNER TO rkottman;

--
-- Name: cl_citation_id_cl_citation_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE cl_citation_id_cl_citation_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.cl_citation_id_cl_citation_seq OWNER TO rkottman;

--
-- Name: cl_citation; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE cl_citation (
    restitle character varying(100),
    resrefdate date,
    id_cl_citation integer DEFAULT nextval('cl_citation_id_cl_citation_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.cl_citation OWNER TO rkottman;

--
-- Name: cl_contact_id_cl_contact_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE cl_contact_id_cl_contact_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.cl_contact_id_cl_contact_seq OWNER TO rkottman;

--
-- Name: cl_contact; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE cl_contact (
    cntphone integer,
    cntaddress integer,
    cntonlineres integer,
    id_cl_contact integer DEFAULT nextval('cl_contact_id_cl_contact_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.cl_contact OWNER TO rkottman;

--
-- Name: cl_onlineresource_id_cl_onlineresource_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE cl_onlineresource_id_cl_onlineresource_seq
    START WITH 2
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.cl_onlineresource_id_cl_onlineresource_seq OWNER TO rkottman;

--
-- Name: cl_onlineresource; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE cl_onlineresource (
    linkage character varying(200),
    id_cl_onlineresource integer DEFAULT nextval('cl_onlineresource_id_cl_onlineresource_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.cl_onlineresource OWNER TO rkottman;

--
-- Name: cl_responsibleparty_id_cl_responsibleparty_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE cl_responsibleparty_id_cl_responsibleparty_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.cl_responsibleparty_id_cl_responsibleparty_seq OWNER TO rkottman;

--
-- Name: cl_responsibleparty; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE cl_responsibleparty (
    rpindname character varying(80),
    rporgname character varying(80),
    rpcntinfo integer,
    role integer,
    id_cl_responsibleparty integer DEFAULT nextval('cl_responsibleparty_id_cl_responsibleparty_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.cl_responsibleparty OWNER TO rkottman;

--
-- Name: cl_rolecode_id_cl_rolecode_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE cl_rolecode_id_cl_rolecode_seq
    START WITH 11
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.cl_rolecode_id_cl_rolecode_seq OWNER TO rkottman;

--
-- Name: cl_rolecode; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE cl_rolecode (
    rolecd character varying(40),
    id_cl_rolecode integer DEFAULT nextval('cl_rolecode_id_cl_rolecode_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.cl_rolecode OWNER TO rkottman;

--
-- Name: cl_telephone_id_cl_telephone_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE cl_telephone_id_cl_telephone_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.cl_telephone_id_cl_telephone_seq OWNER TO rkottman;

--
-- Name: cl_telephone; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE cl_telephone (
    voicenum character varying(40),
    faxnum character varying(40),
    id_cl_telephone integer DEFAULT nextval('cl_telephone_id_cl_telephone_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.cl_telephone OWNER TO rkottman;

--
-- Name: dq_dataquality_id_dq_quality_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE dq_dataquality_id_dq_quality_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.dq_dataquality_id_dq_quality_seq OWNER TO rkottman;

--
-- Name: dq_dataquality; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE dq_dataquality (
    datalineage integer,
    id_dq_quality integer DEFAULT nextval('dq_dataquality_id_dq_quality_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.dq_dataquality OWNER TO rkottman;

--
-- Name: ex_extent_id_ex_extent_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE ex_extent_id_ex_extent_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.ex_extent_id_ex_extent_seq OWNER TO rkottman;

--
-- Name: ex_extent; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE ex_extent (
    westbl character varying(40),
    eastbl character varying(40),
    southbl character varying(40),
    northbl character varying(40),
    extemp character varying(40),
    id_ex_extent integer DEFAULT nextval('ex_extent_id_ex_extent_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.ex_extent OWNER TO rkottman;

--
-- Name: li_lineage_id_li_lineage_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE li_lineage_id_li_lineage_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.li_lineage_id_li_lineage_seq OWNER TO rkottman;

--
-- Name: li_lineage; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE li_lineage (
    statement text,
    id_li_lineage integer DEFAULT nextval('li_lineage_id_li_lineage_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.li_lineage OWNER TO rkottman;

--
-- Name: md_charactersetcode_id_md_charactersetcode_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE md_charactersetcode_id_md_charactersetcode_seq
    START WITH 29
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.md_charactersetcode_id_md_charactersetcode_seq OWNER TO rkottman;

--
-- Name: md_charactersetcode; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE md_charactersetcode (
    charsetcd character varying(40),
    id_md_charactersetcode integer DEFAULT nextval('md_charactersetcode_id_md_charactersetcode_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.md_charactersetcode OWNER TO rkottman;

--
-- Name: md_digitaltransferoptions_id_md_digitaltransferoptions_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE md_digitaltransferoptions_id_md_digitaltransferoptions_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.md_digitaltransferoptions_id_md_digitaltransferoptions_seq OWNER TO rkottman;

--
-- Name: md_digitaltransferoptions; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE md_digitaltransferoptions (
    onlinesrc integer,
    id_md_digitaltransferoptions integer DEFAULT nextval('md_digitaltransferoptions_id_md_digitaltransferoptions_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.md_digitaltransferoptions OWNER TO rkottman;

--
-- Name: md_distribution_id_md_distribution_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE md_distribution_id_md_distribution_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.md_distribution_id_md_distribution_seq OWNER TO rkottman;

--
-- Name: md_distribution; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE md_distribution (
    distformat integer,
    disttranops integer,
    id_md_distribution integer DEFAULT nextval('md_distribution_id_md_distribution_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.md_distribution OWNER TO rkottman;

--
-- Name: md_format_id_md_format_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE md_format_id_md_format_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.md_format_id_md_format_seq OWNER TO rkottman;

--
-- Name: md_format; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE md_format (
    formatname character varying(80),
    formatver character varying(40),
    id_md_format integer DEFAULT nextval('md_format_id_md_format_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.md_format OWNER TO rkottman;

--
-- Name: md_identification_id_md_identification_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE md_identification_id_md_identification_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.md_identification_id_md_identification_seq OWNER TO rkottman;

--
-- Name: md_identification; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE md_identification (
    idcitation integer,
    idabs text,
    idpoc integer,
    spatreptype integer,
    datascale integer,
    datalang character varying(40),
    datachar integer,
    tpcat integer,
    dataext integer,
    id_md_identification integer DEFAULT nextval('md_identification_id_md_identification_seq'::regclass) NOT NULL,
    suppinfo text
);


ALTER TABLE mfmetadata.md_identification OWNER TO rkottman;

--
-- Name: md_metadata_mdfileid_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE md_metadata_mdfileid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.md_metadata_mdfileid_seq OWNER TO rkottman;

--
-- Name: md_metadata; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE md_metadata (
    mdlang character varying(80),
    mdchar integer,
    mdcontact integer,
    mddatest date,
    mdstanname character varying(60),
    mdstanver character varying(60),
    dataidinfo integer,
    distinfo integer,
    refsysinfo integer,
    dqinfo integer NOT NULL,
    mdfileid integer DEFAULT nextval('md_metadata_mdfileid_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.md_metadata OWNER TO rkottman;

--
-- Name: md_referencesystem_id_md_referencesystem_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE md_referencesystem_id_md_referencesystem_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.md_referencesystem_id_md_referencesystem_seq OWNER TO rkottman;

--
-- Name: md_referencesystem; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE md_referencesystem (
    refsysid character varying(100),
    id_md_referencesystem integer DEFAULT nextval('md_referencesystem_id_md_referencesystem_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.md_referencesystem OWNER TO rkottman;

--
-- Name: md_resolution_id_md_resolution_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE md_resolution_id_md_resolution_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.md_resolution_id_md_resolution_seq OWNER TO rkottman;

--
-- Name: md_resolution; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE md_resolution (
    scaledist character varying(80),
    id_md_resolution integer DEFAULT nextval('md_resolution_id_md_resolution_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.md_resolution OWNER TO rkottman;

--
-- Name: md_spatialrepresentationtypec_id_spatialrepresentationtypec_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE md_spatialrepresentationtypec_id_spatialrepresentationtypec_seq
    START WITH 6
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.md_spatialrepresentationtypec_id_spatialrepresentationtypec_seq OWNER TO rkottman;

--
-- Name: md_spatialrepresentationtypecode; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE md_spatialrepresentationtypecode (
    spatreptypcd character varying(40),
    id_spatialrepresentationtypecode integer DEFAULT nextval('md_spatialrepresentationtypec_id_spatialrepresentationtypec_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.md_spatialrepresentationtypecode OWNER TO rkottman;

--
-- Name: md_topiccategorycode_id_md_topiccategorycode_seq; Type: SEQUENCE; Schema: mfmetadata; Owner: rkottman
--

CREATE SEQUENCE md_topiccategorycode_id_md_topiccategorycode_seq
    START WITH 19
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE mfmetadata.md_topiccategorycode_id_md_topiccategorycode_seq OWNER TO rkottman;

--
-- Name: md_topiccategorycode; Type: TABLE; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

CREATE TABLE md_topiccategorycode (
    topiccatcd character varying(80),
    id_md_topiccategorycode integer DEFAULT nextval('md_topiccategorycode_id_md_topiccategorycode_seq'::regclass) NOT NULL
);


ALTER TABLE mfmetadata.md_topiccategorycode OWNER TO rkottman;

SET search_path = mfresults, pg_catalog;

--
-- Name: alk_raw; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE alk_raw (
    idw_alk double precision,
    month smallint,
    year smallint
);


ALTER TABLE mfresults.alk_raw OWNER TO megxuser;

--
-- Name: chl_raw; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE chl_raw (
    idw_chl double precision,
    month smallint,
    year smallint
);


ALTER TABLE mfresults.chl_raw OWNER TO megxuser;

--
-- Name: chloro_id; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE chloro_id (
    woa05_id numeric NOT NULL
);


ALTER TABLE mfresults.chloro_id OWNER TO megxuser;

--
-- Name: chloro_res; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE chloro_res (
    chloro real,
    coef_var real,
    samp_size real
);


ALTER TABLE mfresults.chloro_res OWNER TO megxuser;

--
-- Name: nitnat_raw; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE nitnat_raw (
    idw_nitnat double precision,
    month smallint,
    year smallint
);


ALTER TABLE mfresults.nitnat_raw OWNER TO megxuser;

--
-- Name: nitra_raw; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE nitra_raw (
    idw_nitra double precision,
    month smallint,
    year smallint
);


ALTER TABLE mfresults.nitra_raw OWNER TO megxuser;

--
-- Name: nitri_raw; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE nitri_raw (
    idw_nitri double precision,
    month smallint,
    year smallint
);


ALTER TABLE mfresults.nitri_raw OWNER TO megxuser;

--
-- Name: oxy_raw; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE oxy_raw (
    idw_oxy double precision,
    month smallint,
    year smallint
);


ALTER TABLE mfresults.oxy_raw OWNER TO megxuser;

--
-- Name: ph_raw; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE ph_raw (
    idw_ph double precision,
    month smallint,
    year smallint
);


ALTER TABLE mfresults.ph_raw OWNER TO megxuser;

--
-- Name: phosph_raw; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE phosph_raw (
    idw_phosph double precision,
    month smallint,
    year smallint
);


ALTER TABLE mfresults.phosph_raw OWNER TO megxuser;

--
-- Name: plank_raw; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE plank_raw (
    idw_plank double precision,
    month smallint,
    year smallint
);


ALTER TABLE mfresults.plank_raw OWNER TO megxuser;

--
-- Name: sal_raw; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE sal_raw (
    idw_sal double precision,
    month smallint,
    year smallint
);


ALTER TABLE mfresults.sal_raw OWNER TO megxuser;

--
-- Name: sil_raw; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE sil_raw (
    idw_sil double precision,
    month smallint,
    year smallint
);


ALTER TABLE mfresults.sil_raw OWNER TO megxuser;

--
-- Name: temp_raw; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE temp_raw (
    idw_temp double precision,
    month smallint,
    year smallint
);


ALTER TABLE mfresults.temp_raw OWNER TO megxuser;

--
-- Name: tmp_wod05; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE tmp_wod05 (
    distance_dd double precision,
    longitude real,
    latitude real,
    wod05_id integer
);


ALTER TABLE mfresults.tmp_wod05 OWNER TO megxuser;

--
-- Name: user_chloro; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE user_chloro (
    id integer NOT NULL,
    depth real,
    chloro real
);


ALTER TABLE mfresults.user_chloro OWNER TO megxuser;

--
-- Name: user_interpol; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE user_interpol (
    id integer,
    depth real,
    temperature real,
    sal real,
    oxy_dis real,
    oxy_util real,
    oxy_sat real,
    nitr real,
    phosph real,
    sil real,
    chloro real
);


ALTER TABLE mfresults.user_interpol OWNER TO megxuser;

--
-- Name: user_ss; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE user_ss (
    id integer NOT NULL,
    lon real,
    lat real,
    depth real,
    period text,
    annee integer
);


ALTER TABLE mfresults.user_ss OWNER TO megxuser;

--
-- Name: user_ss_vision; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE user_ss_vision (
    id integer NOT NULL,
    lon real,
    lat real,
    depth real,
    period text,
    annee integer
);


ALTER TABLE mfresults.user_ss_vision OWNER TO megxuser;

--
-- Name: user_woa; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE user_woa (
    id integer NOT NULL,
    temperature real,
    sal real,
    oxy_dis real,
    oxy_util real,
    oxy_sat real,
    nitr real,
    phosph real,
    sil real
);


ALTER TABLE mfresults.user_woa OWNER TO megxuser;

--
-- Name: user_woa_copy; Type: TABLE; Schema: mfresults; Owner: rkottman; Tablespace: 
--

CREATE TABLE user_woa_copy (
    id integer NOT NULL,
    temperature real,
    sal real,
    oxy_dis real,
    oxy_util real,
    oxy_sat real,
    nitr real,
    phosph real,
    sil real
);


ALTER TABLE mfresults.user_woa_copy OWNER TO rkottman;

--
-- Name: woa_all_param; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE woa_all_param (
    sample_id real NOT NULL,
    temp real,
    sal real,
    oxy_dis real,
    oxy_util real,
    oxy_sat real,
    nitr real,
    phosph real,
    sil real,
    chloro real
);


ALTER TABLE mfresults.woa_all_param OWNER TO megxuser;

--
-- Name: woa_id; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE woa_id (
    woa05_id numeric
);


ALTER TABLE mfresults.woa_id OWNER TO megxuser;

--
-- Name: woa_res; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE woa_res (
    valup real,
    valdown real
);


ALTER TABLE mfresults.woa_res OWNER TO megxuser;

--
-- Name: wod_all_param; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE wod_all_param (
    param_id integer,
    averages real
);


ALTER TABLE mfresults.wod_all_param OWNER TO megxuser;

--
-- Name: wod_averages; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE wod_averages (
    param_id integer,
    param_avg real,
    param_var real,
    month_nb integer,
    month integer
);


ALTER TABLE mfresults.wod_averages OWNER TO megxuser;

--
-- Name: wod_raw_tot; Type: TABLE; Schema: mfresults; Owner: megxuser; Tablespace: 
--

CREATE TABLE wod_raw_tot (
    param_raw real,
    month real,
    year real,
    param_id integer
);


ALTER TABLE mfresults.wod_raw_tot OWNER TO megxuser;

SET search_path = pfam_23, pg_catalog;

--
-- Name: architecture_auto_architecture_seq; Type: SEQUENCE; Schema: pfam_23; Owner: pfam_admin
--

CREATE SEQUENCE architecture_auto_architecture_seq
    START WITH 48635
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pfam_23.architecture_auto_architecture_seq OWNER TO pfam_admin;

--
-- Name: architecture; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE architecture (
    auto_architecture integer DEFAULT nextval('architecture_auto_architecture_seq'::regclass) NOT NULL,
    architecture text,
    type_example integer DEFAULT 0 NOT NULL,
    no_seqs integer DEFAULT 0 NOT NULL,
    architecture_acc text,
    CONSTRAINT architecture_no_seqs_check CHECK ((no_seqs >= 0)),
    CONSTRAINT architecture_type_example_check CHECK ((type_example >= 0))
);


ALTER TABLE pfam_23.architecture OWNER TO pfam_admin;

--
-- Name: dead_clans; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE dead_clans (
    clan_acc text DEFAULT ''::text NOT NULL,
    clan_description text,
    clan_membership text NOT NULL,
    comment text,
    forward_to text,
    _user text,
    killed timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE pfam_23.dead_clans OWNER TO pfam_admin;

--
-- Name: dead_families; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE dead_families (
    pfama_acc text DEFAULT ''::text NOT NULL,
    pfama_id text DEFAULT ''::text NOT NULL,
    comment text,
    forward_to text
);


ALTER TABLE pfam_23.dead_families OWNER TO pfam_admin;

--
-- Name: genome_seqs; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE genome_seqs (
    ncbi_code integer DEFAULT 0 NOT NULL,
    auto_pfamseq integer DEFAULT 0 NOT NULL,
    auto_pfama integer DEFAULT 0 NOT NULL,
    count integer DEFAULT 0 NOT NULL,
    CONSTRAINT genome_seqs_auto_pfama_check CHECK ((auto_pfama >= 0)),
    CONSTRAINT genome_seqs_auto_pfamseq_check CHECK ((auto_pfamseq >= 0)),
    CONSTRAINT genome_seqs_count_check CHECK ((count >= 0)),
    CONSTRAINT genome_seqs_ncbi_code_check CHECK ((ncbi_code >= 0))
);


ALTER TABLE pfam_23.genome_seqs OWNER TO pfam_admin;

--
-- Name: genome_species; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE genome_species (
    ncbi_code integer DEFAULT 0 NOT NULL,
    species text,
    grouping text,
    num_distinct_regions integer DEFAULT 0 NOT NULL,
    num_total_regions integer DEFAULT 0 NOT NULL,
    num_proteins integer DEFAULT 0 NOT NULL,
    sequence_coverage integer DEFAULT 0 NOT NULL,
    residue_coverage integer DEFAULT 0 NOT NULL,
    total_genome_proteins integer DEFAULT 0 NOT NULL,
    total_aa_length bigint DEFAULT (0)::bigint NOT NULL,
    total_aa_covered integer DEFAULT 0,
    total_seqs_covered integer DEFAULT 0,
    CONSTRAINT genome_species_ncbi_code_check CHECK ((ncbi_code >= 0)),
    CONSTRAINT genome_species_num_distinct_regions_check CHECK ((num_distinct_regions >= 0)),
    CONSTRAINT genome_species_num_proteins_check CHECK ((num_proteins >= 0)),
    CONSTRAINT genome_species_num_total_regions_check CHECK ((num_total_regions >= 0)),
    CONSTRAINT genome_species_residue_coverage_check CHECK ((residue_coverage >= 0)),
    CONSTRAINT genome_species_sequence_coverage_check CHECK ((sequence_coverage >= 0)),
    CONSTRAINT genome_species_total_aa_covered_check CHECK ((total_aa_covered >= 0)),
    CONSTRAINT genome_species_total_genome_proteins_check CHECK ((total_genome_proteins >= 0)),
    CONSTRAINT genome_species_total_seqs_covered_check CHECK ((total_seqs_covered >= 0))
);


ALTER TABLE pfam_23.genome_species OWNER TO pfam_admin;

--
-- Name: megx_annotations; Type: TABLE; Schema: pfam_23; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE megx_annotations (
    pfama_id text DEFAULT ''::text NOT NULL,
    pfama_acc text,
    megx_annotation text NOT NULL,
    seed_category text NOT NULL,
    remark text DEFAULT ''::text NOT NULL
);


ALTER TABLE pfam_23.megx_annotations OWNER TO pbuttigi;

--
-- Name: ncbi_map; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE ncbi_map (
    auto_pfamseq integer NOT NULL,
    gi integer DEFAULT 0 NOT NULL,
    CONSTRAINT ncbi_map_auto_pfamseq_check CHECK ((auto_pfamseq >= 0)),
    CONSTRAINT ncbi_map_gi_check CHECK ((gi >= 0))
);


ALTER TABLE pfam_23.ncbi_map OWNER TO pfam_admin;

--
-- Name: ncbi_taxonomy; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE ncbi_taxonomy (
    ncbi_code integer DEFAULT 0 NOT NULL,
    species text DEFAULT ''::text NOT NULL,
    taxonomy text NOT NULL,
    CONSTRAINT ncbi_taxonomy_ncbi_code_check CHECK ((ncbi_code >= 0))
);


ALTER TABLE pfam_23.ncbi_taxonomy OWNER TO pfam_admin;

--
-- Name: nested_domains; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE nested_domains (
    auto_pfama integer DEFAULT 0 NOT NULL,
    nests_auto_pfama integer DEFAULT 0 NOT NULL,
    CONSTRAINT nested_domains_auto_pfama_check CHECK ((auto_pfama >= 0)),
    CONSTRAINT nested_domains_nests_auto_pfama_check CHECK ((nests_auto_pfama >= 0))
);


ALTER TABLE pfam_23.nested_domains OWNER TO pfam_admin;

--
-- Name: pdb_auto_pdb_seq; Type: SEQUENCE; Schema: pfam_23; Owner: pfam_admin
--

CREATE SEQUENCE pdb_auto_pdb_seq
    START WITH 35820
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pfam_23.pdb_auto_pdb_seq OWNER TO pfam_admin;

--
-- Name: pdb; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE pdb (
    auto_pdb integer DEFAULT nextval('pdb_auto_pdb_seq'::regclass) NOT NULL,
    pdb_id character varying(5) DEFAULT ''::character varying NOT NULL,
    header text,
    title text,
    date text,
    resolution numeric(5,2) DEFAULT 0.00,
    experiment_short text,
    experiment_long text,
    pubmed_id integer,
    CONSTRAINT pdb_pubmed_id_check CHECK ((pubmed_id >= 0))
);


ALTER TABLE pfam_23.pdb OWNER TO pfam_admin;

--
-- Name: pfama; Type: TABLE; Schema: pfam_23; Owner: ikostadi; Tablespace: 
--

CREATE TABLE pfama (
    auto_pfama bigint NOT NULL,
    pfama_acc text DEFAULT ''::text NOT NULL,
    pfama_id text DEFAULT ''::text NOT NULL,
    description text,
    model_length integer,
    author text,
    seed_source text,
    alignment_method text,
    full_alignment_method text,
    _type text,
    ls_sequence_ga numeric(16,4) DEFAULT NULL::numeric,
    ls_domain_ga numeric(16,4) DEFAULT NULL::numeric,
    fs_sequence_ga numeric(16,4) DEFAULT NULL::numeric,
    fs_domain_ga numeric(16,4) DEFAULT NULL::numeric,
    ls_sequence_tc numeric(16,4) DEFAULT NULL::numeric,
    ls_domain_tc numeric(16,4) DEFAULT NULL::numeric,
    fs_sequence_tc numeric(16,4) DEFAULT NULL::numeric,
    fs_domain_tc numeric(16,4) DEFAULT NULL::numeric,
    ls_sequence_nc numeric(16,4) DEFAULT NULL::numeric,
    ls_domain_nc numeric(16,4) DEFAULT NULL::numeric,
    fs_sequence_nc numeric(16,4) DEFAULT NULL::numeric,
    fs_domain_nc numeric(16,4) DEFAULT NULL::numeric,
    ls_mu numeric(16,4) DEFAULT NULL::numeric,
    ls_kappa numeric(16,4) DEFAULT NULL::numeric,
    fs_mu numeric(16,4) DEFAULT NULL::numeric,
    fs_kappa numeric(16,4) DEFAULT NULL::numeric,
    _comment text,
    previous_id text,
    hmmbuild_ls text,
    hmmcalibrate_ls text,
    hmmbuild_fs text,
    hmmcalibrate_fs text,
    num_seed integer,
    num_full integer,
    updated timestamp without time zone DEFAULT now() NOT NULL,
    created timestamp without time zone,
    _version smallint,
    number_archs integer,
    number_species integer,
    number_structures integer,
    number_ncbi integer,
    number_meta integer,
    average_length numeric(6,1) DEFAULT NULL::numeric,
    percentage_id integer,
    average_coverage numeric(6,2) DEFAULT NULL::numeric,
    change_status text,
    seed_consensus text,
    full_consensus text,
    CONSTRAINT pfama_full_alignment_method_check CHECK ((full_alignment_method = ANY (ARRAY['globalfirst'::text, 'localfirst'::text, 'byscore'::text])))
);


ALTER TABLE pfam_23.pfama OWNER TO ikostadi;

--
-- Name: pfama_architecture; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE pfama_architecture (
    auto_pfama integer DEFAULT 0 NOT NULL,
    auto_architecture integer DEFAULT 0 NOT NULL,
    CONSTRAINT pfama_architecture_auto_architecture_check CHECK ((auto_architecture >= 0)),
    CONSTRAINT pfama_architecture_auto_pfama_check CHECK ((auto_pfama >= 0))
);


ALTER TABLE pfam_23.pfama_architecture OWNER TO pfam_admin;

--
-- Name: pfama_auto_pfama_seq; Type: SEQUENCE; Schema: pfam_23; Owner: ikostadi
--

CREATE SEQUENCE pfama_auto_pfama_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pfam_23.pfama_auto_pfama_seq OWNER TO ikostadi;

--
-- Name: pfama_auto_pfama_seq; Type: SEQUENCE OWNED BY; Schema: pfam_23; Owner: ikostadi
--

ALTER SEQUENCE pfama_auto_pfama_seq OWNED BY pfama.auto_pfama;


--
-- Name: pfama_hmm_fs; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE pfama_hmm_fs (
    auto_pfama integer DEFAULT 0 NOT NULL,
    hmm_fs bytea,
    CONSTRAINT pfama_hmm_fs_auto_pfama_check CHECK ((auto_pfama >= 0))
);


ALTER TABLE pfam_23.pfama_hmm_fs OWNER TO pfam_admin;

--
-- Name: pfama_hmm_ls; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE pfama_hmm_ls (
    auto_pfama integer DEFAULT 0 NOT NULL,
    hmm_ls bytea,
    CONSTRAINT pfama_hmm_ls_auto_pfama_check CHECK ((auto_pfama >= 0))
);


ALTER TABLE pfam_23.pfama_hmm_ls OWNER TO pfam_admin;

--
-- Name: pfama_literature_references; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE pfama_literature_references (
    auto_pfama integer DEFAULT 0 NOT NULL,
    auto_lit integer DEFAULT 0 NOT NULL,
    comment text,
    order_added smallint,
    CONSTRAINT pfama_literature_references_auto_lit_check CHECK ((auto_lit >= 0)),
    CONSTRAINT pfama_literature_references_auto_pfama_check CHECK ((auto_pfama >= 0))
);


ALTER TABLE pfam_23.pfama_literature_references OWNER TO pfam_admin;

--
-- Name: pfama_reg_full_auto_pfama_reg_full_seq; Type: SEQUENCE; Schema: pfam_23; Owner: pfam_admin
--

CREATE SEQUENCE pfama_reg_full_auto_pfama_reg_full_seq
    START WITH 51285177
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pfam_23.pfama_reg_full_auto_pfama_reg_full_seq OWNER TO pfam_admin;

--
-- Name: pfama_reg_full; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE pfama_reg_full (
    auto_pfama_reg_full integer DEFAULT nextval('pfama_reg_full_auto_pfama_reg_full_seq'::regclass) NOT NULL,
    auto_pfama integer DEFAULT 0 NOT NULL,
    auto_pfamseq integer DEFAULT 0 NOT NULL,
    seq_start integer DEFAULT 0 NOT NULL,
    seq_end integer DEFAULT 0 NOT NULL,
    model_start integer DEFAULT 0 NOT NULL,
    model_end integer DEFAULT 0 NOT NULL,
    domain_byteas_score double precision DEFAULT (0)::double precision NOT NULL,
    domain_evalue_score text DEFAULT ''::text NOT NULL,
    sequence_byteas_score double precision DEFAULT (0)::double precision NOT NULL,
    sequence_evalue_score text DEFAULT ''::text NOT NULL,
    mode text DEFAULT ''::text NOT NULL,
    significant smallint DEFAULT (0)::smallint NOT NULL,
    cigar text,
    in_full smallint DEFAULT (0)::smallint NOT NULL,
    tree_order integer,
    CONSTRAINT pfama_reg_full_auto_pfama_check CHECK ((auto_pfama >= 0)),
    CONSTRAINT pfama_reg_full_auto_pfamseq_check CHECK ((auto_pfamseq >= 0)),
    CONSTRAINT pfama_reg_full_model_end_check CHECK ((model_end >= 0)),
    CONSTRAINT pfama_reg_full_model_start_check CHECK ((model_start >= 0)),
    CONSTRAINT pfama_reg_full_seq_end_check CHECK ((seq_end >= 0)),
    CONSTRAINT pfama_reg_full_seq_start_check CHECK ((seq_start >= 0))
);


ALTER TABLE pfam_23.pfama_reg_full OWNER TO pfam_admin;

--
-- Name: pfama_reg_seed; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE pfama_reg_seed (
    auto_pfama integer DEFAULT 0 NOT NULL,
    auto_pfamseq integer DEFAULT 0 NOT NULL,
    seq_start integer DEFAULT 0 NOT NULL,
    seq_end integer,
    cigar text,
    tree_order integer,
    CONSTRAINT pfama_reg_seed_auto_pfama_check CHECK ((auto_pfama >= 0)),
    CONSTRAINT pfama_reg_seed_auto_pfamseq_check CHECK ((auto_pfamseq >= 0)),
    CONSTRAINT pfama_reg_seed_seq_end_check CHECK ((seq_end >= 0)),
    CONSTRAINT pfama_reg_seed_seq_start_check CHECK ((seq_start >= 0))
);


ALTER TABLE pfam_23.pfama_reg_seed OWNER TO pfam_admin;

--
-- Name: pfamseq_auto_pfamseq_seq; Type: SEQUENCE; Schema: pfam_23; Owner: pfam_admin
--

CREATE SEQUENCE pfamseq_auto_pfamseq_seq
    START WITH 5979615
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pfam_23.pfamseq_auto_pfamseq_seq OWNER TO pfam_admin;

--
-- Name: pfamseq; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE pfamseq (
    auto_pfamseq integer DEFAULT nextval('pfamseq_auto_pfamseq_seq'::regclass) NOT NULL,
    pfamseq_id text DEFAULT ''::text NOT NULL,
    pfamseq_acc text DEFAULT ''::text NOT NULL,
    seq_version smallint,
    crc64 text DEFAULT ''::text NOT NULL,
    md5 text DEFAULT ''::text NOT NULL,
    description text NOT NULL,
    length integer DEFAULT 0 NOT NULL,
    species text NOT NULL,
    taxonomy text,
    is_fragment smallint,
    current smallint,
    non_cons smallint,
    sequence bytea NOT NULL,
    updated timestamp without time zone DEFAULT now() NOT NULL,
    created timestamp without time zone,
    ncbi_code integer DEFAULT 0,
    genome_seq smallint DEFAULT (0)::smallint,
    auto_architecture integer,
    treefam_acc text,
    CONSTRAINT pfamseq_auto_architecture_check CHECK ((auto_architecture >= 0)),
    CONSTRAINT pfamseq_length_check CHECK ((length >= 0)),
    CONSTRAINT pfamseq_ncbi_code_check CHECK ((ncbi_code >= 0))
);


ALTER TABLE pfam_23.pfamseq OWNER TO pfam_admin;

--
-- Name: secondary_pfamseq_acc; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE secondary_pfamseq_acc (
    auto_pfamseq integer DEFAULT 0 NOT NULL,
    secondary_acc text,
    CONSTRAINT secondary_pfamseq_acc_auto_pfamseq_check CHECK ((auto_pfamseq >= 0))
);


ALTER TABLE pfam_23.secondary_pfamseq_acc OWNER TO pfam_admin;

--
-- Name: version; Type: TABLE; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

CREATE TABLE version (
    pfam_release text,
    pfam_release_date date,
    swiss_prot_version text,
    trembl_version text,
    hmmer_version text,
    pfama_coverage double precision,
    pfamb_additional_coverage double precision,
    pfama_residue_coverage double precision,
    pfamb_additional_residue_coverage double precision,
    number_families integer
);


ALTER TABLE pfam_23.version OWNER TO pfam_admin;

SET search_path = pfam_stage, pg_catalog;

--
-- Name: architecture_auto_architecture_seq; Type: SEQUENCE; Schema: pfam_stage; Owner: pbuttigi
--

CREATE SEQUENCE architecture_auto_architecture_seq
    START WITH 48635
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pfam_stage.architecture_auto_architecture_seq OWNER TO pbuttigi;

--
-- Name: architecture; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE architecture (
    auto_architecture integer DEFAULT nextval('architecture_auto_architecture_seq'::regclass) NOT NULL,
    architecture text,
    type_example integer DEFAULT 0 NOT NULL,
    no_seqs integer DEFAULT 0 NOT NULL,
    architecture_acc text,
    CONSTRAINT architecture_no_seqs_check CHECK ((no_seqs >= 0)),
    CONSTRAINT architecture_type_example_check CHECK ((type_example >= 0))
);


ALTER TABLE pfam_stage.architecture OWNER TO pbuttigi;

--
-- Name: dead_clans; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE dead_clans (
    clan_acc text DEFAULT ''::text NOT NULL,
    clan_description text,
    clan_membership text NOT NULL,
    remark text,
    forward_to text,
    _user text,
    killed timestamp without time zone DEFAULT now() NOT NULL
);


ALTER TABLE pfam_stage.dead_clans OWNER TO pbuttigi;

--
-- Name: dead_families; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE dead_families (
    pfama_acc text DEFAULT ''::text NOT NULL,
    pfama_id text DEFAULT ''::text NOT NULL,
    remark text,
    forward_to text
);


ALTER TABLE pfam_stage.dead_families OWNER TO pbuttigi;

--
-- Name: genome_seqs; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE genome_seqs (
    ncbi_code integer DEFAULT 0 NOT NULL,
    auto_pfamseq integer DEFAULT 0 NOT NULL,
    auto_pfama integer DEFAULT 0 NOT NULL,
    count integer DEFAULT 0 NOT NULL,
    CONSTRAINT genome_seqs_auto_pfama_check CHECK ((auto_pfama >= 0)),
    CONSTRAINT genome_seqs_auto_pfamseq_check CHECK ((auto_pfamseq >= 0)),
    CONSTRAINT genome_seqs_count_check CHECK ((count >= 0)),
    CONSTRAINT genome_seqs_ncbi_code_check CHECK ((ncbi_code >= 0))
);


ALTER TABLE pfam_stage.genome_seqs OWNER TO pbuttigi;

--
-- Name: genome_species; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE genome_species (
    ncbi_code integer DEFAULT 0 NOT NULL,
    species text,
    grouping text,
    num_distinct_regions integer DEFAULT 0 NOT NULL,
    num_total_regions integer DEFAULT 0 NOT NULL,
    num_proteins integer DEFAULT 0 NOT NULL,
    sequence_coverage integer DEFAULT 0 NOT NULL,
    residue_coverage integer DEFAULT 0 NOT NULL,
    total_genome_proteins integer DEFAULT 0 NOT NULL,
    total_aa_length bigint DEFAULT (0)::bigint NOT NULL,
    total_aa_covered integer DEFAULT 0,
    total_seqs_covered integer DEFAULT 0,
    CONSTRAINT genome_species_ncbi_code_check CHECK ((ncbi_code >= 0)),
    CONSTRAINT genome_species_num_distinct_regions_check CHECK ((num_distinct_regions >= 0)),
    CONSTRAINT genome_species_num_proteins_check CHECK ((num_proteins >= 0)),
    CONSTRAINT genome_species_num_total_regions_check CHECK ((num_total_regions >= 0)),
    CONSTRAINT genome_species_residue_coverage_check CHECK ((residue_coverage >= 0)),
    CONSTRAINT genome_species_sequence_coverage_check CHECK ((sequence_coverage >= 0)),
    CONSTRAINT genome_species_total_aa_covered_check CHECK ((total_aa_covered >= 0)),
    CONSTRAINT genome_species_total_genome_proteins_check CHECK ((total_genome_proteins >= 0)),
    CONSTRAINT genome_species_total_seqs_covered_check CHECK ((total_seqs_covered >= 0))
);


ALTER TABLE pfam_stage.genome_species OWNER TO pbuttigi;

--
-- Name: ncbi_map; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE ncbi_map (
    auto_pfamseq integer NOT NULL,
    gi integer DEFAULT 0 NOT NULL,
    CONSTRAINT ncbi_map_auto_pfamseq_check CHECK ((auto_pfamseq >= 0)),
    CONSTRAINT ncbi_map_gi_check CHECK ((gi >= 0))
);


ALTER TABLE pfam_stage.ncbi_map OWNER TO pbuttigi;

--
-- Name: ncbi_taxonomy; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE ncbi_taxonomy (
    ncbi_code integer DEFAULT 0 NOT NULL,
    species text DEFAULT ''::text NOT NULL,
    taxonomy text NOT NULL,
    CONSTRAINT ncbi_taxonomy_ncbi_code_check CHECK ((ncbi_code >= 0))
);


ALTER TABLE pfam_stage.ncbi_taxonomy OWNER TO pbuttigi;

--
-- Name: nested_domains; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE nested_domains (
    auto_pfama integer DEFAULT 0 NOT NULL,
    nests_auto_pfama integer DEFAULT 0 NOT NULL,
    CONSTRAINT nested_domains_auto_pfama_check CHECK ((auto_pfama >= 0)),
    CONSTRAINT nested_domains_nests_auto_pfama_check CHECK ((nests_auto_pfama >= 0))
);


ALTER TABLE pfam_stage.nested_domains OWNER TO pbuttigi;

--
-- Name: pdb_auto_pdb_seq; Type: SEQUENCE; Schema: pfam_stage; Owner: pbuttigi
--

CREATE SEQUENCE pdb_auto_pdb_seq
    START WITH 35820
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pfam_stage.pdb_auto_pdb_seq OWNER TO pbuttigi;

--
-- Name: pdb; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE pdb (
    auto_pdb integer DEFAULT nextval('pdb_auto_pdb_seq'::regclass) NOT NULL,
    pdb_id character varying(5) DEFAULT ''::character varying NOT NULL,
    _header text,
    title text,
    date text,
    resolution numeric(5,2) DEFAULT 0.00,
    experiment_short text,
    experiment_long text,
    pubmed_id integer,
    CONSTRAINT pdb_pubmed_id_check CHECK ((pubmed_id >= 0))
);


ALTER TABLE pfam_stage.pdb OWNER TO pbuttigi;

--
-- Name: pfama; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE pfama (
    auto_pfama bigint NOT NULL,
    pfama_acc text DEFAULT ''::text NOT NULL,
    pfama_id text DEFAULT ''::text NOT NULL,
    description text,
    model_length integer,
    author text,
    seed_source text,
    alignment_method text,
    full_alignment_method text,
    _type text,
    ls_sequence_ga numeric(16,4) DEFAULT NULL::numeric,
    ls_domain_ga numeric(16,4) DEFAULT NULL::numeric,
    fs_sequence_ga numeric(16,4) DEFAULT NULL::numeric,
    fs_domain_ga numeric(16,4) DEFAULT NULL::numeric,
    ls_sequence_tc numeric(16,4) DEFAULT NULL::numeric,
    ls_domain_tc numeric(16,4) DEFAULT NULL::numeric,
    fs_sequence_tc numeric(16,4) DEFAULT NULL::numeric,
    fs_domain_tc numeric(16,4) DEFAULT NULL::numeric,
    ls_sequence_nc numeric(16,4) DEFAULT NULL::numeric,
    ls_domain_nc numeric(16,4) DEFAULT NULL::numeric,
    fs_sequence_nc numeric(16,4) DEFAULT NULL::numeric,
    fs_domain_nc numeric(16,4) DEFAULT NULL::numeric,
    ls_mu numeric(16,4) DEFAULT NULL::numeric,
    ls_kappa numeric(16,4) DEFAULT NULL::numeric,
    fs_mu numeric(16,4) DEFAULT NULL::numeric,
    fs_kappa numeric(16,4) DEFAULT NULL::numeric,
    _comment text,
    previous_id text,
    hmmbuild_ls text,
    hmmcalibrate_ls text,
    hmmbuild_fs text,
    hmmcalibrate_fs text,
    num_seed integer,
    num_full integer,
    updated timestamp without time zone DEFAULT now() NOT NULL,
    created timestamp without time zone,
    _version smallint,
    number_archs integer,
    number_species integer,
    number_structures integer,
    number_ncbi integer,
    number_meta integer,
    average_length numeric(6,1) DEFAULT NULL::numeric,
    percentage_id integer,
    average_coverage numeric(6,2) DEFAULT NULL::numeric,
    change_status text,
    seed_consensus text,
    full_consensus text,
    CONSTRAINT pfama_full_alignment_method_check CHECK ((full_alignment_method = ANY (ARRAY['globalfirst'::text, 'localfirst'::text, 'byscore'::text])))
);


ALTER TABLE pfam_stage.pfama OWNER TO pbuttigi;

--
-- Name: pfama_architecture; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE pfama_architecture (
    auto_pfama integer DEFAULT 0 NOT NULL,
    auto_architecture integer DEFAULT 0 NOT NULL,
    CONSTRAINT pfama_architecture_auto_architecture_check CHECK ((auto_architecture >= 0)),
    CONSTRAINT pfama_architecture_auto_pfama_check CHECK ((auto_pfama >= 0))
);


ALTER TABLE pfam_stage.pfama_architecture OWNER TO pbuttigi;

--
-- Name: pfama_auto_pfama_seq; Type: SEQUENCE; Schema: pfam_stage; Owner: pbuttigi
--

CREATE SEQUENCE pfama_auto_pfama_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pfam_stage.pfama_auto_pfama_seq OWNER TO pbuttigi;

--
-- Name: pfama_auto_pfama_seq; Type: SEQUENCE OWNED BY; Schema: pfam_stage; Owner: pbuttigi
--

ALTER SEQUENCE pfama_auto_pfama_seq OWNED BY pfama.auto_pfama;


--
-- Name: pfama_hmm_fs; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE pfama_hmm_fs (
    auto_pfama integer DEFAULT 0 NOT NULL,
    hmm_fs bytea,
    CONSTRAINT pfama_hmm_fs_auto_pfama_check CHECK ((auto_pfama >= 0))
);


ALTER TABLE pfam_stage.pfama_hmm_fs OWNER TO pbuttigi;

--
-- Name: pfama_hmm_ls; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE pfama_hmm_ls (
    auto_pfama integer DEFAULT 0 NOT NULL,
    hmm_ls bytea,
    CONSTRAINT pfama_hmm_ls_auto_pfama_check CHECK ((auto_pfama >= 0))
);


ALTER TABLE pfam_stage.pfama_hmm_ls OWNER TO pbuttigi;

--
-- Name: pfama_literature_references; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE pfama_literature_references (
    auto_pfama integer DEFAULT 0 NOT NULL,
    auto_lit integer DEFAULT 0 NOT NULL,
    remark text,
    order_added smallint,
    CONSTRAINT pfama_literature_references_auto_lit_check CHECK ((auto_lit >= 0)),
    CONSTRAINT pfama_literature_references_auto_pfama_check CHECK ((auto_pfama >= 0))
);


ALTER TABLE pfam_stage.pfama_literature_references OWNER TO pbuttigi;

--
-- Name: pfama_reg_full_auto_pfama_reg_full_seq; Type: SEQUENCE; Schema: pfam_stage; Owner: pbuttigi
--

CREATE SEQUENCE pfama_reg_full_auto_pfama_reg_full_seq
    START WITH 51285177
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pfam_stage.pfama_reg_full_auto_pfama_reg_full_seq OWNER TO pbuttigi;

--
-- Name: pfama_reg_full; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE pfama_reg_full (
    auto_pfama_reg_full integer DEFAULT nextval('pfama_reg_full_auto_pfama_reg_full_seq'::regclass) NOT NULL,
    auto_pfama integer DEFAULT 0 NOT NULL,
    auto_pfamseq integer DEFAULT 0 NOT NULL,
    seq_start integer DEFAULT 0 NOT NULL,
    seq_end integer DEFAULT 0 NOT NULL,
    model_start integer DEFAULT 0 NOT NULL,
    model_end integer DEFAULT 0 NOT NULL,
    domain_byteas_score double precision DEFAULT (0)::double precision NOT NULL,
    domain_evalue_score text DEFAULT ''::text NOT NULL,
    sequence_byteas_score double precision DEFAULT (0)::double precision NOT NULL,
    sequence_evalue_score text DEFAULT ''::text NOT NULL,
    _mode text DEFAULT ''::text NOT NULL,
    significant smallint DEFAULT (0)::smallint NOT NULL,
    cigar text,
    in_full smallint DEFAULT (0)::smallint NOT NULL,
    tree_order integer,
    CONSTRAINT pfama_reg_full_auto_pfama_check CHECK ((auto_pfama >= 0)),
    CONSTRAINT pfama_reg_full_auto_pfamseq_check CHECK ((auto_pfamseq >= 0)),
    CONSTRAINT pfama_reg_full_model_end_check CHECK ((model_end >= 0)),
    CONSTRAINT pfama_reg_full_model_start_check CHECK ((model_start >= 0)),
    CONSTRAINT pfama_reg_full_seq_end_check CHECK ((seq_end >= 0)),
    CONSTRAINT pfama_reg_full_seq_start_check CHECK ((seq_start >= 0))
);


ALTER TABLE pfam_stage.pfama_reg_full OWNER TO pbuttigi;

--
-- Name: pfama_reg_seed; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE pfama_reg_seed (
    auto_pfama integer DEFAULT 0 NOT NULL,
    auto_pfamseq integer DEFAULT 0 NOT NULL,
    seq_start integer DEFAULT 0 NOT NULL,
    seq_end integer,
    cigar text,
    tree_order integer,
    CONSTRAINT pfama_reg_seed_auto_pfama_check CHECK ((auto_pfama >= 0)),
    CONSTRAINT pfama_reg_seed_auto_pfamseq_check CHECK ((auto_pfamseq >= 0)),
    CONSTRAINT pfama_reg_seed_seq_end_check CHECK ((seq_end >= 0)),
    CONSTRAINT pfama_reg_seed_seq_start_check CHECK ((seq_start >= 0))
);


ALTER TABLE pfam_stage.pfama_reg_seed OWNER TO pbuttigi;

--
-- Name: pfamseq_auto_pfamseq_seq; Type: SEQUENCE; Schema: pfam_stage; Owner: pbuttigi
--

CREATE SEQUENCE pfamseq_auto_pfamseq_seq
    START WITH 5979615
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pfam_stage.pfamseq_auto_pfamseq_seq OWNER TO pbuttigi;

--
-- Name: pfamseq; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE pfamseq (
    auto_pfamseq integer DEFAULT nextval('pfamseq_auto_pfamseq_seq'::regclass) NOT NULL,
    pfamseq_id text DEFAULT ''::text NOT NULL,
    pfamseq_acc text DEFAULT ''::text NOT NULL,
    seq_version smallint,
    crc64 text DEFAULT ''::text NOT NULL,
    md5 text DEFAULT ''::text NOT NULL,
    description text NOT NULL,
    length integer DEFAULT 0 NOT NULL,
    species text NOT NULL,
    taxonomy text,
    is_fragment smallint,
    _current smallint,
    non_cons smallint,
    _sequence bytea NOT NULL,
    updated timestamp without time zone DEFAULT now() NOT NULL,
    created timestamp without time zone,
    ncbi_code integer DEFAULT 0,
    genome_seq smallint DEFAULT (0)::smallint,
    auto_architecture integer,
    treefam_acc text,
    CONSTRAINT pfamseq_auto_architecture_check CHECK ((auto_architecture >= 0)),
    CONSTRAINT pfamseq_length_check CHECK ((length >= 0)),
    CONSTRAINT pfamseq_ncbi_code_check CHECK ((ncbi_code >= 0))
);


ALTER TABLE pfam_stage.pfamseq OWNER TO pbuttigi;

--
-- Name: secondary_pfamseq_acc; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE secondary_pfamseq_acc (
    auto_pfamseq integer DEFAULT 0 NOT NULL,
    secondary_acc text,
    CONSTRAINT secondary_pfamseq_acc_auto_pfamseq_check CHECK ((auto_pfamseq >= 0))
);


ALTER TABLE pfam_stage.secondary_pfamseq_acc OWNER TO pbuttigi;

--
-- Name: version; Type: TABLE; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE version (
    pfam_release text,
    pfam_release_date date,
    swiss_prot_version text,
    trembl_version text,
    hmmer_version text,
    pfama_coverage double precision,
    pfamb_additional_coverage double precision,
    pfama_residue_coverage double precision,
    pfamb_additional_residue_coverage double precision,
    number_families integer
);


ALTER TABLE pfam_stage.version OWNER TO pbuttigi;

SET search_path = pgq, pg_catalog;

--
-- Name: batch_id_seq; Type: SEQUENCE; Schema: pgq; Owner: rkottman
--

CREATE SEQUENCE batch_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgq.batch_id_seq OWNER TO rkottman;

--
-- Name: consumer; Type: TABLE; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE TABLE consumer (
    co_id integer NOT NULL,
    co_name text DEFAULT 'fooz'::text NOT NULL
);


ALTER TABLE pgq.consumer OWNER TO pgqueue;

--
-- Name: consumer_co_id_seq; Type: SEQUENCE; Schema: pgq; Owner: pgqueue
--

CREATE SEQUENCE consumer_co_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgq.consumer_co_id_seq OWNER TO pgqueue;

--
-- Name: consumer_co_id_seq; Type: SEQUENCE OWNED BY; Schema: pgq; Owner: pgqueue
--

ALTER SEQUENCE consumer_co_id_seq OWNED BY consumer.co_id;


--
-- Name: event_template; Type: TABLE; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE TABLE event_template (
    ev_id bigint NOT NULL,
    ev_time timestamp with time zone NOT NULL,
    ev_txid bigint DEFAULT txid_current() NOT NULL,
    ev_owner integer,
    ev_retry integer,
    ev_type text,
    ev_data text,
    ev_extra1 text,
    ev_extra2 text,
    ev_extra3 text,
    ev_extra4 text
);


ALTER TABLE pgq.event_template OWNER TO pgqueue;

--
-- Name: event_1; Type: TABLE; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE TABLE event_1 (
)
INHERITS (event_template);


ALTER TABLE pgq.event_1 OWNER TO pgqueue;

--
-- Name: event_1_id_seq; Type: SEQUENCE; Schema: pgq; Owner: rkottman
--

CREATE SEQUENCE event_1_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgq.event_1_id_seq OWNER TO rkottman;

--
-- Name: event_1_0; Type: TABLE; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE TABLE event_1_0 (
    ev_id bigint DEFAULT nextval('event_1_id_seq'::regclass)
)
INHERITS (event_1);


ALTER TABLE pgq.event_1_0 OWNER TO pgqueue;

--
-- Name: event_1_1; Type: TABLE; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE TABLE event_1_1 (
    ev_id bigint DEFAULT nextval('event_1_id_seq'::regclass)
)
INHERITS (event_1);


ALTER TABLE pgq.event_1_1 OWNER TO pgqueue;

--
-- Name: event_1_2; Type: TABLE; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE TABLE event_1_2 (
    ev_id bigint DEFAULT nextval('event_1_id_seq'::regclass)
)
INHERITS (event_1);


ALTER TABLE pgq.event_1_2 OWNER TO pgqueue;

--
-- Name: event_1_tick_seq; Type: SEQUENCE; Schema: pgq; Owner: rkottman
--

CREATE SEQUENCE event_1_tick_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgq.event_1_tick_seq OWNER TO rkottman;

--
-- Name: queue; Type: TABLE; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE TABLE queue (
    queue_id integer NOT NULL,
    queue_name text NOT NULL,
    queue_ntables integer DEFAULT 3 NOT NULL,
    queue_cur_table integer DEFAULT 0 NOT NULL,
    queue_rotation_period interval DEFAULT '02:00:00'::interval NOT NULL,
    queue_switch_step1 bigint DEFAULT txid_current() NOT NULL,
    queue_switch_step2 bigint DEFAULT txid_current(),
    queue_switch_time timestamp with time zone DEFAULT now() NOT NULL,
    queue_external_ticker boolean DEFAULT false NOT NULL,
    queue_ticker_max_count integer DEFAULT 500 NOT NULL,
    queue_ticker_max_lag interval DEFAULT '00:00:03'::interval NOT NULL,
    queue_ticker_idle_period interval DEFAULT '00:01:00'::interval NOT NULL,
    queue_data_pfx text NOT NULL,
    queue_event_seq text NOT NULL,
    queue_tick_seq text NOT NULL
);


ALTER TABLE pgq.queue OWNER TO pgqueue;

--
-- Name: queue_queue_id_seq; Type: SEQUENCE; Schema: pgq; Owner: pgqueue
--

CREATE SEQUENCE queue_queue_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgq.queue_queue_id_seq OWNER TO pgqueue;

--
-- Name: queue_queue_id_seq; Type: SEQUENCE OWNED BY; Schema: pgq; Owner: pgqueue
--

ALTER SEQUENCE queue_queue_id_seq OWNED BY queue.queue_id;


--
-- Name: retry_queue; Type: TABLE; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE TABLE retry_queue (
    ev_retry_after timestamp with time zone NOT NULL,
    ev_id bigint NOT NULL,
    ev_time timestamp with time zone NOT NULL,
    ev_txid bigint,
    ev_owner integer NOT NULL,
    ev_retry integer,
    ev_type text,
    ev_data text,
    ev_extra1 text,
    ev_extra2 text,
    ev_extra3 text,
    ev_extra4 text
);


ALTER TABLE pgq.retry_queue OWNER TO pgqueue;

--
-- Name: subscription; Type: TABLE; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE TABLE subscription (
    sub_id integer NOT NULL,
    sub_queue integer NOT NULL,
    sub_consumer integer NOT NULL,
    sub_last_tick bigint NOT NULL,
    sub_active timestamp with time zone DEFAULT now() NOT NULL,
    sub_batch bigint,
    sub_next_tick bigint
);


ALTER TABLE pgq.subscription OWNER TO pgqueue;

--
-- Name: subscription_sub_id_seq; Type: SEQUENCE; Schema: pgq; Owner: pgqueue
--

CREATE SEQUENCE subscription_sub_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE pgq.subscription_sub_id_seq OWNER TO pgqueue;

--
-- Name: subscription_sub_id_seq; Type: SEQUENCE OWNED BY; Schema: pgq; Owner: pgqueue
--

ALTER SEQUENCE subscription_sub_id_seq OWNED BY subscription.sub_id;


--
-- Name: tick; Type: TABLE; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE TABLE tick (
    tick_queue integer NOT NULL,
    tick_id bigint NOT NULL,
    tick_time timestamp with time zone DEFAULT now() NOT NULL,
    tick_snapshot txid_snapshot DEFAULT txid_current_snapshot() NOT NULL
);


ALTER TABLE pgq.tick OWNER TO pgqueue;

SET search_path = pgq_ext, pg_catalog;

--
-- Name: completed_batch; Type: TABLE; Schema: pgq_ext; Owner: rkottman; Tablespace: 
--

CREATE TABLE completed_batch (
    consumer_id text NOT NULL,
    last_batch_id bigint NOT NULL
);


ALTER TABLE pgq_ext.completed_batch OWNER TO rkottman;

--
-- Name: completed_event; Type: TABLE; Schema: pgq_ext; Owner: rkottman; Tablespace: 
--

CREATE TABLE completed_event (
    consumer_id text NOT NULL,
    batch_id bigint NOT NULL,
    event_id bigint NOT NULL
);


ALTER TABLE pgq_ext.completed_event OWNER TO rkottman;

--
-- Name: completed_tick; Type: TABLE; Schema: pgq_ext; Owner: rkottman; Tablespace: 
--

CREATE TABLE completed_tick (
    consumer_id text NOT NULL,
    last_tick_id bigint NOT NULL
);


ALTER TABLE pgq_ext.completed_tick OWNER TO rkottman;

--
-- Name: partial_batch; Type: TABLE; Schema: pgq_ext; Owner: rkottman; Tablespace: 
--

CREATE TABLE partial_batch (
    consumer_id text NOT NULL,
    cur_batch_id bigint NOT NULL
);


ALTER TABLE pgq_ext.partial_batch OWNER TO rkottman;

SET search_path = stage_r8, pg_catalog;

--
-- Name: gold_2010_05_18; Type: TABLE; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

CREATE TABLE gold_2010_05_18 (
    superkingdom text DEFAULT ''::text,
    phylum text DEFAULT ''::text,
    _class text DEFAULT ''::text,
    _order text DEFAULT ''::text,
    _family text DEFAULT ''::text,
    genus text DEFAULT ''::text,
    species text DEFAULT ''::text,
    _domain text DEFAULT ''::text,
    classification text DEFAULT ''::text,
    organism_name text DEFAULT ''::text,
    strain text DEFAULT ''::text,
    serovar_biovar text DEFAULT ''::text,
    common_name text DEFAULT ''::text,
    ncbi_project_name text DEFAULT ''::text,
    culture_collection text DEFAULT ''::text,
    type_strain text DEFAULT ''::text,
    goldstamp text DEFAULT ''::text NOT NULL,
    old_goldstamp text DEFAULT ''::text,
    project_type text DEFAULT ''::text,
    project_status text DEFAULT ''::text,
    availability text DEFAULT ''::text,
    sequencing_centers text DEFAULT ''::text,
    funding text DEFAULT ''::text,
    contact_name text DEFAULT ''::text,
    contact_email text DEFAULT ''::text,
    contact_url text DEFAULT ''::text,
    locus_tag text DEFAULT ''::text,
    completion_date text DEFAULT ''::text,
    publication text DEFAULT ''::text,
    project_relevance text DEFAULT ''::text,
    ncbi_taxon_id text DEFAULT ''::text,
    ncbi_project_id text DEFAULT ''::text,
    ncbi_archive_id text DEFAULT ''::text,
    short_reads_archive_id text DEFAULT ''::text,
    gcat_id text DEFAULT ''::text,
    hmp_id text DEFAULT ''::text,
    homd_id text DEFAULT ''::text,
    straininfo_id text DEFAULT ''::text,
    greengenes_object_id text DEFAULT ''::text,
    img_object_id text DEFAULT ''::text,
    genome_data text DEFAULT ''::text,
    sequencing_status text DEFAULT ''::text,
    sequencing_quality text DEFAULT ''::text,
    comments text DEFAULT ''::text,
    library_method text DEFAULT ''::text,
    reads_count text DEFAULT ''::text,
    vector text DEFAULT ''::text,
    assembly_method text DEFAULT ''::text,
    sequencing_depth text DEFAULT ''::text,
    gene_calling_method text DEFAULT ''::text,
    contig_count text DEFAULT ''::text,
    _size text DEFAULT ''::text,
    orfs text DEFAULT ''::text,
    chromosome_count text DEFAULT ''::text,
    plasmid_count text DEFAULT ''::text,
    gc_content text DEFAULT ''::text,
    sequencing_method text DEFAULT ''::text,
    sequencing_country text DEFAULT ''::text,
    isolation_site text DEFAULT ''::text,
    isolation_source text DEFAULT ''::text,
    isolation_comments text DEFAULT ''::text,
    collection_date text DEFAULT ''::text,
    isolation_country text DEFAULT ''::text,
    isolation_pubmed_id text DEFAULT ''::text,
    geographic_location text DEFAULT ''::text,
    latitude text DEFAULT ''::text,
    longitude text DEFAULT ''::text,
    altitude text DEFAULT ''::text,
    depth text DEFAULT ''::text,
    host_name text DEFAULT ''::text,
    host_taxon_id text DEFAULT ''::text,
    host_gender text DEFAULT ''::text,
    host_age text DEFAULT ''::text,
    host_race text DEFAULT ''::text,
    host_health text DEFAULT ''::text,
    host_medication text DEFAULT ''::text,
    host_specificity text DEFAULT ''::text,
    body_sample_site text DEFAULT ''::text,
    body_product text DEFAULT ''::text,
    body_sample_subsite text DEFAULT ''::text,
    host_comments text DEFAULT ''::text,
    oxygen_requirement text DEFAULT ''::text,
    cell_shape text DEFAULT ''::text,
    sporulation text DEFAULT ''::text,
    pressure text DEFAULT ''::text,
    temperature_range text DEFAULT ''::text,
    salinity text DEFAULT ''::text,
    ph text DEFAULT ''::text,
    cell_diameter text DEFAULT ''::text,
    cell_length text DEFAULT ''::text,
    color text DEFAULT ''::text,
    gram_staining text DEFAULT ''::text,
    biotic_relationships text DEFAULT ''::text,
    symbiotic_interaction text DEFAULT ''::text,
    symbiotic_relationship text DEFAULT ''::text,
    symbiont_name text DEFAULT ''::text,
    symbiont_taxon_id text DEFAULT ''::text,
    cell_arrangement text DEFAULT ''::text,
    disease text DEFAULT ''::text,
    habitat text DEFAULT ''::text,
    temperature text DEFAULT ''::text,
    metabolism text DEFAULT ''::text,
    motility text DEFAULT ''::text,
    phenotype text DEFAULT ''::text,
    energy_source text DEFAULT ''::text
);


ALTER TABLE stage_r8.gold_2010_05_18 OWNER TO rkottman;

SET search_path = silva_r100_lsu, pg_catalog;

--
-- Name: alignedregion; Type: TABLE; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE alignedregion (
    start bigint NOT NULL,
    stop bigint NOT NULL,
    primaryaccession text NOT NULL,
    alignedstart bigint DEFAULT (- (1)::bigint) NOT NULL,
    alignedstop bigint DEFAULT (- (1)::bigint) NOT NULL,
    alignmentdate timestamp without time zone DEFAULT now() NOT NULL,
    alignmentfamavg double precision DEFAULT (0)::double precision NOT NULL,
    alignmentfammax double precision DEFAULT (0)::double precision NOT NULL,
    alignmentfamsize integer DEFAULT 0 NOT NULL,
    alignmentlog text DEFAULT ''::text NOT NULL,
    alignmentquality double precision DEFAULT (0)::double precision NOT NULL,
    alignmentreference text DEFAULT ''::text NOT NULL,
    alignmentstatus text DEFAULT 'unaligned'::text NOT NULL,
    bpscore bigint DEFAULT (0)::bigint NOT NULL,
    cutoffhead bigint DEFAULT (0)::bigint NOT NULL,
    cutofftail bigint DEFAULT (0)::bigint NOT NULL,
    revcomp text DEFAULT 'unknown'::text NOT NULL,
    msaname text DEFAULT ''::text NOT NULL
);


ALTER TABLE silva_r100_lsu.alignedregion OWNER TO pyilmaz;

--
-- Name: publication; Type: TABLE; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE publication (
    _id bigint NOT NULL,
    primaryaccession text DEFAULT ''::text NOT NULL,
    authors text DEFAULT ''::text NOT NULL,
    remark text DEFAULT ''::text NOT NULL,
    info character varying DEFAULT ''::character varying NOT NULL,
    pos text DEFAULT ''::text NOT NULL,
    refs text DEFAULT ''::text NOT NULL,
    title text DEFAULT ''::text NOT NULL
);


ALTER TABLE silva_r100_lsu.publication OWNER TO pyilmaz;

--
-- Name: region; Type: TABLE; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE region (
    start bigint DEFAULT (0)::bigint NOT NULL,
    stop bigint DEFAULT (0)::bigint NOT NULL,
    primaryaccession text NOT NULL,
    annotationsource text DEFAULT ''::text NOT NULL,
    complement complement_type DEFAULT 'yes'::complement_type,
    countrepetative integer DEFAULT (-1) NOT NULL,
    crc text DEFAULT ''::text NOT NULL,
    description text DEFAULT ''::text NOT NULL,
    genename text DEFAULT ''::text NOT NULL,
    joins text DEFAULT ''::text NOT NULL,
    percentambiguity double precision DEFAULT (- (1)::double precision) NOT NULL,
    percentrepetative double precision DEFAULT (- (1)::double precision) NOT NULL,
    percentvector double precision DEFAULT (- (1)::double precision) NOT NULL,
    pintailscore integer DEFAULT (-1) NOT NULL,
    pintailtests integer DEFAULT (-1) NOT NULL,
    product text DEFAULT ''::text NOT NULL,
    quality double precision DEFAULT (- (1)::double precision),
    refs text DEFAULT ''::text NOT NULL,
    regionlength integer DEFAULT (-1) NOT NULL,
    repetativeevents integer DEFAULT (-1) NOT NULL,
    sequence text DEFAULT ''::text,
    startflag smallint DEFAULT (0)::smallint NOT NULL,
    stopflag smallint DEFAULT (0)::smallint NOT NULL,
    type text DEFAULT 'unknown'::text NOT NULL
);


ALTER TABLE silva_r100_lsu.region OWNER TO pyilmaz;

--
-- Name: sequenceentry; Type: TABLE; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE sequenceentry (
    primaryaccession text NOT NULL,
    accessions text NOT NULL,
    alternativename text DEFAULT ''::text NOT NULL,
    biomaterial text DEFAULT ''::text NOT NULL,
    circular circular_type DEFAULT 'no'::circular_type,
    clone text NOT NULL,
    clonelib text NOT NULL,
    collectiondate text DEFAULT ''::text NOT NULL,
    collector text NOT NULL,
    country text NOT NULL,
    crc text NOT NULL,
    culturecollection text DEFAULT ''::text NOT NULL,
    dataclass text DEFAULT ''::text NOT NULL,
    datasource text NOT NULL,
    dateimported timestamp without time zone DEFAULT now() NOT NULL,
    datemodified date DEFAULT '0001-01-01 BC'::date NOT NULL,
    datesubmitted date DEFAULT '0001-01-01 BC'::date NOT NULL,
    depth text DEFAULT ''::text,
    description text DEFAULT ''::text NOT NULL,
    division text DEFAULT ''::text NOT NULL,
    envsample text NOT NULL,
    filename text DEFAULT ''::text NOT NULL,
    haplotype text DEFAULT ''::text NOT NULL,
    habitat text DEFAULT ''::text NOT NULL,
    identifiedby text DEFAULT ''::text NOT NULL,
    insdc bigint DEFAULT (- (1)::bigint) NOT NULL,
    isolate text NOT NULL,
    isolationsource text NOT NULL,
    keywords text DEFAULT ''::text NOT NULL,
    labhost text DEFAULT ''::text NOT NULL,
    latlong text NOT NULL,
    moleculartype text DEFAULT ''::text NOT NULL,
    nameshist text NOT NULL,
    organelle text DEFAULT ''::text NOT NULL,
    organismname text DEFAULT ''::text NOT NULL,
    pcrprimers text DEFAULT ''::text NOT NULL,
    plasmidname text DEFAULT ''::text NOT NULL,
    refs text NOT NULL,
    sequence text DEFAULT ''::text,
    sequencelength bigint DEFAULT (-1) NOT NULL,
    sequenceversion smallint DEFAULT (- (1)::smallint) NOT NULL,
    specifichost text NOT NULL,
    specimenvoucher text NOT NULL,
    strain text NOT NULL,
    strainid bigint DEFAULT (0)::bigint NOT NULL,
    subspecies text DEFAULT ''::text NOT NULL,
    taxonomy text DEFAULT ''::text NOT NULL
);


ALTER TABLE silva_r100_lsu.sequenceentry OWNER TO pyilmaz;

--
-- Name: straininfo; Type: TABLE; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE straininfo (
    si_accession text DEFAULT ''::text NOT NULL,
    strainid integer DEFAULT (-1) NOT NULL,
    straintype straintype_type DEFAULT '-1'::straintype_type
);


ALTER TABLE silva_r100_lsu.straininfo OWNER TO pyilmaz;

--
-- Name: taxmap; Type: TABLE; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE taxmap (
    primaryaccession text NOT NULL,
    taxname text NOT NULL,
    path text NOT NULL,
    organismname text NOT NULL
);


ALTER TABLE silva_r100_lsu.taxmap OWNER TO pyilmaz;

--
-- Name: taxonomy; Type: TABLE; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE taxonomy (
    taxname text DEFAULT ''::text NOT NULL,
    path text DEFAULT ''::text NOT NULL,
    node_name text DEFAULT ''::text NOT NULL
);


ALTER TABLE silva_r100_lsu.taxonomy OWNER TO pyilmaz;

SET search_path = silva_r100_ssu, pg_catalog;

--
-- Name: alignedregion; Type: TABLE; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE alignedregion (
    start bigint NOT NULL,
    stop bigint NOT NULL,
    primaryaccession text NOT NULL,
    alignedstart bigint DEFAULT (- (1)::bigint) NOT NULL,
    alignedstop bigint DEFAULT (- (1)::bigint) NOT NULL,
    alignmentdate timestamp without time zone DEFAULT now() NOT NULL,
    alignmentfamavg double precision DEFAULT (0)::double precision NOT NULL,
    alignmentfammax double precision DEFAULT (0)::double precision NOT NULL,
    alignmentfamsize integer DEFAULT 0 NOT NULL,
    alignmentlog text DEFAULT ''::text NOT NULL,
    alignmentquality double precision DEFAULT (0)::double precision NOT NULL,
    alignmentreference text DEFAULT ''::text NOT NULL,
    alignmentstatus text DEFAULT 'unaligned'::text NOT NULL,
    bpscore bigint DEFAULT (0)::bigint NOT NULL,
    cutoffhead bigint DEFAULT (0)::bigint NOT NULL,
    cutofftail bigint DEFAULT (0)::bigint NOT NULL,
    revcomp text DEFAULT 'unknown'::text NOT NULL,
    msaname text DEFAULT ''::text NOT NULL
);


ALTER TABLE silva_r100_ssu.alignedregion OWNER TO pyilmaz;

--
-- Name: publication; Type: TABLE; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE publication (
    _id bigint NOT NULL,
    primaryaccession text DEFAULT ''::text NOT NULL,
    authors text DEFAULT ''::text NOT NULL,
    remark text DEFAULT ''::text NOT NULL,
    info character varying DEFAULT ''::character varying NOT NULL,
    pos text DEFAULT ''::text NOT NULL,
    refs text DEFAULT ''::text NOT NULL,
    title text DEFAULT ''::text NOT NULL
);


ALTER TABLE silva_r100_ssu.publication OWNER TO pyilmaz;

--
-- Name: region; Type: TABLE; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE region (
    start bigint DEFAULT (0)::bigint NOT NULL,
    stop bigint DEFAULT (0)::bigint NOT NULL,
    primaryaccession text NOT NULL,
    annotationsource text DEFAULT ''::text NOT NULL,
    complement complement_type DEFAULT 'yes'::complement_type,
    countrepetative integer DEFAULT (-1) NOT NULL,
    crc text DEFAULT ''::text NOT NULL,
    description text DEFAULT ''::text NOT NULL,
    genename text DEFAULT ''::text NOT NULL,
    joins text DEFAULT ''::text NOT NULL,
    percentambiguity double precision DEFAULT (- (1)::double precision) NOT NULL,
    percentrepetative double precision DEFAULT (- (1)::double precision) NOT NULL,
    percentvector double precision DEFAULT (- (1)::double precision) NOT NULL,
    pintailscore integer DEFAULT (-1) NOT NULL,
    pintailtests integer DEFAULT (-1) NOT NULL,
    product text DEFAULT ''::text NOT NULL,
    quality double precision DEFAULT (- (1)::double precision),
    refs text DEFAULT ''::text NOT NULL,
    regionlength integer DEFAULT (-1) NOT NULL,
    repetativeevents integer DEFAULT (-1) NOT NULL,
    sequence text DEFAULT ''::text,
    startflag smallint DEFAULT (0)::smallint NOT NULL,
    stopflag smallint DEFAULT (0)::smallint NOT NULL,
    type text DEFAULT 'unknown'::text NOT NULL
);


ALTER TABLE silva_r100_ssu.region OWNER TO pyilmaz;

--
-- Name: sequenceentry; Type: TABLE; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE sequenceentry (
    primaryaccession text NOT NULL,
    accessions text NOT NULL,
    alternativename text DEFAULT ''::text NOT NULL,
    biomaterial text DEFAULT ''::text NOT NULL,
    circular circular_type DEFAULT 'no'::circular_type,
    clone text NOT NULL,
    clonelib text NOT NULL,
    collectiondate text DEFAULT ''::text NOT NULL,
    collector text NOT NULL,
    country text NOT NULL,
    crc text NOT NULL,
    culturecollection text DEFAULT ''::text NOT NULL,
    dataclass text DEFAULT ''::text NOT NULL,
    datasource text NOT NULL,
    dateimported timestamp without time zone DEFAULT now() NOT NULL,
    datemodified date DEFAULT '0001-01-01 BC'::date NOT NULL,
    datesubmitted date DEFAULT '0001-01-01 BC'::date NOT NULL,
    depth text DEFAULT ''::text,
    description text DEFAULT ''::text NOT NULL,
    division text DEFAULT ''::text NOT NULL,
    envsample text NOT NULL,
    filename text DEFAULT ''::text NOT NULL,
    haplotype text DEFAULT ''::text NOT NULL,
    habitat text DEFAULT ''::text NOT NULL,
    identifiedby text DEFAULT ''::text NOT NULL,
    insdc bigint DEFAULT (- (1)::bigint) NOT NULL,
    isolate text NOT NULL,
    isolationsource text NOT NULL,
    keywords text DEFAULT ''::text NOT NULL,
    labhost text DEFAULT ''::text NOT NULL,
    latlong text NOT NULL,
    moleculartype text DEFAULT ''::text NOT NULL,
    nameshist text NOT NULL,
    organelle text DEFAULT ''::text NOT NULL,
    organismname text DEFAULT ''::text NOT NULL,
    pcrprimers text DEFAULT ''::text NOT NULL,
    plasmidname text DEFAULT ''::text NOT NULL,
    refs text NOT NULL,
    sequence text DEFAULT ''::text,
    sequencelength bigint DEFAULT (-1) NOT NULL,
    sequenceversion smallint DEFAULT (- (1)::smallint) NOT NULL,
    specifichost text NOT NULL,
    specimenvoucher text NOT NULL,
    strain text NOT NULL,
    strainid bigint DEFAULT (0)::bigint NOT NULL,
    subspecies text DEFAULT ''::text NOT NULL,
    taxonomy text DEFAULT ''::text NOT NULL
);


ALTER TABLE silva_r100_ssu.sequenceentry OWNER TO pyilmaz;

--
-- Name: straininfo; Type: TABLE; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE straininfo (
    si_accession text DEFAULT ''::text NOT NULL,
    strainid integer DEFAULT (-1) NOT NULL,
    straintype straintype_type DEFAULT '-1'::straintype_type
);


ALTER TABLE silva_r100_ssu.straininfo OWNER TO pyilmaz;

--
-- Name: taxmap; Type: TABLE; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE taxmap (
    primaryaccession text NOT NULL,
    taxname text NOT NULL,
    path text NOT NULL,
    organismname text NOT NULL
);


ALTER TABLE silva_r100_ssu.taxmap OWNER TO pyilmaz;

--
-- Name: taxonomy; Type: TABLE; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE taxonomy (
    taxname text DEFAULT ''::text NOT NULL,
    path text DEFAULT ''::text NOT NULL,
    node_name text DEFAULT ''::text NOT NULL
);


ALTER TABLE silva_r100_ssu.taxonomy OWNER TO pyilmaz;

SET search_path = silva_r102_lsu, pg_catalog;

--
-- Name: publication; Type: TABLE; Schema: silva_r102_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE publication (
    _id bigint NOT NULL,
    primaryaccession text DEFAULT ''::text NOT NULL,
    authors text DEFAULT ''::text NOT NULL,
    comment text DEFAULT ''::text NOT NULL,
    info character varying DEFAULT ''::character varying NOT NULL,
    pos text DEFAULT ''::text NOT NULL,
    refs text DEFAULT ''::text NOT NULL,
    title text DEFAULT ''::text NOT NULL
);


ALTER TABLE silva_r102_lsu.publication OWNER TO pyilmaz;

--
-- Name: region; Type: TABLE; Schema: silva_r102_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE region (
    seqent_id integer DEFAULT 0 NOT NULL,
    primaryaccession text NOT NULL,
    start bigint DEFAULT 0 NOT NULL,
    stop bigint DEFAULT 0 NOT NULL,
    alignmentquality double precision DEFAULT 0.00 NOT NULL,
    bpscore bigint DEFAULT 0 NOT NULL,
    isref integer DEFAULT 0 NOT NULL,
    regionlength integer DEFAULT (-1) NOT NULL,
    percentambiguity double precision DEFAULT (-1.00) NOT NULL,
    percentrepetative double precision DEFAULT (-1.00) NOT NULL,
    percentvector double precision DEFAULT (-1.00) NOT NULL,
    product text DEFAULT ''::text NOT NULL,
    quality double precision DEFAULT (-1.00),
    startflag smallint DEFAULT 0 NOT NULL,
    stopflag smallint DEFAULT 0 NOT NULL,
    percentaligned double precision,
    pintailquality double precision
);


ALTER TABLE silva_r102_lsu.region OWNER TO pyilmaz;

--
-- Name: sequenceentry; Type: TABLE; Schema: silva_r102_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE sequenceentry (
    primaryaccession text NOT NULL,
    accessions text NOT NULL,
    alternativename text DEFAULT ''::text NOT NULL,
    biomaterial text DEFAULT ''::text NOT NULL,
    circular character varying(3) DEFAULT 'no'::character varying,
    clone text NOT NULL,
    clonelib text NOT NULL,
    collectiondate text DEFAULT ''::text NOT NULL,
    collector text NOT NULL,
    country text NOT NULL,
    crc text NOT NULL,
    culturecollection text DEFAULT ''::text NOT NULL,
    dataclass text DEFAULT ''::text NOT NULL,
    datasource text NOT NULL,
    dateimported timestamp without time zone DEFAULT now() NOT NULL,
    datemodified date DEFAULT '1900-01-01'::date NOT NULL,
    datesubmitted date DEFAULT '1900-01-01'::date NOT NULL,
    depth text DEFAULT ''::text,
    description text DEFAULT ''::text NOT NULL,
    division text DEFAULT ''::text NOT NULL,
    envsample text NOT NULL,
    filename text DEFAULT ''::text NOT NULL,
    flags text DEFAULT ''::text NOT NULL,
    haplotype text DEFAULT ''::text NOT NULL,
    habitat text DEFAULT ''::text NOT NULL,
    identifiedby text DEFAULT ''::text NOT NULL,
    insdc bigint DEFAULT (-1) NOT NULL,
    isolate text NOT NULL,
    isolationsource text NOT NULL,
    keywords text DEFAULT ''::text NOT NULL,
    labhost text DEFAULT ''::text NOT NULL,
    latlong text NOT NULL,
    moleculartype text DEFAULT ''::text NOT NULL,
    nameshist text NOT NULL,
    organelle text DEFAULT ''::text NOT NULL,
    organismname text DEFAULT ''::text NOT NULL,
    pcrprimers text DEFAULT ''::text NOT NULL,
    plasmidname text DEFAULT ''::text NOT NULL,
    refs text NOT NULL,
    sequence text DEFAULT ''::text,
    sequencelength bigint DEFAULT (-1) NOT NULL,
    sequenceversion smallint DEFAULT (-1) NOT NULL,
    specifichost text NOT NULL,
    specimenvoucher text NOT NULL,
    strain text NOT NULL,
    strainid bigint DEFAULT 0 NOT NULL,
    subspecies text DEFAULT ''::text NOT NULL,
    taxonomy text DEFAULT ''::text NOT NULL,
    CONSTRAINT circular_syntax_check CHECK ((((circular)::text = 'yes'::text) OR ((circular)::text = 'no'::text)))
);


ALTER TABLE silva_r102_lsu.sequenceentry OWNER TO pyilmaz;

--
-- Name: straininfo; Type: TABLE; Schema: silva_r102_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE straininfo (
    si_accession text DEFAULT ''::text NOT NULL,
    strainid integer DEFAULT (-1) NOT NULL,
    straintype integer DEFAULT (-1)
);


ALTER TABLE silva_r102_lsu.straininfo OWNER TO pyilmaz;

--
-- Name: taxmap; Type: TABLE; Schema: silva_r102_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE taxmap (
    node_id bigint DEFAULT (-1) NOT NULL,
    primaryaccession text NOT NULL,
    taxname text NOT NULL,
    path text NOT NULL,
    organismname text NOT NULL
);


ALTER TABLE silva_r102_lsu.taxmap OWNER TO pyilmaz;

--
-- Name: taxonomy; Type: TABLE; Schema: silva_r102_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE taxonomy (
    node_id bigint DEFAULT (-1) NOT NULL,
    taxname text DEFAULT ''::text NOT NULL,
    path text DEFAULT ''::text NOT NULL,
    node_name text DEFAULT ''::text NOT NULL
);


ALTER TABLE silva_r102_lsu.taxonomy OWNER TO pyilmaz;

SET search_path = silva_r102_ssu, pg_catalog;

--
-- Name: publication; Type: TABLE; Schema: silva_r102_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE publication (
    _id bigint NOT NULL,
    primaryaccession text DEFAULT ''::text NOT NULL,
    authors text DEFAULT ''::text NOT NULL,
    comment text DEFAULT ''::text NOT NULL,
    info character varying DEFAULT ''::character varying NOT NULL,
    "position" text DEFAULT ''::text NOT NULL,
    refs text DEFAULT ''::text NOT NULL,
    title text DEFAULT ''::text NOT NULL
);


ALTER TABLE silva_r102_ssu.publication OWNER TO pyilmaz;

--
-- Name: region; Type: TABLE; Schema: silva_r102_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE region (
    seqent_id integer DEFAULT 0 NOT NULL,
    primaryaccession text NOT NULL,
    start bigint DEFAULT 0 NOT NULL,
    stop bigint DEFAULT 0 NOT NULL,
    alignmentquality double precision DEFAULT 0.00 NOT NULL,
    bpscore bigint DEFAULT 0 NOT NULL,
    isref integer DEFAULT 0 NOT NULL,
    regionlength integer DEFAULT (-1) NOT NULL,
    percentambiguity double precision DEFAULT (-1.00) NOT NULL,
    percentrepetative double precision DEFAULT (-1.00) NOT NULL,
    percentvector double precision DEFAULT (-1.00) NOT NULL,
    product text DEFAULT ''::text NOT NULL,
    quality double precision DEFAULT (-1.00),
    startflag smallint DEFAULT 0 NOT NULL,
    stopflag smallint DEFAULT 0 NOT NULL,
    percentaligned double precision,
    pintailquality double precision
);


ALTER TABLE silva_r102_ssu.region OWNER TO pyilmaz;

--
-- Name: sequenceentry; Type: TABLE; Schema: silva_r102_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE sequenceentry (
    primaryaccession text NOT NULL,
    accessions text NOT NULL,
    alternativename text DEFAULT ''::text NOT NULL,
    biomaterial text DEFAULT ''::text NOT NULL,
    circular character varying(3) DEFAULT 'no'::character varying,
    clone text NOT NULL,
    clonelib text NOT NULL,
    collectiondate text DEFAULT ''::text NOT NULL,
    collector text NOT NULL,
    country text NOT NULL,
    crc text NOT NULL,
    culturecollection text DEFAULT ''::text NOT NULL,
    dataclass text DEFAULT ''::text NOT NULL,
    datasource text NOT NULL,
    dateimported timestamp without time zone DEFAULT now() NOT NULL,
    datemodified date DEFAULT '1900-01-01'::date NOT NULL,
    datesubmitted date DEFAULT '1900-01-01'::date NOT NULL,
    depth text DEFAULT ''::text,
    description text DEFAULT ''::text NOT NULL,
    division text DEFAULT ''::text NOT NULL,
    envsample text NOT NULL,
    filename text DEFAULT ''::text NOT NULL,
    flags text DEFAULT ''::text NOT NULL,
    haplotype text DEFAULT ''::text NOT NULL,
    habitat text DEFAULT ''::text NOT NULL,
    identifiedby text DEFAULT ''::text NOT NULL,
    insdc bigint DEFAULT ((-1))::bigint NOT NULL,
    isolate text NOT NULL,
    isolationsource text NOT NULL,
    keywords text DEFAULT ''::text NOT NULL,
    labhost text DEFAULT ''::text NOT NULL,
    latlong text NOT NULL,
    moleculartype text DEFAULT ''::text NOT NULL,
    nameshist text NOT NULL,
    organelle text DEFAULT ''::text NOT NULL,
    organismname text DEFAULT ''::text NOT NULL,
    pcrprimers text DEFAULT ''::text NOT NULL,
    plasmidname text DEFAULT ''::text NOT NULL,
    refs text NOT NULL,
    sequence text DEFAULT ''::text,
    sequencelength bigint DEFAULT (-1) NOT NULL,
    sequenceversion smallint DEFAULT ((-1))::smallint NOT NULL,
    specifichost text NOT NULL,
    specimenvoucher text NOT NULL,
    strain text NOT NULL,
    strainid bigint DEFAULT (0)::bigint NOT NULL,
    subspecies text DEFAULT ''::text NOT NULL,
    taxonomy text DEFAULT ''::text NOT NULL,
    CONSTRAINT circular_syntax_check CHECK ((((circular)::text = 'yes'::text) OR ((circular)::text = 'no'::text)))
);


ALTER TABLE silva_r102_ssu.sequenceentry OWNER TO pyilmaz;

--
-- Name: straininfo; Type: TABLE; Schema: silva_r102_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE straininfo (
    primaryaccession text DEFAULT ''::text NOT NULL,
    strainid integer DEFAULT (-1) NOT NULL,
    straintype integer DEFAULT (-1)
);


ALTER TABLE silva_r102_ssu.straininfo OWNER TO pyilmaz;

--
-- Name: taxmap; Type: TABLE; Schema: silva_r102_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE taxmap (
    node_id bigint DEFAULT (-1) NOT NULL,
    primaryaccession text NOT NULL,
    taxname text NOT NULL,
    path text NOT NULL,
    organismname text NOT NULL
);


ALTER TABLE silva_r102_ssu.taxmap OWNER TO pyilmaz;

--
-- Name: taxonomy; Type: TABLE; Schema: silva_r102_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE TABLE taxonomy (
    node_id bigint DEFAULT (-1) NOT NULL,
    taxname text DEFAULT ''::text NOT NULL,
    path text DEFAULT ''::text NOT NULL,
    node_name text DEFAULT ''::text NOT NULL
);


ALTER TABLE silva_r102_ssu.taxonomy OWNER TO pyilmaz;

SET search_path = silva_r103_lsu, pg_catalog;

--
-- Name: MSA; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE "MSA" (
    maintainer character varying(63) DEFAULT ''::character varying NOT NULL,
    "msaName" character varying(63) NOT NULL
);


ALTER TABLE silva_r103_lsu."MSA" OWNER TO epruesse;

--
-- Name: Publication; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE "Publication" (
    _id integer NOT NULL,
    "primaryAccession" character varying(30) NOT NULL,
    authors character varying(2000) DEFAULT ''::character varying NOT NULL,
    comment character varying(2000) DEFAULT ''::character varying NOT NULL,
    info character varying(2000) DEFAULT ''::character varying NOT NULL,
    "position" character varying(52) DEFAULT ''::character varying NOT NULL,
    refs text NOT NULL,
    title character varying(300) NOT NULL
);


ALTER TABLE silva_r103_lsu."Publication" OWNER TO epruesse;

--
-- Name: Region; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE "Region" (
    start integer DEFAULT 0 NOT NULL,
    stop integer DEFAULT 0 NOT NULL,
    "primaryAccession" character varying(30) NOT NULL,
    "annotationSource" character varying(255) DEFAULT ''::character varying NOT NULL,
    complement text DEFAULT 'yes'::text,
    "countRepetative" integer DEFAULT (-1) NOT NULL,
    crc character varying(200) NOT NULL,
    description character varying(255) DEFAULT ''::character varying NOT NULL,
    "geneName" character varying(20) DEFAULT ''::character varying NOT NULL,
    joins text NOT NULL,
    "percentAmbiguity" real DEFAULT ((-1))::real NOT NULL,
    "percentRepetative" real DEFAULT ((-1))::real NOT NULL,
    "percentVector" real DEFAULT ((-1))::real NOT NULL,
    "pintailScore" integer DEFAULT (-1) NOT NULL,
    "pintailTests" integer DEFAULT (-1) NOT NULL,
    product character varying(300) DEFAULT ''::character varying NOT NULL,
    quality real DEFAULT ((-1))::real,
    refs text NOT NULL,
    "regionLength" integer DEFAULT (-1) NOT NULL,
    "repetativeEvents" integer DEFAULT (-1) NOT NULL,
    sequence text NOT NULL,
    "startFlag" integer DEFAULT 0 NOT NULL,
    "stopFlag" integer DEFAULT 0 NOT NULL,
    type text DEFAULT 'unknown'::text NOT NULL
);


ALTER TABLE silva_r103_lsu."Region" OWNER TO epruesse;

--
-- Name: SequenceEntry; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE "SequenceEntry" (
    "primaryAccession" character varying(30) NOT NULL,
    accessions text NOT NULL,
    "alternativeName" character varying(255) DEFAULT ''::character varying NOT NULL,
    "bioMaterial" character varying(255) DEFAULT ''::character varying NOT NULL,
    circular text DEFAULT 'no'::text NOT NULL,
    clone text NOT NULL,
    "cloneLib" text NOT NULL,
    "collectionDate" character varying(30) DEFAULT ''::character varying NOT NULL,
    collector text NOT NULL,
    country text NOT NULL,
    crc character varying(200) NOT NULL,
    "cultureCollection" text NOT NULL,
    "dataClass" character varying(10) DEFAULT ''::character varying NOT NULL,
    "dataSource" character varying(10) NOT NULL,
    "dateImported" timestamp without time zone DEFAULT now() NOT NULL,
    "dateModified" date NOT NULL,
    "dateSubmitted" date NOT NULL,
    depth character varying(10) DEFAULT ''::character varying NOT NULL,
    description character varying(3000) DEFAULT ''::character varying NOT NULL,
    division character varying(10) DEFAULT ''::character varying NOT NULL,
    "envSample" text NOT NULL,
    filename character varying(300) DEFAULT ''::character varying NOT NULL,
    flags text DEFAULT ''::text NOT NULL,
    haplotype text NOT NULL,
    habitat character varying(255) DEFAULT ''::character varying NOT NULL,
    "identifiedBy" text NOT NULL,
    insdc integer DEFAULT (-1) NOT NULL,
    isolate text NOT NULL,
    "isolationSource" text NOT NULL,
    keywords character varying(1000) DEFAULT ''::character varying NOT NULL,
    "labHost" text NOT NULL,
    "latLong" text NOT NULL,
    "molecularType" character varying(20) DEFAULT ''::character varying NOT NULL,
    "namesHist" text NOT NULL,
    organelle character varying(1000) DEFAULT ''::character varying NOT NULL,
    "organismName" character varying(255) DEFAULT ''::character varying NOT NULL,
    "pcrPrimers" character varying(255) DEFAULT ''::character varying NOT NULL,
    "plasmidName" text NOT NULL,
    refs text NOT NULL,
    sequence text NOT NULL,
    "sequenceLength" integer DEFAULT 0 NOT NULL,
    "sequenceVersion" integer DEFAULT (-1) NOT NULL,
    "specificHost" text NOT NULL,
    "specimenVoucher" text NOT NULL,
    strain text NOT NULL,
    "strainID" integer DEFAULT 0 NOT NULL,
    "subSpecies" text NOT NULL,
    taxonomy character varying(4000) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE silva_r103_lsu."SequenceEntry" OWNER TO epruesse;

--
-- Name: accession; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE accession (
    "primaryAccession" character varying(30) NOT NULL,
    accession character varying(30) NOT NULL
);


ALTER TABLE silva_r103_lsu.accession OWNER TO epruesse;

--
-- Name: blacklist; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE blacklist (
    "primaryAccession" character varying(30) NOT NULL
);


ALTER TABLE silva_r103_lsu.blacklist OWNER TO epruesse;

--
-- Name: cluster; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE cluster (
    "primaryAccession" character varying(30) NOT NULL,
    "clusterAccession" character varying(30) NOT NULL,
    "sequenceIdentity" integer NOT NULL
);


ALTER TABLE silva_r103_lsu.cluster OWNER TO epruesse;

--
-- Name: envolite; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE envolite (
    insdc integer DEFAULT (-1) NOT NULL,
    goldstamp character varying(255) DEFAULT ''::character varying NOT NULL,
    habitat character varying(255) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE silva_r103_lsu.envolite OWNER TO epruesse;

--
-- Name: genomes; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE genomes (
    "primaryAccession" character varying(30) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE silva_r103_lsu.genomes OWNER TO epruesse;

--
-- Name: insects; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE insects (
    "primaryAccession" character varying(30) DEFAULT ''::character varying NOT NULL,
    start integer DEFAULT 0 NOT NULL,
    stop integer DEFAULT 0 NOT NULL,
    habitat character varying(255) DEFAULT ''::character varying NOT NULL,
    "isolationSource" text NOT NULL,
    "specificHost" text NOT NULL
);


ALTER TABLE silva_r103_lsu.insects OWNER TO epruesse;

--
-- Name: livingtree; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE livingtree (
    "primaryAccession" character varying(30) DEFAULT ''::character varying NOT NULL,
    "organismName" character varying(30) DEFAULT NULL::character varying,
    arb integer
);


ALTER TABLE silva_r103_lsu.livingtree OWNER TO epruesse;

--
-- Name: marine_habitat; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE marine_habitat (
    "primaryAccession" character varying(30) DEFAULT ''::character varying NOT NULL,
    "collectionDate" character varying(30) DEFAULT ''::character varying NOT NULL,
    depth character varying(10) DEFAULT ''::character varying NOT NULL,
    latitude text NOT NULL,
    longitude text NOT NULL
);


ALTER TABLE silva_r103_lsu.marine_habitat OWNER TO epruesse;

--
-- Name: observation_blast; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE observation_blast (
    "primaryAccession" character varying(30) NOT NULL,
    taxid character varying(30) NOT NULL,
    evalue double precision NOT NULL,
    bitscore integer NOT NULL,
    "alignmentIdentity" double precision NOT NULL,
    "queryStart" integer NOT NULL,
    "queryStop" integer NOT NULL,
    "queryCoverage" integer DEFAULT (-1) NOT NULL,
    "subjectStart" integer NOT NULL,
    "subjectStop" integer NOT NULL
);


ALTER TABLE silva_r103_lsu.observation_blast OWNER TO epruesse;

--
-- Name: otu_breakdown; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE otu_breakdown (
    "primaryAccession" character varying(30) DEFAULT ''::character varying NOT NULL,
    path character varying(600) NOT NULL,
    clustered integer DEFAULT 0 NOT NULL,
    replicate integer DEFAULT 0 NOT NULL
);


ALTER TABLE silva_r103_lsu.otu_breakdown OWNER TO epruesse;

--
-- Name: overlaps; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE "overlaps" (
    "primaryAccession" character varying(30) NOT NULL,
    start integer DEFAULT 0 NOT NULL,
    stop integer DEFAULT 0 NOT NULL
);


ALTER TABLE silva_r103_lsu."overlaps" OWNER TO epruesse;

--
-- Name: release; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE release (
    version integer,
    date date
);


ALTER TABLE silva_r103_lsu.release OWNER TO epruesse;

--
-- Name: straininfo; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE straininfo (
    "primaryAccession" character varying(30) NOT NULL,
    "strainID" integer DEFAULT (-1) NOT NULL,
    "strainType" text DEFAULT '-1'::text NOT NULL
);


ALTER TABLE silva_r103_lsu.straininfo OWNER TO epruesse;

--
-- Name: task; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE task (
    start integer DEFAULT (-1) NOT NULL,
    stop integer DEFAULT (-1) NOT NULL,
    "primaryAccession" character varying(30) NOT NULL,
    taskname character varying(20) NOT NULL
);


ALTER TABLE silva_r103_lsu.task OWNER TO epruesse;

--
-- Name: tax_breakdown; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE tax_breakdown (
    sample_site character varying(300) NOT NULL,
    path character varying(600) NOT NULL,
    classified integer DEFAULT 0 NOT NULL,
    clustered integer DEFAULT 0 NOT NULL,
    replicate integer DEFAULT 0 NOT NULL
);


ALTER TABLE silva_r103_lsu.tax_breakdown OWNER TO epruesse;

--
-- Name: taxmap; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE taxmap (
    node_id integer NOT NULL,
    "primaryAccession" character varying(30) NOT NULL,
    taxname character varying(30) NOT NULL,
    path character varying(600) NOT NULL,
    "organismName" character varying(255) NOT NULL
);


ALTER TABLE silva_r103_lsu.taxmap OWNER TO epruesse;

--
-- Name: taxonomy; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE taxonomy (
    node_id integer NOT NULL,
    taxname character varying(30) NOT NULL,
    path character varying(600) NOT NULL,
    node_name character varying(60) NOT NULL
);


ALTER TABLE silva_r103_lsu.taxonomy OWNER TO epruesse;

--
-- Name: whitelist; Type: TABLE; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

CREATE TABLE whitelist (
    start integer DEFAULT (-1) NOT NULL,
    stop integer DEFAULT (-1) NOT NULL,
    "primaryAccession" character varying(30) NOT NULL,
    name character varying(30) NOT NULL
);


ALTER TABLE silva_r103_lsu.whitelist OWNER TO epruesse;

SET search_path = silva_r103_ssu, pg_catalog;

--
-- Name: AlignedRegion; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE "AlignedRegion" (
    start integer NOT NULL,
    stop integer NOT NULL,
    "primaryAccession" character varying(30) NOT NULL,
    "alignedSequence" text,
    "alignedStart" integer DEFAULT (-1) NOT NULL,
    "alignedStop" integer DEFAULT (-1) NOT NULL,
    "alignmentDate" timestamp without time zone DEFAULT now() NOT NULL,
    "alignmentFamAvg" double precision DEFAULT (0)::double precision NOT NULL,
    "alignmentFamMax" double precision DEFAULT (0)::double precision NOT NULL,
    "alignmentFamSize" integer DEFAULT 0 NOT NULL,
    "alignmentLog" character varying(1024) DEFAULT ''::character varying NOT NULL,
    "alignmentQuality" real DEFAULT (0)::real NOT NULL,
    "alignmentReference" character varying(1024) DEFAULT ''::character varying NOT NULL,
    "alignmentStatus" text DEFAULT 'unaligned'::text NOT NULL,
    "BPScore" integer DEFAULT 0 NOT NULL,
    "cutoffHead" integer DEFAULT 0 NOT NULL,
    "cutoffTail" integer DEFAULT 0 NOT NULL,
    "revComp" text DEFAULT 'unknown'::text NOT NULL,
    "msaName" character varying(63) NOT NULL
);


ALTER TABLE silva_r103_ssu."AlignedRegion" OWNER TO epruesse;

--
-- Name: MSA; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE "MSA" (
    maintainer character varying(63) DEFAULT ''::character varying NOT NULL,
    "msaName" character varying(63) NOT NULL
);


ALTER TABLE silva_r103_ssu."MSA" OWNER TO epruesse;

--
-- Name: Publication; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE "Publication" (
    _id integer NOT NULL,
    "primaryAccession" character varying(30) NOT NULL,
    authors character varying(2000) DEFAULT ''::character varying NOT NULL,
    comment character varying(2000) DEFAULT ''::character varying NOT NULL,
    info character varying(2000) DEFAULT ''::character varying NOT NULL,
    "position" character varying(52) DEFAULT ''::character varying NOT NULL,
    refs text NOT NULL,
    title character varying(300) NOT NULL
);


ALTER TABLE silva_r103_ssu."Publication" OWNER TO epruesse;

--
-- Name: Region; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE "Region" (
    start integer DEFAULT 0 NOT NULL,
    stop integer DEFAULT 0 NOT NULL,
    "primaryAccession" character varying(30) NOT NULL,
    "annotationSource" character varying(255) DEFAULT ''::character varying NOT NULL,
    complement text DEFAULT 'yes'::text,
    "countRepetative" integer DEFAULT (-1) NOT NULL,
    crc character varying(200) NOT NULL,
    description character varying(255) DEFAULT ''::character varying NOT NULL,
    "geneName" character varying(20) DEFAULT ''::character varying NOT NULL,
    joins text NOT NULL,
    "percentAmbiguity" real DEFAULT ((-1))::real NOT NULL,
    "percentRepetative" real DEFAULT ((-1))::real NOT NULL,
    "percentVector" real DEFAULT ((-1))::real NOT NULL,
    "pintailScore" integer DEFAULT (-1) NOT NULL,
    "pintailTests" integer DEFAULT (-1) NOT NULL,
    product character varying(300) DEFAULT ''::character varying NOT NULL,
    quality real DEFAULT ((-1))::real,
    refs text NOT NULL,
    "regionLength" integer DEFAULT (-1) NOT NULL,
    "repetativeEvents" integer DEFAULT (-1) NOT NULL,
    sequence text NOT NULL,
    "startFlag" integer DEFAULT 0 NOT NULL,
    "stopFlag" integer DEFAULT 0 NOT NULL,
    type text DEFAULT 'unknown'::text NOT NULL
);


ALTER TABLE silva_r103_ssu."Region" OWNER TO epruesse;

--
-- Name: SequenceEntry; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE "SequenceEntry" (
    "primaryAccession" character varying(30) NOT NULL,
    accessions text NOT NULL,
    "alternativeName" character varying(255) DEFAULT ''::character varying NOT NULL,
    "bioMaterial" character varying(255) DEFAULT ''::character varying NOT NULL,
    circular text DEFAULT 'no'::text NOT NULL,
    clone text NOT NULL,
    "cloneLib" text NOT NULL,
    "collectionDate" character varying(30) DEFAULT ''::character varying NOT NULL,
    collector text NOT NULL,
    country text NOT NULL,
    crc character varying(200) NOT NULL,
    "cultureCollection" text NOT NULL,
    "dataClass" character varying(10) DEFAULT ''::character varying NOT NULL,
    "dataSource" character varying(10) NOT NULL,
    "dateImported" timestamp without time zone DEFAULT now() NOT NULL,
    "dateModified" date NOT NULL,
    "dateSubmitted" date NOT NULL,
    depth character varying(10) DEFAULT ''::character varying NOT NULL,
    description character varying(3000) DEFAULT ''::character varying NOT NULL,
    division character varying(10) DEFAULT ''::character varying NOT NULL,
    "envSample" text NOT NULL,
    filename character varying(300) DEFAULT ''::character varying NOT NULL,
    flags text DEFAULT ''::text NOT NULL,
    haplotype text NOT NULL,
    habitat character varying(255) DEFAULT ''::character varying NOT NULL,
    "identifiedBy" text NOT NULL,
    insdc integer DEFAULT (-1) NOT NULL,
    isolate text NOT NULL,
    "isolationSource" text NOT NULL,
    keywords character varying(1000) DEFAULT ''::character varying NOT NULL,
    "labHost" text NOT NULL,
    "latLong" text NOT NULL,
    "molecularType" character varying(20) DEFAULT ''::character varying NOT NULL,
    "namesHist" text NOT NULL,
    organelle character varying(1000) DEFAULT ''::character varying NOT NULL,
    "organismName" character varying(255) DEFAULT ''::character varying NOT NULL,
    "pcrPrimers" character varying(255) DEFAULT ''::character varying NOT NULL,
    "plasmidName" text NOT NULL,
    refs text NOT NULL,
    sequence text NOT NULL,
    "sequenceLength" integer DEFAULT 0 NOT NULL,
    "sequenceVersion" integer DEFAULT (-1) NOT NULL,
    "specificHost" text NOT NULL,
    "specimenVoucher" text NOT NULL,
    strain text NOT NULL,
    "strainID" integer DEFAULT 0 NOT NULL,
    "subSpecies" text NOT NULL,
    taxonomy character varying(4000) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE silva_r103_ssu."SequenceEntry" OWNER TO epruesse;

--
-- Name: accession; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE accession (
    "primaryAccession" character varying(30) NOT NULL,
    accession character varying(30) NOT NULL
);


ALTER TABLE silva_r103_ssu.accession OWNER TO epruesse;

--
-- Name: blacklist; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE blacklist (
    "primaryAccession" character varying(30) NOT NULL
);


ALTER TABLE silva_r103_ssu.blacklist OWNER TO epruesse;

--
-- Name: cluster; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE cluster (
    "primaryAccession" character varying(30) NOT NULL,
    "clusterAccession" character varying(30) NOT NULL,
    "sequenceIdentity" integer NOT NULL
);


ALTER TABLE silva_r103_ssu.cluster OWNER TO epruesse;

--
-- Name: envolite; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE envolite (
    insdc integer DEFAULT (-1) NOT NULL,
    goldstamp character varying(255) DEFAULT ''::character varying NOT NULL,
    habitat character varying(255) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE silva_r103_ssu.envolite OWNER TO epruesse;

--
-- Name: genomes; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE genomes (
    "primaryAccession" character varying(30) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE silva_r103_ssu.genomes OWNER TO epruesse;

--
-- Name: insects; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE insects (
    "primaryAccession" character varying(30) DEFAULT ''::character varying NOT NULL,
    start integer DEFAULT 0 NOT NULL,
    stop integer DEFAULT 0 NOT NULL,
    habitat character varying(255) DEFAULT ''::character varying NOT NULL,
    "isolationSource" text NOT NULL,
    "specificHost" text NOT NULL
);


ALTER TABLE silva_r103_ssu.insects OWNER TO epruesse;

--
-- Name: livingtree; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE livingtree (
    "primaryAccession" character varying(30) DEFAULT ''::character varying NOT NULL,
    "organismName" character varying(30) DEFAULT NULL::character varying,
    arb integer
);


ALTER TABLE silva_r103_ssu.livingtree OWNER TO epruesse;

--
-- Name: marine_habitat; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE marine_habitat (
    "primaryAccession" character varying(30) DEFAULT ''::character varying NOT NULL,
    "collectionDate" character varying(30) DEFAULT ''::character varying NOT NULL,
    depth character varying(10) DEFAULT ''::character varying NOT NULL,
    latitude text NOT NULL,
    longitude text NOT NULL
);


ALTER TABLE silva_r103_ssu.marine_habitat OWNER TO epruesse;

--
-- Name: observation_blast; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE observation_blast (
    "primaryAccession" character varying(30) NOT NULL,
    taxid character varying(30) NOT NULL,
    evalue double precision NOT NULL,
    bitscore integer NOT NULL,
    "alignmentIdentity" double precision NOT NULL,
    "queryStart" integer NOT NULL,
    "queryStop" integer NOT NULL,
    "queryCoverage" integer DEFAULT (-1) NOT NULL,
    "subjectStart" integer NOT NULL,
    "subjectStop" integer NOT NULL
);


ALTER TABLE silva_r103_ssu.observation_blast OWNER TO epruesse;

--
-- Name: otu_breakdown; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE otu_breakdown (
    "primaryAccession" character varying(30) DEFAULT ''::character varying NOT NULL,
    path character varying(600) NOT NULL,
    clustered integer DEFAULT 0 NOT NULL,
    replicate integer DEFAULT 0 NOT NULL
);


ALTER TABLE silva_r103_ssu.otu_breakdown OWNER TO epruesse;

--
-- Name: overlaps; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE "overlaps" (
    "primaryAccession" character varying(30) NOT NULL,
    start integer DEFAULT 0 NOT NULL,
    stop integer DEFAULT 0 NOT NULL
);


ALTER TABLE silva_r103_ssu."overlaps" OWNER TO epruesse;

--
-- Name: release; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE release (
    version integer,
    date date
);


ALTER TABLE silva_r103_ssu.release OWNER TO epruesse;

--
-- Name: straininfo; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE straininfo (
    "primaryAccession" character varying(30) NOT NULL,
    "strainID" integer DEFAULT (-1) NOT NULL,
    "strainType" text DEFAULT '-1'::text NOT NULL
);


ALTER TABLE silva_r103_ssu.straininfo OWNER TO epruesse;

--
-- Name: task; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE task (
    start integer DEFAULT (-1) NOT NULL,
    stop integer DEFAULT (-1) NOT NULL,
    "primaryAccession" character varying(30) NOT NULL,
    taskname character varying(20) NOT NULL
);


ALTER TABLE silva_r103_ssu.task OWNER TO epruesse;

--
-- Name: tax_breakdown; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE tax_breakdown (
    sample_site character varying(300) NOT NULL,
    path character varying(600) NOT NULL,
    classified integer DEFAULT 0 NOT NULL,
    clustered integer DEFAULT 0 NOT NULL,
    replicate integer DEFAULT 0 NOT NULL
);


ALTER TABLE silva_r103_ssu.tax_breakdown OWNER TO epruesse;

--
-- Name: taxmap; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE taxmap (
    node_id integer NOT NULL,
    "primaryAccession" character varying(30) NOT NULL,
    taxname character varying(30) NOT NULL,
    path character varying(600) NOT NULL,
    "organismName" character varying(255) NOT NULL
);


ALTER TABLE silva_r103_ssu.taxmap OWNER TO epruesse;

--
-- Name: taxonomy; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE taxonomy (
    node_id integer NOT NULL,
    taxname character varying(30) NOT NULL,
    path character varying(600) NOT NULL,
    node_name character varying(60) NOT NULL
);


ALTER TABLE silva_r103_ssu.taxonomy OWNER TO epruesse;

--
-- Name: whitelist; Type: TABLE; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

CREATE TABLE whitelist (
    start integer DEFAULT (-1) NOT NULL,
    stop integer DEFAULT (-1) NOT NULL,
    "primaryAccession" character varying(30) NOT NULL,
    name character varying(30) NOT NULL
);


ALTER TABLE silva_r103_ssu.whitelist OWNER TO epruesse;

SET search_path = stage_r8, pg_catalog;

--
-- Name: camera_portal_metadata; Type: TABLE; Schema: stage_r8; Owner: jschnetz; Tablespace: 
--

CREATE TABLE camera_portal_metadata (
    sample_acc text NOT NULL,
    sample_type text NOT NULL,
    sample_volume integer,
    volume_unit text,
    filter_min numeric,
    filter_max numeric,
    sample_description text,
    sample_name text,
    comments text,
    taxon_id text,
    collection_start_time text,
    collection_stop_time text,
    biomaterial_name text,
    description text,
    material_acc text,
    site_name text,
    latitude numeric,
    longitude numeric,
    altitude numeric,
    site_depth numeric,
    site_description text,
    country_name text,
    region text,
    habitat_name text,
    host_taxon_id text,
    host_description text,
    host_organism text,
    library_acc text,
    sequencing_method text,
    dna_type text,
    num_of_reads bigint,
    material_id text
);


ALTER TABLE stage_r8.camera_portal_metadata OWNER TO jschnetz;

--
-- Name: camera_portal_metagenomes; Type: TABLE; Schema: stage_r8; Owner: jschnetz; Tablespace: 
--

CREATE TABLE camera_portal_metagenomes (
    sequence_id text NOT NULL,
    fasta_header text NOT NULL,
    sequence text NOT NULL
);


ALTER TABLE stage_r8.camera_portal_metagenomes OWNER TO jschnetz;

--
-- Name: envogenomes_ba; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE envogenomes_ba (
    organism_name text DEFAULT ''::text,
    goldhabitat text DEFAULT ''::text,
    isolation_source text DEFAULT ''::text,
    geographic_location text DEFAULT ''::text,
    isolation_site text DEFAULT ''::text,
    envolite text DEFAULT ''::text,
    envobiome text DEFAULT ''::text,
    envofeature text DEFAULT ''::text,
    envomaterial text DEFAULT ''::text,
    envotags text DEFAULT ''::text,
    taxid bigint DEFAULT (- (1)::bigint),
    gpid bigint DEFAULT (- (1)::bigint),
    goldstamp text DEFAULT ''::text NOT NULL,
    remark text DEFAULT ''::text,
    taxon_oid text DEFAULT ''::text
);


ALTER TABLE stage_r8.envogenomes_ba OWNER TO pbuttigi;

--
-- Name: TABLE envogenomes_ba; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE envogenomes_ba IS 'GOLD genomes annotated with EnvO-Lite and marine EnvO terms. Status as of 2011-11-15';


--
-- Name: img_taxonomy; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_taxonomy (
    taxon_oid text NOT NULL,
    _domain text,
    phylum text,
    _class text,
    _order text,
    _family text,
    genus text,
    species text,
    strain text
);


ALTER TABLE stage_r8.img_taxonomy OWNER TO pbuttigi;

--
-- Name: TABLE img_taxonomy; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_taxonomy IS 'Acquired from IMG on 2011-12-17. Note that this does not include viruses.';


--
-- Name: env_phylo_class; Type: VIEW; Schema: stage_r8; Owner: pbuttigi
--

CREATE VIEW env_phylo_class AS
    SELECT e.envolite, t._domain, t.phylum, t._class, count(e.envolite) AS count FROM (img_taxonomy t JOIN envogenomes_ba e USING (taxon_oid)) GROUP BY e.envolite, t._domain, t.phylum, t._class ORDER BY count(e.envolite) DESC, t._domain, t.phylum, t._class, e.envolite;


ALTER TABLE stage_r8.env_phylo_class OWNER TO pbuttigi;

--
-- Name: VIEW env_phylo_class; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON VIEW env_phylo_class IS 'Sort genomes in img_taxonomy by domain, phylum, class, and envolite from envogenomes_ba, and count number of occurrences. 2012-02-28.';


--
-- Name: envogenomes_trim; Type: VIEW; Schema: stage_r8; Owner: kbseah
--

CREATE VIEW envogenomes_trim AS
    SELECT envotable.taxon_oid, envotable.taxcount, envogenomes_ba.organism_name, envogenomes_ba.goldhabitat, envogenomes_ba.isolation_source, envogenomes_ba.geographic_location, envogenomes_ba.isolation_site, envogenomes_ba.envolite, envogenomes_ba.envobiome, envogenomes_ba.envofeature, envogenomes_ba.envomaterial, envogenomes_ba.envotags, envogenomes_ba.taxid, envogenomes_ba.gpid, envogenomes_ba.goldstamp, envogenomes_ba.remark FROM ((SELECT envogenomes_ba.taxon_oid, count(envogenomes_ba.taxon_oid) AS taxcount FROM envogenomes_ba GROUP BY envogenomes_ba.taxon_oid) envotable JOIN envogenomes_ba USING (taxon_oid)) WHERE (envotable.taxcount = 1);


ALTER TABLE stage_r8.envogenomes_trim OWNER TO kbseah;

--
-- Name: VIEW envogenomes_trim; Type: COMMENT; Schema: stage_r8; Owner: kbseah
--

COMMENT ON VIEW envogenomes_trim IS 'filters envogenomes_ba to include only entries with unique taxon_oid';


--
-- Name: img_taxon; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_taxon (
    taxon_oid bigint NOT NULL,
    taxon_display_name text,
    taxon_domain text,
    seq_status text
);


ALTER TABLE stage_r8.img_taxon OWNER TO pbuttigi;

--
-- Name: TABLE img_taxon; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_taxon IS 'provides taxon descriptors for
each taxon OID in IMG';


--
-- Name: COLUMN img_taxon.taxon_oid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_taxon.taxon_oid IS 'IMG taxon object
identifier of genome';


--
-- Name: COLUMN img_taxon.taxon_display_name; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_taxon.taxon_display_name IS 'Taxon name
in IMG';


--
-- Name: COLUMN img_taxon.taxon_domain; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_taxon.taxon_domain IS 'Taxonomic domain';


--
-- Name: COLUMN img_taxon.seq_status; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_taxon.seq_status IS 'Sequencing status of
genome project';


--
-- Name: envogenomes_trim2; Type: VIEW; Schema: stage_r8; Owner: kbseah
--

CREATE VIEW envogenomes_trim2 AS
    SELECT e.taxon_oid, e.taxcount, e.organism_name, e.goldhabitat, e.isolation_source, e.geographic_location, e.isolation_site, e.envolite, e.envobiome, e.envofeature, e.envomaterial, e.envotags, e.taxid, e.gpid, e.goldstamp, e.remark FROM (img_taxon t JOIN (SELECT envotable.taxon_oid, envotable.taxcount, envogenomes_ba.organism_name, envogenomes_ba.goldhabitat, envogenomes_ba.isolation_source, envogenomes_ba.geographic_location, envogenomes_ba.isolation_site, envogenomes_ba.envolite, envogenomes_ba.envobiome, envogenomes_ba.envofeature, envogenomes_ba.envomaterial, envogenomes_ba.envotags, envogenomes_ba.taxid, envogenomes_ba.gpid, envogenomes_ba.goldstamp, envogenomes_ba.remark FROM ((SELECT envogenomes_ba.taxon_oid, count(envogenomes_ba.taxon_oid) AS taxcount FROM envogenomes_ba GROUP BY envogenomes_ba.taxon_oid) envotable JOIN envogenomes_ba USING (taxon_oid)) WHERE (envotable.taxcount = 1)) e ON (((e.taxon_oid)::bigint = t.taxon_oid))) WHERE (((t.taxon_domain = 'Bacteria'::text) OR (t.taxon_domain = 'Archaea'::text)) AND ((t.seq_status = 'Permanent Draft'::text) OR (t.seq_status = 'Finished'::text)));


ALTER TABLE stage_r8.envogenomes_trim2 OWNER TO kbseah;

--
-- Name: VIEW envogenomes_trim2; Type: COMMENT; Schema: stage_r8; Owner: kbseah
--

COMMENT ON VIEW envogenomes_trim2 IS 'filters envogenomes_ba to include only entries with unique taxon_oid, only Bacteria and Archaea, and only Finished or Permanent Draft genomes.';


--
-- Name: taxonomy_trim2; Type: VIEW; Schema: stage_r8; Owner: kbseah
--

CREATE VIEW taxonomy_trim2 AS
    SELECT e.taxon_oid, e.taxcount, e.organism_name, e.goldhabitat, e.isolation_source, e.geographic_location, e.isolation_site, e.envolite, e.envobiome, e.envofeature, e.envomaterial, e.envotags, e.taxid, e.gpid, e.goldstamp, t._domain, t.phylum, t._class, t._order, t._family, t.genus, ((t.genus || ' '::text) || t.species) AS fullspecies, ((((t.genus || ' '::text) || t.species) || ' '::text) || t.strain) AS fullstrain FROM (envogenomes_trim2 e JOIN img_taxonomy t ON (((t.taxon_oid)::bigint = (e.taxon_oid)::bigint)));


ALTER TABLE stage_r8.taxonomy_trim2 OWNER TO kbseah;

--
-- Name: VIEW taxonomy_trim2; Type: COMMENT; Schema: stage_r8; Owner: kbseah
--

COMMENT ON VIEW taxonomy_trim2 IS 'creates list of Bacteria and Archaea with envolite annotations and full taxonomy, by joining envogenomes_trim2 and img_taxonomy on taxon_oid';


--
-- Name: finished_taxonomy_trim2; Type: VIEW; Schema: stage_r8; Owner: kbseah
--

CREATE VIEW finished_taxonomy_trim2 AS
    SELECT tt.taxon_oid, tt.taxcount, tt.organism_name, tt.goldhabitat, tt.isolation_source, tt.geographic_location, tt.isolation_site, tt.envolite, tt.envobiome, tt.envofeature, tt.envomaterial, tt.envotags, tt.taxid, tt.gpid, tt.goldstamp, tt._domain, tt.phylum, tt._class, tt._order, tt._family, tt.genus, tt.fullspecies, tt.fullstrain FROM (img_taxon t JOIN taxonomy_trim2 tt ON ((t.taxon_oid = (tt.taxon_oid)::bigint))) WHERE (t.seq_status = 'Finished'::text);


ALTER TABLE stage_r8.finished_taxonomy_trim2 OWNER TO kbseah;

--
-- Name: VIEW finished_taxonomy_trim2; Type: COMMENT; Schema: stage_r8; Owner: kbseah
--

COMMENT ON VIEW finished_taxonomy_trim2 IS 'selects entries from view taxonomy_trim2 which are of Finished genomes only.';


--
-- Name: gold; Type: TABLE; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

CREATE TABLE gold (
    superkingdom text DEFAULT ''::text,
    phylum text DEFAULT ''::text,
    _class text DEFAULT ''::text,
    _order text DEFAULT ''::text,
    _family text DEFAULT ''::text,
    genus text DEFAULT ''::text,
    species text DEFAULT ''::text,
    _domain text DEFAULT ''::text,
    classification text DEFAULT ''::text,
    organism_name text DEFAULT ''::text,
    strain text DEFAULT ''::text,
    serovar_biovar text DEFAULT ''::text,
    common_name text DEFAULT ''::text,
    ncbi_project_name text DEFAULT ''::text,
    culture_collection text DEFAULT ''::text,
    type_strain text DEFAULT ''::text,
    goldstamp text DEFAULT ''::text,
    old_goldstamp text DEFAULT ''::text,
    project_type text DEFAULT ''::text,
    project_status text DEFAULT ''::text,
    availability text DEFAULT ''::text,
    sequencing_centers text DEFAULT ''::text,
    funding text DEFAULT ''::text,
    contact_name text DEFAULT ''::text,
    contact_email text DEFAULT ''::text,
    contact_url text DEFAULT ''::text,
    locus_tag text DEFAULT ''::text,
    completion_date text DEFAULT ''::text,
    publication text DEFAULT ''::text,
    project_relevance text DEFAULT ''::text,
    ncbi_taxon_id text DEFAULT ''::text,
    ncbi_project_id text DEFAULT ''::text,
    ncbi_archive_id text DEFAULT ''::text,
    short_reads_archive_id text DEFAULT ''::text,
    gcat_id text DEFAULT ''::text,
    hmp_id text DEFAULT ''::text,
    homd_id text DEFAULT ''::text,
    straininfo_id text DEFAULT ''::text,
    greengenes_object_id text DEFAULT ''::text,
    img_object_id text DEFAULT ''::text,
    genome_data text DEFAULT ''::text,
    sequencing_status text DEFAULT ''::text,
    sequencing_quality text DEFAULT ''::text,
    comments text DEFAULT ''::text,
    library_method text DEFAULT ''::text,
    reads_count text DEFAULT ''::text,
    vector text DEFAULT ''::text,
    assembly_method text DEFAULT ''::text,
    sequencing_depth text DEFAULT ''::text,
    gene_calling_method text DEFAULT ''::text,
    contig_count text DEFAULT ''::text,
    _size text DEFAULT ''::text,
    orfs text DEFAULT ''::text,
    chromosome_count text DEFAULT ''::text,
    plasmid_count text DEFAULT ''::text,
    gc_content text DEFAULT ''::text,
    sequencing_method text DEFAULT ''::text,
    sequencing_country text DEFAULT ''::text,
    isolation_site text DEFAULT ''::text,
    isolation_source text DEFAULT ''::text,
    isolation_comments text DEFAULT ''::text,
    collection_date text DEFAULT ''::text,
    isolation_country text DEFAULT ''::text,
    isolation_pubmed_id text DEFAULT ''::text,
    geographic_location text DEFAULT ''::text,
    latitude text DEFAULT ''::text,
    longitude text DEFAULT ''::text,
    altitude text DEFAULT ''::text,
    depth text DEFAULT ''::text,
    host_name text DEFAULT ''::text,
    host_taxon_id text DEFAULT ''::text,
    host_gender text DEFAULT ''::text,
    host_age text DEFAULT ''::text,
    host_race text DEFAULT ''::text,
    host_health text DEFAULT ''::text,
    host_medication text DEFAULT ''::text,
    host_specificity text DEFAULT ''::text,
    body_sample_site text DEFAULT ''::text,
    body_product text DEFAULT ''::text,
    body_sample_subsite text DEFAULT ''::text,
    host_comments text DEFAULT ''::text,
    oxygen_requirement text DEFAULT ''::text,
    cell_shape text DEFAULT ''::text,
    sporulation text DEFAULT ''::text,
    pressure text DEFAULT ''::text,
    temperature_range text DEFAULT ''::text,
    salinity text DEFAULT ''::text,
    ph text DEFAULT ''::text,
    cell_diameter text DEFAULT ''::text,
    cell_length text DEFAULT ''::text,
    color text DEFAULT ''::text,
    gram_staining text DEFAULT ''::text,
    biotic_relationships text DEFAULT ''::text,
    symbiotic_interaction text DEFAULT ''::text,
    symbiotic_relationship text DEFAULT ''::text,
    symbiont_name text DEFAULT ''::text,
    symbiont_taxon_id text DEFAULT ''::text,
    cell_arrangement text DEFAULT ''::text,
    disease text DEFAULT ''::text,
    habitat text DEFAULT ''::text,
    temperature text DEFAULT ''::text,
    metabolism text DEFAULT ''::text,
    motility text DEFAULT ''::text,
    phenotype text DEFAULT ''::text,
    energy_source text DEFAULT ''::text
);


ALTER TABLE stage_r8.gold OWNER TO rkottman;

--
-- Name: gprj_complete_genomes; Type: TABLE; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

CREATE TABLE gprj_complete_genomes (
    project_id text,
    taxonomy_id text,
    organism_name text,
    super_kingdom text,
    _group text,
    genome_size text,
    gc_content text,
    number_of_chromosomes text,
    number_of_plasmids text,
    released_date text,
    modified_date text,
    genbank_accessions text,
    refseq_accessions text,
    publications text,
    center_consortium text
);


ALTER TABLE stage_r8.gprj_complete_genomes OWNER TO rkottman;

--
-- Name: gprj_draft_genomes; Type: TABLE; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

CREATE TABLE gprj_draft_genomes (
    project_id text,
    taxonomy_id text,
    organism_name text,
    super_kingdom text,
    _group text,
    sequence_availability text,
    accession text,
    number_of_contigs text,
    number_of_cdss_on_contigs text,
    genome_size text,
    gc_content text,
    released_date text,
    center_name text,
    center_url text
);


ALTER TABLE stage_r8.gprj_draft_genomes OWNER TO rkottman;

--
-- Name: gprj_genome_info; Type: TABLE; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

CREATE TABLE gprj_genome_info (
    project_id text NOT NULL,
    taxonomy_id text,
    organism_name text NOT NULL,
    super_kingdom text NOT NULL,
    _group text,
    sequence_status text,
    genome_size text,
    gc_content text,
    gram_stain text,
    shape text,
    arrangment text,
    endospores text,
    motility text,
    salinity text,
    oxygen_req text,
    habitat text,
    temp_range text,
    optimal_temp text,
    pathogenic_in text,
    disease text
);


ALTER TABLE stage_r8.gprj_genome_info OWNER TO rkottman;

--
-- Name: gprj_genome_md5; Type: TABLE; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

CREATE TABLE gprj_genome_md5 (
    md5sum text NOT NULL,
    fasta_header text NOT NULL,
    seq text NOT NULL
);


ALTER TABLE stage_r8.gprj_genome_md5 OWNER TO rkottman;

--
-- Name: gprj_gff; Type: TABLE; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

CREATE TABLE gprj_gff (
    seqid text NOT NULL,
    source text NOT NULL,
    _type text NOT NULL,
    _start integer NOT NULL,
    stop integer NOT NULL,
    score text NOT NULL,
    strand character varying(1) NOT NULL,
    phase text NOT NULL,
    attributes text NOT NULL,
    CONSTRAINT gprj_gff_phase_check CHECK ((phase ~ '(0|1|2|\.)'::text)),
    CONSTRAINT gprj_gff_strand_check CHECK (((strand)::text ~ '(\+|-|\.|\?)'::text))
);


ALTER TABLE stage_r8.gprj_gff OWNER TO rkottman;

--
-- Name: img_cog; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_cog (
    taxon_oid bigint NOT NULL,
    gene_oid bigint NOT NULL,
    gene_length text,
    percent_identity text,
    query_start text,
    query_end text,
    subj_start text,
    subj_end text,
    evalue text,
    bit_score text,
    cog_id text,
    cog_name text,
    cog_length text
);


ALTER TABLE stage_r8.img_cog OWNER TO pbuttigi;

--
-- Name: TABLE img_cog; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_cog IS 'from NCBI RPSBLAST';


--
-- Name: COLUMN img_cog.gene_oid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_cog.gene_oid IS 'Gene object identifier
of query gene';


--
-- Name: COLUMN img_cog.gene_length; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_cog.gene_length IS 'Length of protein
sequence';


--
-- Name: COLUMN img_cog.percent_identity; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_cog.percent_identity IS 'Perceent
identity of aligned amino acid residues';


--
-- Name: COLUMN img_cog.query_start; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_cog.query_start IS 'Start coordinate of
alignment on query gene';


--
-- Name: COLUMN img_cog.query_end; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_cog.query_end IS 'End coordinate of
alignment on query gene';


--
-- Name: COLUMN img_cog.subj_start; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_cog.subj_start IS 'Start coordinate of
alignment on subject sequence';


--
-- Name: COLUMN img_cog.subj_end; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_cog.subj_end IS 'End coordinate of
alignment on subject sequence';


--
-- Name: COLUMN img_cog.evalue; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_cog.evalue IS 'Expectation value';


--
-- Name: COLUMN img_cog.bit_score; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_cog.bit_score IS 'Bit score of alignment';


--
-- Name: COLUMN img_cog.cog_id; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_cog.cog_id IS 'COG identifier';


--
-- Name: COLUMN img_cog.cog_name; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_cog.cog_name IS 'COG name';


--
-- Name: COLUMN img_cog.cog_length; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_cog.cog_length IS 'Length of COG
consensus sequence';


--
-- Name: img_genes; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_genes (
    taxon_oid bigint NOT NULL,
    gene_oid bigint NOT NULL,
    start_coord text,
    end_coord text,
    strand text,
    gc text,
    locus_type text,
    locus_tag text,
    gene_symbol text,
    description text,
    scaffold_name text
);


ALTER TABLE stage_r8.img_genes OWNER TO pbuttigi;

--
-- Name: TABLE img_genes; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_genes IS 'basic gene information';


--
-- Name: COLUMN img_genes.gene_oid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_genes.gene_oid IS 'Gene object identifier';


--
-- Name: COLUMN img_genes.start_coord; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_genes.start_coord IS 'Start coordinate on
scaffold/contig';


--
-- Name: COLUMN img_genes.end_coord; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_genes.end_coord IS 'End coordinate on
scaffold/contig';


--
-- Name: COLUMN img_genes.strand; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_genes.strand IS '(+) or (-) strand';


--
-- Name: COLUMN img_genes.gc; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_genes.gc IS 'GC composition';


--
-- Name: COLUMN img_genes.locus_type; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_genes.locus_type IS 'CDS or an RNA type';


--
-- Name: COLUMN img_genes.locus_tag; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_genes.locus_tag IS 'Locus tag label';


--
-- Name: COLUMN img_genes.gene_symbol; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_genes.gene_symbol IS 'Gene symbol (or name)';


--
-- Name: COLUMN img_genes.description; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_genes.description IS 'Lengthier
description of gene, product name';


--
-- Name: COLUMN img_genes.scaffold_name; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_genes.scaffold_name IS 'Scaffold (contig)
of gene';


--
-- Name: img_gff; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_gff (
    taxon_oid bigint NOT NULL,
    seqid text,
    source text,
    ftype text,
    start_coord text,
    end_coord text,
    score text,
    strand text,
    phase text,
    gff_attributes text
);


ALTER TABLE stage_r8.img_gff OWNER TO pbuttigi;

--
-- Name: TABLE img_gff; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_gff IS 'GFF data';


--
-- Name: COLUMN img_gff.seqid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_gff.seqid IS 'Sequence ID';


--
-- Name: COLUMN img_gff.source; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_gff.source IS 'version of IMG database';


--
-- Name: COLUMN img_gff.ftype; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_gff.ftype IS 'feature type';


--
-- Name: COLUMN img_gff.start_coord; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_gff.start_coord IS 'starting coordinate';


--
-- Name: COLUMN img_gff.end_coord; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_gff.end_coord IS 'ending coordinate';


--
-- Name: COLUMN img_gff.score; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_gff.score IS 'NA';


--
-- Name: COLUMN img_gff.phase; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_gff.phase IS 'NA';


--
-- Name: COLUMN img_gff.gff_attributes; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_gff.gff_attributes IS 'ID=<gene_oid>;locus_tag=<locus_tag>;product=<product name>';


--
-- Name: img_ipr; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_ipr (
    taxon_oid bigint NOT NULL,
    gene_oid bigint NOT NULL,
    gene_length text,
    query_start text,
    query_end text,
    domaindb text,
    domainid text,
    iprid text,
    iprdesc text,
    go_info text
);


ALTER TABLE stage_r8.img_ipr OWNER TO pbuttigi;

--
-- Name: TABLE img_ipr; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_ipr IS 'InterPro data';


--
-- Name: COLUMN img_ipr.gene_oid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ipr.gene_oid IS 'Gene object identifier
of query gene';


--
-- Name: COLUMN img_ipr.gene_length; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ipr.gene_length IS 'Length of protein
sequence';


--
-- Name: COLUMN img_ipr.query_start; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ipr.query_start IS 'Start coordinate of
alignment on query gene';


--
-- Name: COLUMN img_ipr.query_end; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ipr.query_end IS 'End coordinate of
alignment on query gene';


--
-- Name: COLUMN img_ipr.domaindb; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ipr.domaindb IS 'Original domain database.';


--
-- Name: COLUMN img_ipr.domainid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ipr.domainid IS 'ID on original domain
database.';


--
-- Name: COLUMN img_ipr.iprid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ipr.iprid IS 'InterPro ID.';


--
-- Name: COLUMN img_ipr.iprdesc; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ipr.iprdesc IS 'InterPro description.';


--
-- Name: COLUMN img_ipr.go_info; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ipr.go_info IS 'Gene Ontology Information';


--
-- Name: img_ko; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_ko (
    taxon_oid bigint NOT NULL,
    gene_oid bigint NOT NULL,
    gene_length text,
    percent_identity text,
    query_start text,
    query_end text,
    subj_start text,
    subj_end text,
    evalue text,
    bit_score text,
    ko_id text,
    ko_name text,
    ec text
);


ALTER TABLE stage_r8.img_ko OWNER TO pbuttigi;

--
-- Name: TABLE img_ko; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_ko IS 'from NCBI BLASTP on KEGG genes';


--
-- Name: COLUMN img_ko.gene_oid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ko.gene_oid IS 'Gene object identifier of
query gene';


--
-- Name: COLUMN img_ko.gene_length; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ko.gene_length IS 'Length of protein
sequence';


--
-- Name: COLUMN img_ko.percent_identity; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ko.percent_identity IS 'Perceent identity
of aligned amino acid residues';


--
-- Name: COLUMN img_ko.query_start; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ko.query_start IS 'Start coordinate of
alignment on query gene';


--
-- Name: COLUMN img_ko.query_end; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ko.query_end IS 'End coordinate of
alignment on query gene';


--
-- Name: COLUMN img_ko.subj_start; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ko.subj_start IS 'Start coordinate of
alignment on subject sequence';


--
-- Name: COLUMN img_ko.subj_end; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ko.subj_end IS 'End coordinate of
alignment on subject sequence';


--
-- Name: COLUMN img_ko.evalue; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ko.evalue IS 'Expectation value';


--
-- Name: COLUMN img_ko.bit_score; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ko.bit_score IS 'Bit score of alignment';


--
-- Name: COLUMN img_ko.ko_id; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ko.ko_id IS 'KEGG Orthology (KO) identifier';


--
-- Name: COLUMN img_ko.ko_name; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ko.ko_name IS 'KO name';


--
-- Name: COLUMN img_ko.ec; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_ko.ec IS 'Enzyme Commission (EC)
assignment from KO';


--
-- Name: img_kog; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_kog (
    taxon_oid bigint NOT NULL,
    gene_oid bigint NOT NULL,
    gene_length text,
    percent_identity text,
    query_start text,
    query_end text,
    subj_start text,
    subj_end text,
    evalue text,
    bit_score text,
    kog_id text,
    kog_name text,
    kog_length text
);


ALTER TABLE stage_r8.img_kog OWNER TO pbuttigi;

--
-- Name: TABLE img_kog; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_kog IS 'from NCBI RPSBLAST';


--
-- Name: COLUMN img_kog.gene_oid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_kog.gene_oid IS 'Gene object identifier
of query gene';


--
-- Name: COLUMN img_kog.gene_length; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_kog.gene_length IS 'Length of protein
sequence';


--
-- Name: COLUMN img_kog.percent_identity; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_kog.percent_identity IS 'Perceent
identity of aligned amino acid residues';


--
-- Name: COLUMN img_kog.query_start; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_kog.query_start IS 'Start coordinate of
alignment on query gene';


--
-- Name: COLUMN img_kog.query_end; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_kog.query_end IS 'End coordinate of
alignment on query gene';


--
-- Name: COLUMN img_kog.subj_start; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_kog.subj_start IS 'Start coordinate of
alignment on subject sequence';


--
-- Name: COLUMN img_kog.subj_end; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_kog.subj_end IS 'End coordinate of
alignment on subject sequence';


--
-- Name: COLUMN img_kog.evalue; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_kog.evalue IS 'Expectation value';


--
-- Name: COLUMN img_kog.bit_score; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_kog.bit_score IS 'Bit score of alignment';


--
-- Name: COLUMN img_kog.kog_id; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_kog.kog_id IS 'KOG identifier';


--
-- Name: COLUMN img_kog.kog_name; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_kog.kog_name IS 'KOG name';


--
-- Name: COLUMN img_kog.kog_length; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_kog.kog_length IS 'Length of KOG
consensus sequence';


--
-- Name: img_map; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_map (
    taxon_oid text NOT NULL,
    taxid text,
    refseq text,
    gbk text,
    gold_proposal_id text
);


ALTER TABLE stage_r8.img_map OWNER TO pbuttigi;

--
-- Name: TABLE img_map; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_map IS 'Acquired from IMG on 2011-12-17';


--
-- Name: img_pfam; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_pfam (
    taxon_oid bigint NOT NULL,
    gene_oid bigint NOT NULL,
    gene_length text,
    something text,
    query_start text,
    query_end text,
    subj_start text,
    subj_end text,
    evalue text,
    bit_score text,
    pfam_id text,
    pfam_name text,
    pfam_length text
);


ALTER TABLE stage_r8.img_pfam OWNER TO pbuttigi;

--
-- Name: TABLE img_pfam; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_pfam IS 'from EBI pfam_scan which uses
HMMER 3.0';


--
-- Name: COLUMN img_pfam.gene_oid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_pfam.gene_oid IS 'Gene object identifier
of query gene';


--
-- Name: COLUMN img_pfam.gene_length; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_pfam.gene_length IS 'Length of protein
sequence';


--
-- Name: COLUMN img_pfam.query_start; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_pfam.query_start IS 'Start coordinate of
alignment on query gene';


--
-- Name: COLUMN img_pfam.query_end; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_pfam.query_end IS 'End coordinate of
alignment on query gene';


--
-- Name: COLUMN img_pfam.subj_start; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_pfam.subj_start IS 'Start coordinate of
alignment on subject sequence';


--
-- Name: COLUMN img_pfam.subj_end; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_pfam.subj_end IS 'End coordinate of
alignment on subject sequence';


--
-- Name: COLUMN img_pfam.evalue; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_pfam.evalue IS 'Expectation value';


--
-- Name: COLUMN img_pfam.bit_score; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_pfam.bit_score IS 'Bit score of alignment';


--
-- Name: COLUMN img_pfam.pfam_id; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_pfam.pfam_id IS 'Pfam identifier';


--
-- Name: COLUMN img_pfam.pfam_name; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_pfam.pfam_name IS 'Pfam name';


--
-- Name: COLUMN img_pfam.pfam_length; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_pfam.pfam_length IS 'Length of Pfam
consensus sequence';


--
-- Name: img_pfam_cats; Type: TABLE; Schema: stage_r8; Owner: kbseah; Tablespace: 
--

CREATE TABLE img_pfam_cats (
    pfama_acc text NOT NULL,
    cog text NOT NULL,
    function_code text,
    function_group text,
    definition text NOT NULL,
    cog_pathway_name text NOT NULL
);


ALTER TABLE stage_r8.img_pfam_cats OWNER TO kbseah;

--
-- Name: img_signalp; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_signalp (
    taxon_oid bigint NOT NULL,
    gene_oid bigint NOT NULL,
    gene_length text,
    feature_type text,
    start_coord text,
    end_coord text
);


ALTER TABLE stage_r8.img_signalp OWNER TO pbuttigi;

--
-- Name: TABLE img_signalp; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_signalp IS 'SignalP data';


--
-- Name: COLUMN img_signalp.gene_oid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_signalp.gene_oid IS 'Gene object
identifier of query gene';


--
-- Name: COLUMN img_signalp.gene_length; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_signalp.gene_length IS 'Length of protein
sequence';


--
-- Name: COLUMN img_signalp.feature_type; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_signalp.feature_type IS 'cleavage';


--
-- Name: COLUMN img_signalp.start_coord; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_signalp.start_coord IS 'start coordinate
of feature';


--
-- Name: COLUMN img_signalp.end_coord; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_signalp.end_coord IS 'end coordinate of
feature';


--
-- Name: img_tigrfam; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_tigrfam (
    taxon_oid bigint NOT NULL,
    gene_oid bigint NOT NULL,
    gene_length text,
    something text,
    query_start text,
    query_end text,
    evalue text,
    bit_score text,
    tigrfam_id text,
    tigrfam_name text
);


ALTER TABLE stage_r8.img_tigrfam OWNER TO pbuttigi;

--
-- Name: TABLE img_tigrfam; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_tigrfam IS 'from hmmscan HMMER3.0';


--
-- Name: COLUMN img_tigrfam.gene_oid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_tigrfam.gene_oid IS 'Gene object
identifier of query gene';


--
-- Name: COLUMN img_tigrfam.gene_length; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_tigrfam.gene_length IS 'Length of protein
sequence';


--
-- Name: COLUMN img_tigrfam.query_start; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_tigrfam.query_start IS 'Start coordinate
of alignment on query gene';


--
-- Name: COLUMN img_tigrfam.query_end; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_tigrfam.query_end IS 'End coordinate of
alignment on query gene';


--
-- Name: COLUMN img_tigrfam.evalue; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_tigrfam.evalue IS 'Expectation value';


--
-- Name: COLUMN img_tigrfam.bit_score; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_tigrfam.bit_score IS 'Bit score of
alignment';


--
-- Name: COLUMN img_tigrfam.tigrfam_id; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_tigrfam.tigrfam_id IS 'TIGRFAM identifier';


--
-- Name: COLUMN img_tigrfam.tigrfam_name; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_tigrfam.tigrfam_name IS 'TIGRFAM name';


--
-- Name: img_tmhmm; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_tmhmm (
    taxon_oid bigint NOT NULL,
    gene_oid bigint NOT NULL,
    gene_length text,
    feature_type text,
    start_coord text,
    end_coord text
);


ALTER TABLE stage_r8.img_tmhmm OWNER TO pbuttigi;

--
-- Name: TABLE img_tmhmm; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_tmhmm IS 'TMHMM data';


--
-- Name: COLUMN img_tmhmm.gene_oid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_tmhmm.gene_oid IS 'Gene object identifier
of query gene';


--
-- Name: COLUMN img_tmhmm.gene_length; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_tmhmm.gene_length IS 'Length of protein
sequence';


--
-- Name: COLUMN img_tmhmm.feature_type; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_tmhmm.feature_type IS 'feature';


--
-- Name: COLUMN img_tmhmm.start_coord; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_tmhmm.start_coord IS 'start coordinate of
feature';


--
-- Name: COLUMN img_tmhmm.end_coord; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_tmhmm.end_coord IS 'end coordinate of
feature';


--
-- Name: img_xref; Type: TABLE; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

CREATE TABLE img_xref (
    taxon_oid bigint,
    gene_oid bigint,
    db_name text,
    id text
);


ALTER TABLE stage_r8.img_xref OWNER TO pbuttigi;

--
-- Name: TABLE img_xref; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON TABLE img_xref IS 'provides crossref data for IMG
gene OIDs';


--
-- Name: COLUMN img_xref.gene_oid; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_xref.gene_oid IS 'Gene object identifier
of query gene';


--
-- Name: COLUMN img_xref.db_name; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_xref.db_name IS 'External database';


--
-- Name: COLUMN img_xref.id; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON COLUMN img_xref.id IS 'External ID corresponding to
database';


--
-- Name: marine_phages; Type: TABLE; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

CREATE TABLE marine_phages (
    embl_accn text NOT NULL,
    ncbi_org text NOT NULL,
    gbk_def text NOT NULL,
    habitat text DEFAULT ''::text NOT NULL,
    habitatdesc text DEFAULT ''::text NOT NULL,
    phg_taxid text DEFAULT ''::text NOT NULL,
    phg_order text DEFAULT ''::text NOT NULL,
    phg_family_ncbi text DEFAULT ''::text NOT NULL,
    phg_family_expert text DEFAULT ''::text NOT NULL,
    original_host text DEFAULT ''::text NOT NULL,
    host_taxid text DEFAULT ''::text NOT NULL,
    host_domain text DEFAULT ''::text NOT NULL,
    host_phylum text DEFAULT ''::text NOT NULL,
    host_class text DEFAULT ''::text NOT NULL,
    host_order text DEFAULT ''::text NOT NULL,
    host_family text DEFAULT ''::text NOT NULL,
    host_genus text DEFAULT ''::text NOT NULL,
    host_species text DEFAULT ''::text NOT NULL,
    host_subsp text DEFAULT ''::text NOT NULL,
    location_name text DEFAULT ''::text NOT NULL,
    phg_gprj_id text DEFAULT ''::text NOT NULL,
    latitude double precision DEFAULT 'NaN'::double precision NOT NULL,
    longitude double precision DEFAULT 'NaN'::double precision NOT NULL,
    date_sampled text DEFAULT ''::text NOT NULL,
    old_geom public.geometry,
    id integer NOT NULL,
    depth numeric DEFAULT 'NaN'::numeric,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.st_ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'POINT'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.st_srid(geom) = 4326))
);


ALTER TABLE stage_r8.marine_phages OWNER TO rkottman;

--
-- Name: COLUMN marine_phages.embl_accn; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.embl_accn IS 'NCBI RefSeq Accn';


--
-- Name: COLUMN marine_phages.ncbi_org; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.ncbi_org IS 'NCBI "Organism Name" from GenBank file';


--
-- Name: COLUMN marine_phages.gbk_def; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.gbk_def IS '''DEFINITION'' field from GenBank file';


--
-- Name: COLUMN marine_phages.habitat; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.habitat IS 'first layer of habitat lite descriptor from GCDML';


--
-- Name: COLUMN marine_phages.habitatdesc; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.habitatdesc IS 'habitatDesc from GCDML';


--
-- Name: COLUMN marine_phages.phg_taxid; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.phg_taxid IS 'phage NCBI taxid from GenBank file';


--
-- Name: COLUMN marine_phages.phg_order; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.phg_order IS 'phage order from NCBI taxonomy';


--
-- Name: COLUMN marine_phages.phg_family_ncbi; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.phg_family_ncbi IS 'phage family according to NCBI taxonomy; this is not always conssitent with publication or expect opinion that could classify phages ad hoc based on morphology';


--
-- Name: COLUMN marine_phages.phg_family_expert; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.phg_family_expert IS 'phage family, will inherit phg_family_NCBI unless there is a conflict in the publication or by a phage expert that determines family classification based on morphology, such as is sometimes done by Felix d''Hérelle Reference Center for Bacterial Viruses (http://www.phage.ulaval.ca/index.php)';


--
-- Name: COLUMN marine_phages.original_host; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.original_host IS '''original host'' field in GenBank or initial host this phage was first isolated on, as per publication';


--
-- Name: COLUMN marine_phages.host_taxid; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.host_taxid IS 'if known, this is the taxid of NCBI taxonomy for ''original_host''';


--
-- Name: COLUMN marine_phages.host_domain; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.host_domain IS 'if known, this is the NCBI taxonomy of ''original_host''';


--
-- Name: COLUMN marine_phages.host_phylum; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.host_phylum IS 'if known, this is the NCBI taxonomy of ''original_host''';


--
-- Name: COLUMN marine_phages.host_class; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.host_class IS 'if known, this is the NCBI taxonomy of ''original_host''';


--
-- Name: COLUMN marine_phages.host_order; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.host_order IS 'if known, this is the NCBI taxonomy of ''original_host''';


--
-- Name: COLUMN marine_phages.host_family; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.host_family IS 'if known, this is the NCBI taxonomy of ''original_host''';


--
-- Name: COLUMN marine_phages.host_genus; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.host_genus IS 'if known, this is the NCBI taxonomy of ''original_host''';


--
-- Name: COLUMN marine_phages.host_species; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.host_species IS 'if known, this is the NCBI taxonomy of ''original_host''';


--
-- Name: COLUMN marine_phages.host_subsp; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.host_subsp IS 'if known, this is the NCBI taxonomy of ''original_host''';


--
-- Name: COLUMN marine_phages.location_name; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.location_name IS 'from publication, free type';


--
-- Name: COLUMN marine_phages.phg_gprj_id; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.phg_gprj_id IS 'GCDML <genomeProjectID>';


--
-- Name: COLUMN marine_phages.date_sampled; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.date_sampled IS 'sampling time, give as much information as possible, currently we agreed this should be text to allow for ranges...we can later decide on a standard date format to deal with this';


--
-- Name: COLUMN marine_phages.id; Type: COMMENT; Schema: stage_r8; Owner: rkottman
--

COMMENT ON COLUMN marine_phages.id IS 'artificial key needed for mapserver getfeatureinfo request to work';


--
-- Name: marine_phages_id_seq; Type: SEQUENCE; Schema: stage_r8; Owner: rkottman
--

CREATE SEQUENCE marine_phages_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE stage_r8.marine_phages_id_seq OWNER TO rkottman;

--
-- Name: marine_phages_id_seq; Type: SEQUENCE OWNED BY; Schema: stage_r8; Owner: rkottman
--

ALTER SEQUENCE marine_phages_id_seq OWNED BY marine_phages.id;


--
-- Name: masu_marfam_pfam; Type: VIEW; Schema: stage_r8; Owner: pbuttigi
--

CREATE VIEW masu_marfam_pfam AS
    SELECT p.pfam_name, t._family FROM ((img_pfam p JOIN envogenomes_ba e ON (((e.taxon_oid)::bigint = p.taxon_oid))) JOIN img_taxonomy t ON (((t.taxon_oid)::bigint = p.taxon_oid))) WHERE ((e.envolite = 'marine habitat'::text) AND ((p.evalue)::numeric < 0.0000000001)) GROUP BY p.pfam_name, t._family EXCEPT SELECT p.pfam_name, t._family FROM ((img_pfam p JOIN envogenomes_ba e ON (((e.taxon_oid)::bigint = p.taxon_oid))) JOIN img_taxonomy t ON (((t.taxon_oid)::bigint = p.taxon_oid))) WHERE ((e.envolite <> 'marine habitat'::text) AND ((p.evalue)::numeric < 0.0000000001)) GROUP BY p.pfam_name, t._family ORDER BY 2, 1 DESC;


ALTER TABLE stage_r8.masu_marfam_pfam OWNER TO pbuttigi;

--
-- Name: VIEW masu_marfam_pfam; Type: COMMENT; Schema: stage_r8; Owner: pbuttigi
--

COMMENT ON VIEW masu_marfam_pfam IS 'List of Pfams (img_pfam) found exclusively in marine instances of taxonomic Families (img_taxonomy) ';


--
-- Name: michi_genomes; Type: TABLE; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

CREATE TABLE michi_genomes (
    _depth_renzo text DEFAULT ''::text,
    _iso_citation text DEFAULT ''::text,
    _verb_coord_renzo text DEFAULT ''::text,
    _tags text DEFAULT ''::text,
    _sub_envo text DEFAULT ''::text,
    _michi_change text DEFAULT ''::text,
    _site_name text DEFAULT ''::text,
    _lat text DEFAULT ''::text,
    _lon text DEFAULT ''::text,
    _date_taken text DEFAULT ''::text,
    _date_res text DEFAULT ''::text,
    _sample_name text DEFAULT ''::text,
    _material text DEFAULT ''::text,
    _envo_lite text DEFAULT ''::text,
    _country text DEFAULT ''::text,
    _isolate_name text DEFAULT ''::text,
    _taxid text DEFAULT ''::text,
    _genus_cur text DEFAULT ''::text,
    _species_cur text DEFAULT ''::text,
    _strain_cur text DEFAULT ''::text,
    _type_strain_cur text DEFAULT ''::text,
    _dsmz text DEFAULT ''::text,
    _atcc text DEFAULT ''::text,
    _culture_collection_label text DEFAULT ''::text,
    _descr_short text DEFAULT ''::text,
    _abstract text DEFAULT ''::text,
    _gpid_cur text DEFAULT ''::text,
    _resequencing text DEFAULT ''::text,
    _status text DEFAULT ''::text,
    _array_to_string text DEFAULT ''::text,
    _organism_name text DEFAULT ''::text,
    _genus text DEFAULT ''::text,
    _species text DEFAULT ''::text,
    _strain text DEFAULT ''::text,
    _type_strain text DEFAULT ''::text,
    _common_name text DEFAULT ''::text,
    _ncbi_taxon_id text DEFAULT ''::text,
    _classification text DEFAULT ''::text,
    _isolation_site text DEFAULT ''::text,
    _isolation_source text DEFAULT ''::text,
    _isolation_comments text DEFAULT ''::text,
    _collection_date text DEFAULT ''::text,
    _isolation_country text DEFAULT ''::text,
    _isolation_pubmed_id text DEFAULT ''::text,
    _geographic_location text DEFAULT ''::text,
    _latitude text DEFAULT ''::text,
    _longitude text DEFAULT ''::text,
    _altitude text DEFAULT ''::text,
    _sampling_depth text DEFAULT ''::text,
    _oxygen_requirement text DEFAULT ''::text,
    _cell_shape text DEFAULT ''::text,
    _sporulation text DEFAULT ''::text,
    _pressure text DEFAULT ''::text,
    _temperature_range text DEFAULT ''::text,
    _salinity text DEFAULT ''::text,
    _ph text DEFAULT ''::text,
    _cell_diameter text DEFAULT ''::text,
    _cell_length text DEFAULT ''::text,
    _color text DEFAULT ''::text,
    _gram_staining text DEFAULT ''::text,
    _habitat text DEFAULT ''::text,
    _temperature text DEFAULT ''::text,
    _metabolism text DEFAULT ''::text,
    _motility text DEFAULT ''::text,
    _phenotype text DEFAULT ''::text,
    _energy_source text DEFAULT ''::text,
    _serovar_biovar text DEFAULT ''::text,
    _ncbi_project_name text DEFAULT ''::text,
    _culture_collection text DEFAULT ''::text,
    _goldstamp text DEFAULT ''::text,
    _project_type text DEFAULT ''::text,
    _project_status text DEFAULT ''::text,
    _availability text DEFAULT ''::text,
    _sequencing_centers text DEFAULT ''::text,
    _funding text DEFAULT ''::text,
    _contact_name text DEFAULT ''::text,
    _contact_email text DEFAULT ''::text,
    _contact_url text DEFAULT ''::text,
    _locus_tag text DEFAULT ''::text,
    _completion_date text DEFAULT ''::text,
    _publication text DEFAULT ''::text,
    _project_relevance text DEFAULT ''::text,
    _ncbi_project_id text DEFAULT ''::text,
    _ncbi_archive_id text DEFAULT ''::text,
    _short_reads_archive_id text DEFAULT ''::text,
    _hmp_id text DEFAULT ''::text,
    _homd_id text DEFAULT ''::text,
    _straininfo_id text DEFAULT ''::text,
    _genome_data text DEFAULT ''::text,
    _sequencing_status text DEFAULT ''::text,
    _sequencing_quality text DEFAULT ''::text,
    _comments text DEFAULT ''::text,
    _library_method text DEFAULT ''::text,
    _reads_count text DEFAULT ''::text,
    _vector text DEFAULT ''::text,
    _assembly_method text DEFAULT ''::text,
    _sequencing_depth text DEFAULT ''::text,
    _gene_calling_method text DEFAULT ''::text,
    _contig_count text DEFAULT ''::text,
    _size text DEFAULT ''::text,
    _orfs text DEFAULT ''::text,
    _chromosome_count text DEFAULT ''::text,
    _plasmid_count text DEFAULT ''::text,
    _gc_content text DEFAULT ''::text,
    _sequencing_method text DEFAULT ''::text,
    _sequencing_country text DEFAULT ''::text,
    _host_name text DEFAULT ''::text,
    _host_taxon_id text DEFAULT ''::text,
    _host_gender text DEFAULT ''::text,
    _host_age text DEFAULT ''::text,
    _host_race text DEFAULT ''::text,
    _host_health text DEFAULT ''::text,
    _host_medication text DEFAULT ''::text,
    _host_specificity text DEFAULT ''::text,
    _body_sample_site text DEFAULT ''::text,
    _body_product text DEFAULT ''::text,
    _body_sample_subsite text DEFAULT ''::text,
    _host_comments text DEFAULT ''::text,
    _biotic_relationships text DEFAULT ''::text,
    _symbiotic_interaction text DEFAULT ''::text,
    _symbiotic_relationship text DEFAULT ''::text,
    _symbiont_name text DEFAULT ''::text,
    _symbiont_taxon_id text DEFAULT ''::text,
    _cell_arrangement text DEFAULT ''::text,
    _disease text DEFAULT ''::text
);


ALTER TABLE stage_r8.michi_genomes OWNER TO rkottman;

--
-- Name: taxonomy_by_envolite; Type: VIEW; Schema: stage_r8; Owner: kbseah
--

CREATE VIEW taxonomy_by_envolite AS
    SELECT t._domain, t.phylum, t._class, t._order, t._family, t.genus, ((t.genus || ' '::text) || t.species) AS fullspecies, ((((t.genus || ' '::text) || t.species) || ' '::text) || t.strain) AS fullstrain, e.envolite FROM (img_taxonomy t JOIN envogenomes_trim2 e ON (((t.taxon_oid)::bigint = (e.taxon_oid)::bigint)));


ALTER TABLE stage_r8.taxonomy_by_envolite OWNER TO kbseah;

--
-- Name: VIEW taxonomy_by_envolite; Type: COMMENT; Schema: stage_r8; Owner: kbseah
--

COMMENT ON VIEW taxonomy_by_envolite IS 'creates list of Bacteria and Archaea with envolite annotations, giving their taxonomic hierarchy (including strain names), from img_taxonomy and envogenomes_trim2.';


--
-- Name: tpommier_ip; Type: TABLE; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

CREATE TABLE tpommier_ip (
    dataset text NOT NULL,
    _date date NOT NULL,
    depth double precision NOT NULL,
    latitude double precision NOT NULL,
    longitude double precision NOT NULL
);


ALTER TABLE stage_r8.tpommier_ip OWNER TO rkottman;

--
-- Name: unique_ko_envolite; Type: VIEW; Schema: stage_r8; Owner: kbseah
--

CREATE VIEW unique_ko_envolite AS
    SELECT slicer.ko_id, img_ko.ko_name FROM ((SELECT koby1envo.ko_id FROM (SELECT k.ko_id FROM (img_ko k JOIN envogenomes_trim2 e ON (((e.taxon_oid)::bigint = k.taxon_oid))) WHERE (e.envolite = 'marine habitat'::text) GROUP BY k.ko_id) koby1envo EXCEPT SELECT k.ko_id FROM (img_ko k JOIN envogenomes_trim2 e ON (((e.taxon_oid)::bigint = k.taxon_oid))) WHERE (e.envolite <> 'marine habitat'::text) GROUP BY k.ko_id) slicer JOIN img_ko USING (ko_id)) GROUP BY slicer.ko_id, img_ko.ko_name ORDER BY slicer.ko_id;


ALTER TABLE stage_r8.unique_ko_envolite OWNER TO kbseah;

--
-- Name: VIEW unique_ko_envolite; Type: COMMENT; Schema: stage_r8; Owner: kbseah
--

COMMENT ON VIEW unique_ko_envolite IS 'looks for ko_id which are unique to a given envolite category (here ''marine habitat'')';


--
-- Name: unique_pfam_envolite; Type: VIEW; Schema: stage_r8; Owner: kbseah
--

CREATE VIEW unique_pfam_envolite AS
    SELECT slicer.pfam_id, img_pfam.pfam_name FROM ((SELECT marinetab.pfam_id FROM (SELECT p.pfam_id FROM (img_pfam p JOIN envogenomes_trim2 e ON (((e.taxon_oid)::bigint = p.taxon_oid))) WHERE (e.envolite = 'marine habitat'::text) GROUP BY p.pfam_id) marinetab EXCEPT SELECT p.pfam_id FROM (img_pfam p JOIN envogenomes_trim2 e ON (((e.taxon_oid)::bigint = p.taxon_oid))) WHERE (e.envolite <> 'marine habitat'::text) GROUP BY p.pfam_id) slicer JOIN img_pfam USING (pfam_id)) GROUP BY slicer.pfam_id, img_pfam.pfam_name ORDER BY slicer.pfam_id;


ALTER TABLE stage_r8.unique_pfam_envolite OWNER TO kbseah;

--
-- Name: VIEW unique_pfam_envolite; Type: COMMENT; Schema: stage_r8; Owner: kbseah
--

COMMENT ON VIEW unique_pfam_envolite IS 'looks for pfam_id which are unique to a given envolite category (here ''marine habitat''), from the tables img_pfam and envogenomes_trim2, and returns pfam_id and pfam_name';


--
-- Name: unique_taxon_envolite; Type: VIEW; Schema: stage_r8; Owner: kbseah
--

CREATE VIEW unique_taxon_envolite AS
    SELECT marine_genera.genus FROM (SELECT img_taxonomy.genus FROM (img_taxonomy JOIN envogenomes_trim2 ON (((img_taxonomy.taxon_oid)::bigint = (envogenomes_trim2.taxon_oid)::bigint))) WHERE (envogenomes_trim2.envolite = 'marine habitat'::text) GROUP BY img_taxonomy.genus) marine_genera EXCEPT SELECT img_taxonomy.genus FROM (img_taxonomy JOIN envogenomes_trim2 ON (((img_taxonomy.taxon_oid)::bigint = (envogenomes_trim2.taxon_oid)::bigint))) WHERE (envogenomes_trim2.envolite <> 'marine habitat'::text) GROUP BY img_taxonomy.genus ORDER BY 1;


ALTER TABLE stage_r8.unique_taxon_envolite OWNER TO kbseah;

--
-- Name: VIEW unique_taxon_envolite; Type: COMMENT; Schema: stage_r8; Owner: kbseah
--

COMMENT ON VIEW unique_taxon_envolite IS 'generates a list of taxa (here at level ''genus'') that are only found with a certain envolite category (here ''marine habitat'')';


--
-- Name: unique_taxon_envolite2; Type: VIEW; Schema: stage_r8; Owner: kbseah
--

CREATE VIEW unique_taxon_envolite2 AS
    SELECT combii._family, combii.env FROM ((SELECT t._family, e.envolite AS env FROM (img_taxonomy t JOIN envogenomes_trim2 e USING (taxon_oid)) GROUP BY t._family, e.envolite) combii JOIN (SELECT ccombi._family FROM (SELECT combi._family, count(combi.env) AS countt FROM (SELECT t._family, e.envolite AS env FROM (img_taxonomy t JOIN envogenomes_trim2 e USING (taxon_oid)) GROUP BY t._family, e.envolite ORDER BY t._family) combi GROUP BY combi._family) ccombi WHERE (ccombi.countt = 1) GROUP BY ccombi._family) cccombi USING (_family)) GROUP BY combii._family, combii.env ORDER BY combii.env;


ALTER TABLE stage_r8.unique_taxon_envolite2 OWNER TO kbseah;

--
-- Name: VIEW unique_taxon_envolite2; Type: COMMENT; Schema: stage_r8; Owner: kbseah
--

COMMENT ON VIEW unique_taxon_envolite2 IS 'improvement on unique_taxon_envolite. generates a list of taxa (here at level ''_family'') that are found only in a single envolite category, for all the envolite categories.';


--
-- Name: viral_metagenomes; Type: TABLE; Schema: stage_r8; Owner: mduhaime; Tablespace: 
--

CREATE TABLE viral_metagenomes (
    metagenome_name text NOT NULL
);


ALTER TABLE stage_r8.viral_metagenomes OWNER TO mduhaime;

--
-- Name: whale_falls; Type: TABLE; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

CREATE TABLE whale_falls (
    location_name text,
    lat text NOT NULL,
    lon text NOT NULL,
    _depth text NOT NULL,
    natural_implanted text,
    whale_species text,
    estimated_wet_weight text,
    size_m text,
    osedax text,
    remark text
);


ALTER TABLE stage_r8.whale_falls OWNER TO rkottman;

SET search_path = web, pg_catalog;

--
-- Name: blast_genomes; Type: VIEW; Schema: web; Owner: ikostadi
--

CREATE VIEW blast_genomes AS
    SELECT t.sid, t.jid, t.id, t.hit, t.hsp, t.descr, t.h_length, t.evalue, t.gi AS acc, t.bit_score, t.q_from, t.q_to, t.h_from, t.h_to, t.q_frame, t.h_frame, t.ident, t.pos, t.a_length, i.label AS locdesc, s.date_taken, s.hab_lite, core.encode_uri(s.hab_lite) AS hab_uri, CASE WHEN (core.pp_geom(s.old_geom) = ''::text) THEN '-'::text ELSE core.pp_geom(s.old_geom) END AS latlon, s.old_geom AS geom, (SELECT (((sm.vals[1])::text || ' '::text) || sm.unit) AS vals FROM core.sample_measures sm WHERE ((sm.param = 'depth'::text) AND (sm.sid = s.sid))) AS depth, (SELECT (((sm.vals[1])::text || ' '::text) || sm.unit) AS vals FROM core.sample_measures sm WHERE ((sm.param = 'temperature'::text) AND (sm.sid = s.sid))) AS temperature FROM (((((SELECT g.sid, g.jid, g.id, g.hit, g.hsp, g.hit_def AS descr, g.h_length, g.evalue, CASE WHEN (split_part(g.hit_id, '|'::text, 2) <> ''::text) THEN (split_part(g.hit_id, '|'::text, 2))::bigint ELSE (- (1)::bigint) END AS gi, g.bit_score, g.q_from, g.q_to, g.h_from, g.h_to, g.q_frame, g.h_frame, g.ident, g.pos, g.a_length FROM core.blast_hits g WHERE (g.db = 'genomes'::text)) t JOIN core.dna_regions dr ON ((t.gi = dr.gi))) JOIN core.genome_dnas ds ON ((dr.msid = ds.msid))) JOIN core.isolates i ON ((ds.isolate_id = i.id))) JOIN core.samples s ON ((i.sid = s.sid)));


ALTER TABLE web.blast_genomes OWNER TO ikostadi;

--
-- Name: blast_gos; Type: VIEW; Schema: web; Owner: ikostadi
--

CREATE VIEW blast_gos AS
    SELECT t.sid, t.jid, t.id, t.hit, t.hsp, ('GOS read '::text || t.hit_acc) AS descr, t.hit_acc AS acc, t.h_length, t.evalue, t.bit_score, t.q_from, t.q_to, t.h_from, t.h_to, t.q_frame, t.h_frame, t.ident, t.pos, t.a_length, ('GOS read '::text || t.hit_acc) AS locdesc, core.pp_geom(s.old_geom) AS latlon, s.old_geom AS geom, s.hab_lite, mgd.sample_name, (SELECT (((sm.vals[1])::text || ' '::text) || sm.unit) AS vals FROM core.sample_measures sm WHERE ((sm.param = 'depth'::text) AND (sm.sid = s.sid))) AS depth, (SELECT (((sm.vals[1])::text || ' '::text) || sm.unit) AS vals FROM core.sample_measures sm WHERE ((sm.param = 'temperature'::text) AND (sm.sid = s.sid))) AS temperature FROM ((core.blast_hits t JOIN core.mg_dnas mgd ON ((mgd.did = t.hit_acc))) JOIN core.samples s ON ((s.label = mgd.sample_name))) WHERE (t.db = 'gos'::text);


ALTER TABLE web.blast_gos OWNER TO ikostadi;

--
-- Name: silva; Type: TABLE; Schema: web; Owner: ikostadi; Tablespace: 
--

CREATE TABLE silva (
    primaryaccession text NOT NULL,
    latlong text,
    geom public.geometry
);


ALTER TABLE web.silva OWNER TO ikostadi;

--
-- Name: TABLE silva; Type: COMMENT; Schema: web; Owner: ikostadi
--

COMMENT ON TABLE silva IS 'for geoblast; extracted only the three columns from both ssu amd lsu rel. 100';


--
-- Name: silva_100_dnas; Type: TABLE; Schema: web; Owner: rkottman; Tablespace: 
--

CREATE TABLE silva_100_dnas (
    primaryaccession text NOT NULL,
    l integer NOT NULL,
    r integer NOT NULL,
    geom public.geometry,
    latlong text,
    rna_type "char",
    alternativename text,
    biomaterial text,
    clone text,
    clonelib text,
    collectiondate text,
    collector text,
    country text,
    crc text,
    culturecollection text,
    dataclass text,
    datasource text,
    dateimported timestamp without time zone,
    datemodified date,
    datesubmitted date,
    depth text,
    description text,
    division text,
    envsample text,
    haplotype text,
    habitat text,
    identifiedby text,
    insdc bigint,
    isolate text,
    isolationsource text,
    keywords text,
    labhost text,
    moleculartype text,
    nameshist text,
    organelle text,
    organismname text,
    pcrprimers text,
    plasmidname text,
    refs text,
    sequencelength bigint,
    sequenceversion smallint,
    specifichost text,
    specimenvoucher text,
    strain text,
    strainid bigint,
    subspecies text,
    taxonomy text,
    sid integer NOT NULL
);


ALTER TABLE web.silva_100_dnas OWNER TO rkottman;

--
-- Name: COLUMN silva_100_dnas.sid; Type: COMMENT; Schema: web; Owner: rkottman
--

COMMENT ON COLUMN silva_100_dnas.sid IS 'artificial key just for clickable map layer';


--
-- Name: blast_silva; Type: VIEW; Schema: web; Owner: ikostadi
--

CREATE VIEW blast_silva AS
    SELECT t.sid, t.jid, t.id, t.hit, t.hsp, t.descr, t.h_length, t.evalue, t.g[1] AS acc, (t.g[2])::bigint AS start, (t.g[3])::bigint AS stop, t.bit_score, t.q_from, t.q_to, t.h_from, t.h_to, t.q_frame, t.h_frame, t.ident, t.pos, t.a_length, t.descr AS locdesc, CASE WHEN (i.latlong = ''::text) THEN '-'::text ELSE i.latlong END AS latlon, i.geom, public.st_x(i.geom) AS lon, public.st_y(i.geom) AS lat, d.depth FROM (((SELECT regexp_matches(b.hit_acc, '([A-Z]+[0-9]+)\.([0-9]+)\.([0-9]+)'::text) AS g, ltrim(b.hit_def, ' | '::text) AS descr, b.sid, b.jid, b.id, b.db, b.hit, b.hit_id, b.hit_def, b.hit_acc, b.hsp, b.h_length, b.evalue, b.bit_score, b.q_from, b.q_to, b.h_from, b.h_to, b.q_frame, b.h_frame, b.ident, b.pos, b.a_length FROM core.blast_hits b WHERE (b.db ~~ 'silva%'::text)) t JOIN silva i ON ((i.primaryaccession = t.g[1]))) LEFT JOIN silva_100_dnas d ON ((d.primaryaccession = i.primaryaccession)));


ALTER TABLE web.blast_silva OWNER TO ikostadi;

--
-- Name: genomes; Type: VIEW; Schema: web; Owner: ikostadi
--

CREATE VIEW genomes AS
    SELECT i.label, CASE WHEN (i.taxid IS NULL) THEN '-'::text ELSE (i.taxid)::text END AS taxid, CASE WHEN (i.gpid IS NULL) THEN '-'::text ELSE (i.gpid)::text END AS gpid, CASE WHEN (s.hab_lite = ''::text) THEN 'unclassified'::text ELSE s.hab_lite END AS hab_lite, CASE WHEN (s.date_taken = 'infinity'::timestamp with time zone) THEN '-'::text ELSE (s.date_taken)::text END AS date_taken, core.pp_geom(s.old_geom) AS location, public.st_y(s.old_geom) AS lat, public.st_x(s.old_geom) AS lon, s.label AS sample_label FROM (core.isolates i JOIN core.samples s ON ((s.sid = i.sid)));


ALTER TABLE web.genomes OWNER TO ikostadi;

--
-- Name: VIEW genomes; Type: COMMENT; Schema: web; Owner: ikostadi
--

COMMENT ON VIEW genomes IS 'web view on genomes; mainly used by www.megx.net/genomes;should be extended to cover more details';


--
-- Name: idgen; Type: SEQUENCE; Schema: web; Owner: rkottman
--

CREATE SEQUENCE idgen
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 200
    CYCLE;


ALTER TABLE web.idgen OWNER TO rkottman;

--
-- Name: silva_100_dnas_sid_seq; Type: SEQUENCE; Schema: web; Owner: rkottman
--

CREATE SEQUENCE silva_100_dnas_sid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE web.silva_100_dnas_sid_seq OWNER TO rkottman;

--
-- Name: silva_100_dnas_sid_seq; Type: SEQUENCE OWNED BY; Schema: web; Owner: rkottman
--

ALTER SEQUENCE silva_100_dnas_sid_seq OWNED BY silva_100_dnas.sid;


--
-- Name: silva_100_samples; Type: TABLE; Schema: web; Owner: rkottman; Tablespace: 
--

CREATE TABLE silva_100_samples (
    old_geom public.geometry,
    label text,
    locdesc text,
    locshortdesc text,
    hab_lite text,
    hab_uri text,
    datum text,
    dat_res text,
    lat double precision,
    lon double precision,
    pangaea_url text,
    sample_type text,
    sid integer NOT NULL,
    geom public.geometry,
    CONSTRAINT enforce_dims_geom CHECK ((public.st_ndims(geom) = 2)),
    CONSTRAINT enforce_geotype_geom CHECK (((public.geometrytype(geom) = 'POINT'::text) OR (geom IS NULL))),
    CONSTRAINT enforce_srid_geom CHECK ((public.st_srid(geom) = 4326))
);


ALTER TABLE web.silva_100_samples OWNER TO rkottman;

--
-- Name: silva_100_samples_sid_seq; Type: SEQUENCE; Schema: web; Owner: rkottman
--

CREATE SEQUENCE silva_100_samples_sid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE web.silva_100_samples_sid_seq OWNER TO rkottman;

--
-- Name: silva_100_samples_sid_seq; Type: SEQUENCE OWNED BY; Schema: web; Owner: rkottman
--

ALTER SEQUENCE silva_100_samples_sid_seq OWNED BY silva_100_samples.sid;


SET search_path = web_r8, pg_catalog;

--
-- Name: blast_job_details; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW blast_job_details AS
    SELECT br.sid, (br.jid)::text AS jid, (br.time_submitted)::text AS time_submitted, (br.time_finished)::text AS time_finished, br.tool_ver, br.program_name, br.db, core.pp_evalue(br.evalue) AS evalue, core.blast_run_status(br.sid, br.jid) AS status, CASE WHEN (core.blast_run_status(br.sid, br.jid) = 'finished'::text) THEN ((br.time_finished - br.time_submitted))::text ELSE 'NA'::text END AS duration, (SELECT count(*) AS count FROM core.blast_hits bh WHERE ((br.sid = bh.sid) AND (br.jid = bh.jid))) AS num_hits FROM core.blast_run br;


ALTER TABLE web_r8.blast_job_details OWNER TO ikostadi;

--
-- Name: genomes; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW genomes AS
    SELECT s.sid, s.geom, COALESCE(sites.label, 'NA'::text) AS site_name, (public.st_y(s.geom))::text AS lat, (public.st_x(s.geom))::text AS lon, core.pp_geom(s.geom) AS latlon, core.pp_depth(s.sid) AS depth, CASE WHEN (s.date_taken = 'infinity'::timestamp without time zone) THEN 'NA'::text ELSE (s.date_taken)::text END AS date_taken, CASE WHEN (s.hab_lite = ''::text) THEN 'unclassified'::text ELSE s.hab_lite END AS hab_lite, core.encode_uri(s.hab_lite) AS hab_uri, s.study AS study_type, i.label AS entity_name, ''::text AS entity_url, ''::text AS entity_country, ''::text AS entity_iho, ''::text AS entity_region, ''::text AS entity_descr, core.pp_temperature(s.sid) AS temperature, core.pp_salinity(s.sid) AS salinity, core.pp_oxygen(s.sid) AS oxygen, core.pp_chlorophyll(s.sid) AS chlorophyll, CASE WHEN (i.taxid IS NULL) THEN 'NA'::text ELSE (i.taxid)::text END AS taxid, CASE WHEN (i.gpid IS NULL) THEN 'NA'::text ELSE (i.gpid)::text END AS gpid FROM ((core.isolates i JOIN core.samples s ON ((s.sid = i.sid))) LEFT JOIN core.samplingsites sites ON (((s.geom OPERATOR(public.=) sites.geom) AND (s.max_uncertain = sites.max_uncertain))));


ALTER TABLE web_r8.genomes OWNER TO ikostadi;

--
-- Name: VIEW genomes; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON VIEW genomes IS 'web view on genomes; mainly used by www.megx.net/genomes;should be extended to cover more details';


--
-- Name: marine_phages; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW marine_phages AS
    SELECT marine_phages.id, marine_phages.geom, CASE WHEN (marine_phages.location_name = ''::text) THEN 'NA'::text ELSE marine_phages.location_name END AS site_name, (public.st_y(marine_phages.geom))::text AS lat, (public.st_x(marine_phages.geom))::text AS lon, core.pp_geom(marine_phages.geom) AS latlon, CASE WHEN (marine_phages.depth = 'NaN'::numeric) THEN 'NA'::text ELSE ((marine_phages.depth)::text || ' m'::text) END AS depth, CASE WHEN (marine_phages.date_sampled = ''::text) THEN 'NA'::text ELSE marine_phages.date_sampled END AS date_taken, marine_phages.habitatdesc AS hab_lite, core.encode_uri(marine_phages.habitatdesc) AS hab_uri, 'phage'::text AS study_type, marine_phages.ncbi_org AS entity_name, ''::text AS entity_url, ''::text AS entity_country, ''::text AS entity_iho, ''::text AS entity_region, ''::text AS entity_descr, core.pp_temperature(marine_phages.id) AS temperature, core.pp_salinity(marine_phages.id) AS salinity, core.pp_oxygen(marine_phages.id) AS oxygen, core.pp_chlorophyll(marine_phages.id) AS chlorophyll, marine_phages.embl_accn, marine_phages.gbk_def, CASE WHEN (marine_phages.phg_taxid = ''::text) THEN 'NA'::text ELSE marine_phages.phg_taxid END AS phg_taxid, marine_phages.phg_order, marine_phages.phg_family_ncbi, marine_phages.phg_family_expert, marine_phages.original_host, marine_phages.host_taxid, marine_phages.host_domain, marine_phages.host_phylum, marine_phages.host_class, marine_phages.host_order, marine_phages.host_family, marine_phages.host_genus, marine_phages.host_species, marine_phages.host_subsp, CASE WHEN (marine_phages.phg_gprj_id = ''::text) THEN 'NA'::text ELSE marine_phages.phg_gprj_id END AS phg_gprj_id FROM stage_r8.marine_phages;


ALTER TABLE web_r8.marine_phages OWNER TO ikostadi;

--
-- Name: VIEW marine_phages; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON VIEW marine_phages IS 'Web view on metagenomes; mainly used by www.megx.net/metagenomes';


--
-- Name: metagenomes; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW metagenomes AS
    SELECT s.sid, s.geom, sites.label AS site_name, (public.st_y(s.geom))::text AS lat, (public.st_x(s.geom))::text AS lon, core.pp_geom(s.geom) AS latlon, core.pp_depth(s.sid) AS depth, CASE WHEN (s.date_taken = 'infinity'::timestamp with time zone) THEN 'NA'::text ELSE (s.date_taken)::text END AS date_taken, CASE WHEN (s.hab_lite = ''::text) THEN 'unclassified'::text ELSE s.hab_lite END AS hab_lite, core.encode_uri(s.hab_lite) AS hab_uri, 'metagenome'::text AS study_type, s.label AS entity_name, ''::text AS entity_url, ''::text AS entity_country, ''::text AS entity_iho, ''::text AS entity_region, ''::text AS entity_descr, core.pp_temperature(s.sid) AS temperature, core.pp_salinity(s.sid) AS salinity, core.pp_oxygen(s.sid) AS oxygen, core.pp_chlorophyll(s.sid) AS chlorophyll FROM (core.samples s LEFT JOIN core.samplingsites sites ON (((s.geom OPERATOR(public.=) sites.geom) AND (s.max_uncertain = sites.max_uncertain)))) WHERE (s.study = 'gos'::text);


ALTER TABLE web_r8.metagenomes OWNER TO ikostadi;

--
-- Name: VIEW metagenomes; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON VIEW metagenomes IS 'Web view on metagenomes; mainly used by www.megx.net/metagenomes';


--
-- Name: silva; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW silva AS
    SELECT silva_100_samples.sid, silva_100_samples.geom, CASE WHEN (silva_100_samples.label = ''::text) THEN 'unnamed'::text ELSE silva_100_samples.label END AS site_name, (silva_100_samples.lat)::text AS lat, (silva_100_samples.lon)::text AS lon, core.pp_geom(silva_100_samples.geom) AS latlon, core.pp_depth(silva_100_samples.sid) AS depth, CASE WHEN (silva_100_samples.datum = '-'::text) THEN 'NA'::text ELSE silva_100_samples.datum END AS date_taken, silva_100_samples.hab_lite, silva_100_samples.hab_uri, silva_100_samples.sample_type AS study_type, 'rRNA sample'::text AS entity_name, ''::text AS entity_url, ''::text AS entity_country, ''::text AS entity_iho, ''::text AS entity_region, ''::text AS entity_descr, core.pp_temperature(silva_100_samples.sid) AS temperature, core.pp_salinity(silva_100_samples.sid) AS salinity, core.pp_oxygen(silva_100_samples.sid) AS oxygen, core.pp_chlorophyll(silva_100_samples.sid) AS chlorophyll FROM web.silva_100_samples;


ALTER TABLE web_r8.silva OWNER TO ikostadi;

--
-- Name: samples; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW samples AS
    ((SELECT g.sid, g.geom, g.site_name, g.lat, g.lon, g.latlon, g.depth, g.date_taken, g.hab_lite, g.hab_uri, g.study_type, g.entity_name, g.entity_url, g.entity_country, g.entity_iho, g.entity_region, g.entity_descr, g.temperature, g.salinity, g.oxygen, g.chlorophyll FROM genomes g UNION SELECT silva.sid, silva.geom, silva.site_name, silva.lat, silva.lon, silva.latlon, silva.depth, silva.date_taken, silva.hab_lite, silva.hab_uri, silva.study_type, silva.entity_name, silva.entity_url, silva.entity_country, silva.entity_iho, silva.entity_region, silva.entity_descr, silva.temperature, silva.salinity, silva.oxygen, silva.chlorophyll FROM silva) UNION SELECT marine_phages.id AS sid, marine_phages.geom, marine_phages.site_name, marine_phages.lat, marine_phages.lon, marine_phages.latlon, marine_phages.depth, marine_phages.date_taken, marine_phages.hab_lite, marine_phages.hab_uri, marine_phages.study_type, marine_phages.entity_name, marine_phages.entity_url, marine_phages.entity_country, marine_phages.entity_iho, marine_phages.entity_region, marine_phages.entity_descr, marine_phages.temperature, marine_phages.salinity, marine_phages.oxygen, marine_phages.chlorophyll FROM marine_phages) UNION SELECT metagenomes.sid, metagenomes.geom, metagenomes.site_name, metagenomes.lat, metagenomes.lon, metagenomes.latlon, metagenomes.depth, metagenomes.date_taken, metagenomes.hab_lite, metagenomes.hab_uri, metagenomes.study_type, metagenomes.entity_name, metagenomes.entity_url, metagenomes.entity_country, metagenomes.entity_iho, metagenomes.entity_region, metagenomes.entity_descr, metagenomes.temperature, metagenomes.salinity, metagenomes.oxygen, metagenomes.chlorophyll FROM metagenomes;


ALTER TABLE web_r8.samples OWNER TO ikostadi;

--
-- Name: gms_samples; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW gms_samples AS
    SELECT samples.sid, samples.geom, samples.site_name, samples.lat, samples.lon, samples.latlon, samples.depth, samples.date_taken, samples.hab_lite, samples.hab_uri, samples.study_type, samples.entity_name, samples.entity_url, samples.entity_country, samples.entity_iho, samples.entity_region, samples.entity_descr, samples.temperature, samples.salinity, samples.oxygen, samples.chlorophyll, core.pangaea_url(samples.geom) AS pangaea_url FROM samples WHERE (samples.geom IS NOT NULL);


ALTER TABLE web_r8.gms_samples OWNER TO ikostadi;

--
-- Name: longhurst_regions; Type: VIEW; Schema: web_r8; Owner: rkottman
--

CREATE VIEW longhurst_regions AS
    SELECT l.gid, l.provcode, l.provdescr, l.x, l.y, l.area_m2, l.geom, l.book_pages, l.synopsis, l.extent_descr, l.remark, lstat.num_sam, ((lstat.num_sam)::numeric / l.area_m2) FROM elayers.longhurst_regions l, (SELECT lr.provcode AS pcode, count(lr.*) AS num_sam FROM core.samplingsites s, elayers.longhurst_regions lr WHERE public.st_within(public.st_setsrid(s.old_geom, 4326), lr.geom) GROUP BY lr.provcode) lstat WHERE ((lstat.pcode)::text = (l.provcode)::text);


ALTER TABLE web_r8.longhurst_regions OWNER TO rkottman;

--
-- Name: silva_102_regions; Type: TABLE; Schema: web_r8; Owner: ikostadi; Tablespace: 
--

CREATE TABLE silva_102_regions (
    primaryaccession text NOT NULL,
    l bigint NOT NULL,
    r bigint NOT NULL,
    geom public.geometry,
    latlong text,
    rna_type character varying(1) NOT NULL,
    alternativename text,
    biomaterial text,
    clone text,
    clonelib text,
    collectiondate text,
    collector text,
    country text,
    crc text,
    culturecollection text,
    dataclass text,
    datasource text,
    dateimported timestamp without time zone,
    datemodified date,
    datesubmitted date,
    depth text,
    description text,
    division text,
    envsample text,
    haplotype text,
    habitat text,
    identifiedby text,
    insdc bigint,
    isolate text,
    isolationsource text,
    keywords text,
    labhost text,
    moleculartype text,
    nameshist text,
    organelle text,
    organismname text,
    pcrprimers text,
    plasmidname text,
    refs text,
    sequencelength bigint,
    sequenceversion smallint,
    specifichost text,
    specimenvoucher text,
    strain text,
    strainid bigint,
    subspecies text,
    taxonomy text,
    sid integer NOT NULL,
    sample_id bigint DEFAULT (-1)
);


ALTER TABLE web_r8.silva_102_regions OWNER TO ikostadi;

--
-- Name: COLUMN silva_102_regions.sid; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON COLUMN silva_102_regions.sid IS 'artificial key just for clickable map layer';


--
-- Name: COLUMN silva_102_regions.sample_id; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON COLUMN silva_102_regions.sample_id IS 'a logical but not technical foreign key to silva_102_samples';


--
-- Name: silva_102_regions_sid_seq; Type: SEQUENCE; Schema: web_r8; Owner: ikostadi
--

CREATE SEQUENCE silva_102_regions_sid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE web_r8.silva_102_regions_sid_seq OWNER TO ikostadi;

--
-- Name: silva_102_regions_sid_seq; Type: SEQUENCE OWNED BY; Schema: web_r8; Owner: ikostadi
--

ALTER SEQUENCE silva_102_regions_sid_seq OWNED BY silva_102_regions.sid;


--
-- Name: silva_102_regions_view; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW silva_102_regions_view AS
    SELECT r.primaryaccession, r.start AS l, r.stop AS r, core.parse_latlon(s.latlong) AS geom, s.latlong, r.rna_type, s.alternativename, s.biomaterial, s.clone, s.clonelib, upper(s.collectiondate) AS collectiondate, s.collector, s.country, s.crc, s.culturecollection, s.dataclass, s.datasource, s.dateimported, s.datemodified, s.datesubmitted, s.depth, s.description, s.division, s.envsample, s.haplotype, s.habitat, s.identifiedby, s.insdc, s.isolate, s.isolationsource, s.keywords, s.labhost, s.moleculartype, s.nameshist, s.organelle, s.organismname, s.pcrprimers, s.plasmidname, s.refs, s.sequencelength, s.sequenceversion, s.specifichost, s.specimenvoucher, s.strain, s.strainid, s.subspecies, s.taxonomy FROM ((SELECT sequenceentry.primaryaccession, sequenceentry.accessions, sequenceentry.alternativename, sequenceentry.biomaterial, sequenceentry.circular, sequenceentry.clone, sequenceentry.clonelib, sequenceentry.collectiondate, sequenceentry.collector, sequenceentry.country, sequenceentry.crc, sequenceentry.culturecollection, sequenceentry.dataclass, sequenceentry.datasource, sequenceentry.dateimported, sequenceentry.datemodified, sequenceentry.datesubmitted, sequenceentry.depth, sequenceentry.description, sequenceentry.division, sequenceentry.envsample, sequenceentry.filename, sequenceentry.flags, sequenceentry.haplotype, sequenceentry.habitat, sequenceentry.identifiedby, sequenceentry.insdc, sequenceentry.isolate, sequenceentry.isolationsource, sequenceentry.keywords, sequenceentry.labhost, sequenceentry.latlong, sequenceentry.moleculartype, sequenceentry.nameshist, sequenceentry.organelle, sequenceentry.organismname, sequenceentry.pcrprimers, sequenceentry.plasmidname, sequenceentry.refs, sequenceentry.sequence, sequenceentry.sequencelength, sequenceentry.sequenceversion, sequenceentry.specifichost, sequenceentry.specimenvoucher, sequenceentry.strain, sequenceentry.strainid, sequenceentry.subspecies, sequenceentry.taxonomy, 's'::character varying(1) AS rna_type FROM silva_r102_ssu.sequenceentry UNION SELECT sequenceentry.primaryaccession, sequenceentry.accessions, sequenceentry.alternativename, sequenceentry.biomaterial, sequenceentry.circular, sequenceentry.clone, sequenceentry.clonelib, sequenceentry.collectiondate, sequenceentry.collector, sequenceentry.country, sequenceentry.crc, sequenceentry.culturecollection, sequenceentry.dataclass, sequenceentry.datasource, sequenceentry.dateimported, sequenceentry.datemodified, sequenceentry.datesubmitted, sequenceentry.depth, sequenceentry.description, sequenceentry.division, sequenceentry.envsample, sequenceentry.filename, sequenceentry.flags, sequenceentry.haplotype, sequenceentry.habitat, sequenceentry.identifiedby, sequenceentry.insdc, sequenceentry.isolate, sequenceentry.isolationsource, sequenceentry.keywords, sequenceentry.labhost, sequenceentry.latlong, sequenceentry.moleculartype, sequenceentry.nameshist, sequenceentry.organelle, sequenceentry.organismname, sequenceentry.pcrprimers, sequenceentry.plasmidname, sequenceentry.refs, sequenceentry.sequence, sequenceentry.sequencelength, sequenceentry.sequenceversion, sequenceentry.specifichost, sequenceentry.specimenvoucher, sequenceentry.strain, sequenceentry.strainid, sequenceentry.subspecies, sequenceentry.taxonomy, 'l'::character varying(1) AS rna_type FROM silva_r102_lsu.sequenceentry) s JOIN (SELECT region.seqent_id, region.primaryaccession, region.start, region.stop, region.alignmentquality, region.bpscore, region.isref, region.regionlength, region.percentambiguity, region.percentrepetative, region.percentvector, region.product, region.quality, region.startflag, region.stopflag, region.percentaligned, region.pintailquality, 's'::character varying(1) AS rna_type FROM silva_r102_ssu.region UNION SELECT region.seqent_id, region.primaryaccession, region.start, region.stop, region.alignmentquality, region.bpscore, region.isref, region.regionlength, region.percentambiguity, region.percentrepetative, region.percentvector, region.product, region.quality, region.startflag, region.stopflag, region.percentaligned, region.pintailquality, 'l'::character varying(1) AS rna_type FROM silva_r102_lsu.region) r USING (primaryaccession, rna_type));


ALTER TABLE web_r8.silva_102_regions_view OWNER TO ikostadi;

--
-- Name: silva_102_samples; Type: TABLE; Schema: web_r8; Owner: ikostadi; Tablespace: 
--

CREATE TABLE silva_102_samples (
    geom public.geometry NOT NULL,
    label text,
    locdesc text,
    locshortdesc text,
    latlong text,
    lat text,
    lon text,
    pangaea_url text,
    ssu_acc text,
    lsu_acc text,
    ssu_count text,
    lsu_count text,
    depth text NOT NULL,
    datum timestamp with time zone NOT NULL,
    dat_res core.date_resolution NOT NULL,
    site_name text,
    hab_lite text,
    hab_uri text,
    num_seq text,
    sample_type text,
    sid integer NOT NULL,
    marine boolean
);


ALTER TABLE web_r8.silva_102_samples OWNER TO ikostadi;

--
-- Name: TABLE silva_102_samples; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON TABLE silva_102_samples IS 'all geo-referenced samples form silva r102';


--
-- Name: COLUMN silva_102_samples.sid; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON COLUMN silva_102_samples.sid IS 'artificial key just for clickable map layer';


--
-- Name: COLUMN silva_102_samples.marine; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON COLUMN silva_102_samples.marine IS 'added later for "performance"';


--
-- Name: silva_102_samples_sid_seq; Type: SEQUENCE; Schema: web_r8; Owner: ikostadi
--

CREATE SEQUENCE silva_102_samples_sid_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE web_r8.silva_102_samples_sid_seq OWNER TO ikostadi;

--
-- Name: silva_102_samples_sid_seq; Type: SEQUENCE OWNED BY; Schema: web_r8; Owner: ikostadi
--

ALTER SEQUENCE silva_102_samples_sid_seq OWNED BY silva_102_samples.sid;


--
-- Name: silva_102_samples_view; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW silva_102_samples_view AS
    SELECT f.geom, f.site AS label, f.site AS locdesc, f.site AS locshortdesc, core.pp_geom(f.geom) AS latlong, (public.st_y(f.geom))::text AS lat, (public.st_x(f.geom))::text AS lon, core.pangaea_url(f.geom) AS pangaea_url, array_to_string((SELECT array_agg(t.col) AS array_agg FROM (SELECT unnest(s.acclist) AS col GROUP BY unnest(s.acclist)) t), ','::text) AS ssu_acc, array_to_string((SELECT array_agg(t.col) AS array_agg FROM (SELECT unnest(l.acclist) AS col GROUP BY unnest(l.acclist)) t), ','::text) AS lsu_acc, (COALESCE(s.nseq, (0)::bigint))::text AS ssu_count, (COALESCE(l.nseq, (0)::bigint))::text AS lsu_count, CASE WHEN (f.depth = ''::text) THEN 'NA'::text ELSE f.depth END AS depth, (SELECT parse_silva_coldate.datum FROM parse_silva_coldate(f.collectiondate) parse_silva_coldate(datum, res)) AS datum, (SELECT parse_silva_coldate.res FROM parse_silva_coldate(f.collectiondate) parse_silva_coldate(datum, res)) AS dat_res, COALESCE(f.site, 'name not available'::text) AS site_name, COALESCE(f.habitat, 'unclassified'::text) AS hab_lite, COALESCE(f.habitat, 'unclassified'::text) AS hab_uri, (COALESCE(f.nseq, (0)::bigint))::text AS num_seq, 'rRNA'::text AS sample_type FROM (((SELECT silva_102_regions.geom, silva_102_regions.depth, silva_102_regions.collectiondate, CASE WHEN (max(silva_102_regions.isolationsource) = ''::text) THEN NULL::text ELSE max(silva_102_regions.isolationsource) END AS site, CASE WHEN (max(silva_102_regions.habitat) = ''::text) THEN NULL::text ELSE max(silva_102_regions.habitat) END AS habitat, count(*) AS nseq FROM silva_102_regions WHERE (silva_102_regions.geom IS NOT NULL) GROUP BY silva_102_regions.geom, silva_102_regions.depth, silva_102_regions.collectiondate) f LEFT JOIN (SELECT array_agg(silva_102_regions.primaryaccession) AS acclist, silva_102_regions.geom, silva_102_regions.depth, silva_102_regions.collectiondate, count(*) AS nseq FROM silva_102_regions WHERE ((silva_102_regions.geom IS NOT NULL) AND ((silva_102_regions.rna_type)::text = 'l'::text)) GROUP BY silva_102_regions.geom, silva_102_regions.depth, silva_102_regions.collectiondate) l ON ((((f.geom OPERATOR(public.=) l.geom) AND (f.depth = l.depth)) AND (f.collectiondate = l.collectiondate)))) LEFT JOIN (SELECT array_agg(silva_102_regions.primaryaccession) AS acclist, silva_102_regions.geom, silva_102_regions.depth, silva_102_regions.collectiondate, count(*) AS nseq FROM silva_102_regions WHERE ((silva_102_regions.geom IS NOT NULL) AND ((silva_102_regions.rna_type)::text = 's'::text)) GROUP BY silva_102_regions.geom, silva_102_regions.depth, silva_102_regions.collectiondate) s ON ((((s.geom OPERATOR(public.=) f.geom) AND (s.depth = f.depth)) AND (s.collectiondate = f.collectiondate))));


ALTER TABLE web_r8.silva_102_samples_view OWNER TO ikostadi;

--
-- Name: silva_overview; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW silva_overview AS
    SELECT silva_102_samples.latlong AS latlon, silva_102_samples.lat, silva_102_samples.lon, COALESCE(silva_102_samples.label, 'name not available'::text) AS site_name, silva_102_samples.depth, CASE WHEN (silva_102_samples.datum = 'infinity'::timestamp with time zone) THEN 'NA'::text ELSE to_char(silva_102_samples.datum, 'YYYY-MM-DD'::text) END AS date_taken, silva_102_samples.hab_lite, silva_102_samples.num_seq, silva_102_samples.ssu_count, silva_102_samples.ssu_acc, silva_102_samples.lsu_count, silva_102_samples.lsu_acc FROM silva_102_samples;


ALTER TABLE web_r8.silva_overview OWNER TO ikostadi;

--
-- Name: tags; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW tags AS
    SELECT tags.tag, tags.time_added, tags.tag_count FROM core.tags;


ALTER TABLE web_r8.tags OWNER TO ikostadi;

--
-- Name: tools; Type: VIEW; Schema: web_r8; Owner: rkottman
--

CREATE VIEW tools AS
    SELECT tools.label, tools.descr, tools.url, tools.cat, tools.remark FROM core.tools;


ALTER TABLE web_r8.tools OWNER TO rkottman;

--
-- Name: whale_falls; Type: VIEW; Schema: web_r8; Owner: rkottman
--

CREATE VIEW whale_falls AS
    SELECT whale_falls.location_name, whale_falls.lat, whale_falls.lon, whale_falls.depth, whale_falls.natural_implanted, whale_falls.whale_species, whale_falls.estimated_wet_weight, whale_falls.size_m, whale_falls.osedax, whale_falls.remark, whale_falls.geom, ((whale_falls.natural_implanted || '_'::text) || whale_falls.osedax) AS label_class FROM elayers.whale_falls;


ALTER TABLE web_r8.whale_falls OWNER TO rkottman;

--
-- Name: woa05_nitrate; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW woa05_nitrate AS
    SELECT woa05_nitrate.woa05_id, woa05_nitrate.season, woa05_nitrate.depth, woa05_nitrate.val, woa05_nitrate.geom FROM elayers.woa05_nitrate;


ALTER TABLE web_r8.woa05_nitrate OWNER TO ikostadi;

--
-- Name: VIEW woa05_nitrate; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON VIEW woa05_nitrate IS 'View for Genes Mapserver';


--
-- Name: woa05_oxygen_dissolved; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW woa05_oxygen_dissolved AS
    SELECT woa05_oxygen_dissolved.woa05_id, woa05_oxygen_dissolved.season, woa05_oxygen_dissolved.depth, woa05_oxygen_dissolved.val, woa05_oxygen_dissolved.geom FROM elayers.woa05_oxygen_dissolved;


ALTER TABLE web_r8.woa05_oxygen_dissolved OWNER TO ikostadi;

--
-- Name: VIEW woa05_oxygen_dissolved; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON VIEW woa05_oxygen_dissolved IS 'View for Genes Mapserver';


--
-- Name: woa05_oxygen_saturation; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW woa05_oxygen_saturation AS
    SELECT woa05_oxygen_saturation.woa05_id, woa05_oxygen_saturation.season, woa05_oxygen_saturation.depth, woa05_oxygen_saturation.val, woa05_oxygen_saturation.geom FROM elayers.woa05_oxygen_saturation;


ALTER TABLE web_r8.woa05_oxygen_saturation OWNER TO ikostadi;

--
-- Name: VIEW woa05_oxygen_saturation; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON VIEW woa05_oxygen_saturation IS 'View for Genes Mapserver';


--
-- Name: woa05_oxygen_utilization; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW woa05_oxygen_utilization AS
    SELECT woa05_oxygen_utilization.woa05_id, woa05_oxygen_utilization.season, woa05_oxygen_utilization.depth, woa05_oxygen_utilization.val, woa05_oxygen_utilization.geom FROM elayers.woa05_oxygen_utilization;


ALTER TABLE web_r8.woa05_oxygen_utilization OWNER TO ikostadi;

--
-- Name: VIEW woa05_oxygen_utilization; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON VIEW woa05_oxygen_utilization IS 'View for Genes Mapserver';


--
-- Name: woa05_phosphate; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW woa05_phosphate AS
    SELECT woa05_phosphate.woa05_id, woa05_phosphate.season, woa05_phosphate.depth, woa05_phosphate.val, woa05_phosphate.geom FROM elayers.woa05_phosphate;


ALTER TABLE web_r8.woa05_phosphate OWNER TO ikostadi;

--
-- Name: VIEW woa05_phosphate; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON VIEW woa05_phosphate IS 'View for Genes Mapserver';


--
-- Name: woa05_salinity; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW woa05_salinity AS
    SELECT woa05_salinity.woa05_id, woa05_salinity.season, woa05_salinity.depth, woa05_salinity.val, woa05_salinity.geom FROM elayers.woa05_salinity;


ALTER TABLE web_r8.woa05_salinity OWNER TO ikostadi;

--
-- Name: VIEW woa05_salinity; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON VIEW woa05_salinity IS 'View for Genes Mapserver';


--
-- Name: woa05_silicate; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW woa05_silicate AS
    SELECT woa05_silicate.woa05_id, woa05_silicate.season, woa05_silicate.depth, woa05_silicate.val, woa05_silicate.geom FROM elayers.woa05_silicate;


ALTER TABLE web_r8.woa05_silicate OWNER TO ikostadi;

--
-- Name: VIEW woa05_silicate; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON VIEW woa05_silicate IS 'View for Genes Mapserver';


--
-- Name: woa05_temperature; Type: VIEW; Schema: web_r8; Owner: ikostadi
--

CREATE VIEW woa05_temperature AS
    SELECT woa05_temperature.woa05_id, woa05_temperature.season, woa05_temperature.depth, woa05_temperature.val, woa05_temperature.gid, woa05_temperature.geom FROM elayers.woa05_temperature;


ALTER TABLE web_r8.woa05_temperature OWNER TO ikostadi;

--
-- Name: VIEW woa05_temperature; Type: COMMENT; Schema: web_r8; Owner: ikostadi
--

COMMENT ON VIEW woa05_temperature IS 'View for Genes Mapserver';


--
-- Name: world_regions; Type: VIEW; Schema: web_r8; Owner: rkottman
--

CREATE VIEW world_regions AS
    SELECT (boundaries.gid)::text AS gid, boundaries.terr_name AS label, boundaries.geom, 'country'::text AS region_type FROM elayers.boundaries UNION SELECT ocean_limits.iho_id AS gid, ocean_limits.label, ocean_limits.geom, 'water'::text AS region_type FROM elayers.ocean_limits;


ALTER TABLE web_r8.world_regions OWNER TO rkottman;

--
-- Name: VIEW world_regions; Type: COMMENT; Schema: web_r8; Owner: rkottman
--

COMMENT ON VIEW world_regions IS 'Union view of IHO and countries for Genes Mapserver';


SET search_path = core, pg_catalog;

--
-- Name: gid; Type: DEFAULT; Schema: core; Owner: rkottman
--

ALTER TABLE annotation ALTER COLUMN gid SET DEFAULT nextval('annotation_gid_seq'::regclass);


--
-- Name: gid; Type: DEFAULT; Schema: core; Owner: rkottman
--

ALTER TABLE annotator ALTER COLUMN gid SET DEFAULT nextval('annotator_gid_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: core; Owner: rkottman
--

ALTER TABLE blast_hits ALTER COLUMN id SET DEFAULT nextval('blast_hits_id_seq'::regclass);


--
-- Name: msid; Type: DEFAULT; Schema: core; Owner: rkottman
--

ALTER TABLE dna_seqs ALTER COLUMN msid SET DEFAULT nextval('dna_seqs_msid_seq'::regclass);


--
-- Name: gid; Type: DEFAULT; Schema: core; Owner: rkottman
--

ALTER TABLE journals ALTER COLUMN gid SET DEFAULT nextval('journals_gid_seq'::regclass);


--
-- Name: gid; Type: DEFAULT; Schema: core; Owner: rkottman
--

ALTER TABLE observation ALTER COLUMN gid SET DEFAULT nextval('observation_gid_seq'::regclass);


--
-- Name: mid; Type: DEFAULT; Schema: core; Owner: rkottman
--

ALTER TABLE sample_measures ALTER COLUMN mid SET DEFAULT nextval('sample_measures_mid_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: core; Owner: rkottman
--

ALTER TABLE samples ALTER COLUMN id SET DEFAULT nextval('samples_id_seq'::regclass);


--
-- Name: id; Type: DEFAULT; Schema: core; Owner: rkottman
--

ALTER TABLE samplingsites ALTER COLUMN id SET DEFAULT nextval('samplingsites_id_seq'::regclass);


--
-- Name: gid; Type: DEFAULT; Schema: core; Owner: rkottman
--

ALTER TABLE sequenceentries ALTER COLUMN gid SET DEFAULT nextval('sequenceentries_gid_seq'::regclass);


SET search_path = elayers, pg_catalog;

--
-- Name: gid; Type: DEFAULT; Schema: elayers; Owner: rkottman
--

ALTER TABLE chlorophyll ALTER COLUMN gid SET DEFAULT nextval('chlorophyll_gid_seq'::regclass);


--
-- Name: gid; Type: DEFAULT; Schema: elayers; Owner: rkottman
--

ALTER TABLE longhurst_regions ALTER COLUMN gid SET DEFAULT nextval('longhurst_regions_gid_seq'::regclass);


--
-- Name: _id; Type: DEFAULT; Schema: elayers; Owner: ikostadi
--

ALTER TABLE woa05_temperature_stability ALTER COLUMN _id SET DEFAULT nextval('woa05_temperature_stability__id_seq'::regclass);


SET search_path = mflayers, pg_catalog;

--
-- Name: gid; Type: DEFAULT; Schema: mflayers; Owner: rkottman
--

ALTER TABLE boundaries ALTER COLUMN gid SET DEFAULT nextval('boundaries_gid_seq'::regclass);


--
-- Name: gid; Type: DEFAULT; Schema: mflayers; Owner: rkottman
--

ALTER TABLE lakes ALTER COLUMN gid SET DEFAULT nextval('lakes_gid_seq'::regclass);


--
-- Name: gid; Type: DEFAULT; Schema: mflayers; Owner: rkottman
--

ALTER TABLE undersea_arc ALTER COLUMN gid SET DEFAULT nextval('undersea_arc_gid_seq'::regclass);


--
-- Name: gid; Type: DEFAULT; Schema: mflayers; Owner: rkottman
--

ALTER TABLE undersea_point ALTER COLUMN gid SET DEFAULT nextval('undersea_point_gid_seq'::regclass);


SET search_path = pfam_23, pg_catalog;

--
-- Name: auto_pfama; Type: DEFAULT; Schema: pfam_23; Owner: ikostadi
--

ALTER TABLE pfama ALTER COLUMN auto_pfama SET DEFAULT nextval('pfama_auto_pfama_seq'::regclass);


SET search_path = pfam_stage, pg_catalog;

--
-- Name: auto_pfama; Type: DEFAULT; Schema: pfam_stage; Owner: pbuttigi
--

ALTER TABLE pfama ALTER COLUMN auto_pfama SET DEFAULT nextval('pfama_auto_pfama_seq'::regclass);


SET search_path = pgq, pg_catalog;

--
-- Name: co_id; Type: DEFAULT; Schema: pgq; Owner: pgqueue
--

ALTER TABLE consumer ALTER COLUMN co_id SET DEFAULT nextval('consumer_co_id_seq'::regclass);


--
-- Name: queue_id; Type: DEFAULT; Schema: pgq; Owner: pgqueue
--

ALTER TABLE queue ALTER COLUMN queue_id SET DEFAULT nextval('queue_queue_id_seq'::regclass);


--
-- Name: sub_id; Type: DEFAULT; Schema: pgq; Owner: pgqueue
--

ALTER TABLE subscription ALTER COLUMN sub_id SET DEFAULT nextval('subscription_sub_id_seq'::regclass);


SET search_path = stage_r8, pg_catalog;

--
-- Name: id; Type: DEFAULT; Schema: stage_r8; Owner: rkottman
--

ALTER TABLE marine_phages ALTER COLUMN id SET DEFAULT nextval('marine_phages_id_seq'::regclass);


SET search_path = web, pg_catalog;

--
-- Name: sid; Type: DEFAULT; Schema: web; Owner: rkottman
--

ALTER TABLE silva_100_dnas ALTER COLUMN sid SET DEFAULT nextval('silva_100_dnas_sid_seq'::regclass);


--
-- Name: sid; Type: DEFAULT; Schema: web; Owner: rkottman
--

ALTER TABLE silva_100_samples ALTER COLUMN sid SET DEFAULT nextval('silva_100_samples_sid_seq'::regclass);


SET search_path = web_r8, pg_catalog;

--
-- Name: sid; Type: DEFAULT; Schema: web_r8; Owner: ikostadi
--

ALTER TABLE silva_102_regions ALTER COLUMN sid SET DEFAULT nextval('silva_102_regions_sid_seq'::regclass);


--
-- Name: sid; Type: DEFAULT; Schema: web_r8; Owner: ikostadi
--

ALTER TABLE silva_102_samples ALTER COLUMN sid SET DEFAULT nextval('silva_102_samples_sid_seq'::regclass);


SET search_path = core, pg_catalog;

--
-- Name: annotation_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY annotation
    ADD CONSTRAINT annotation_pkey PRIMARY KEY (gid);


--
-- Name: annotator_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY annotator
    ADD CONSTRAINT annotator_pkey PRIMARY KEY (gid);


--
-- Name: articles_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY articles
    ADD CONSTRAINT articles_pkey PRIMARY KEY (id, id_code);


--
-- Name: assignments_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY assignments
    ADD CONSTRAINT assignments_pkey PRIMARY KEY (project, person, role);


--
-- Name: authorlists_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY authorlists
    ADD CONSTRAINT authorlists_pkey PRIMARY KEY (article_id, article_id_code, first_name, initials, last_name, sex, pos);


--
-- Name: authors_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY authors
    ADD CONSTRAINT authors_pkey PRIMARY KEY (first_name, last_name, initials, sex);


--
-- Name: aux_cv_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY aux_cv
    ADD CONSTRAINT aux_cv_pkey PRIMARY KEY (term);


--
-- Name: blast_hits_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY blast_hits
    ADD CONSTRAINT blast_hits_pkey PRIMARY KEY (sid, jid, hit);


--
-- Name: blast_run_pkey; Type: CONSTRAINT; Schema: core; Owner: ikostadi; Tablespace: 
--

ALTER TABLE ONLY blast_run
    ADD CONSTRAINT blast_run_pkey PRIMARY KEY (sid, jid);


--
-- Name: clonelib_dnas_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY clonelib_dnas
    ADD CONSTRAINT clonelib_dnas_pkey PRIMARY KEY (study, lib_name, clone_name, did, did_code);


--
-- Name: clonelibs_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY clonelibs
    ADD CONSTRAINT clonelibs_pkey PRIMARY KEY (label, study);


--
-- Name: clones_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY clones
    ADD CONSTRAINT clones_pkey PRIMARY KEY (label, study, lib_name);


--
-- Name: data_sources_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY data_sources
    ADD CONSTRAINT data_sources_pkey PRIMARY KEY (code);


--
-- Name: dna_id_maps_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY dna_id_maps
    ADD CONSTRAINT dna_id_maps_pkey PRIMARY KEY (pid, pid_type, sid, sid_type);


--
-- Name: dna_regions_rid_key; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY dna_regions
    ADD CONSTRAINT dna_regions_rid_key UNIQUE (rid, rid_type);


--
-- Name: dna_seqs_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY dna_seqs
    ADD CONSTRAINT dna_seqs_pkey PRIMARY KEY (did, did_auth);


--
-- Name: dna_set_mdata_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY dna_set_mdata
    ADD CONSTRAINT dna_set_mdata_pkey PRIMARY KEY (label);


--
-- Name: dna_sets_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY dna_sets
    ADD CONSTRAINT dna_sets_pkey PRIMARY KEY (label, did, did_auth);


--
-- Name: gcdml_reports_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY gcdml_reports
    ADD CONSTRAINT gcdml_reports_pkey PRIMARY KEY (gcat_id, source_name, source_version);


--
-- Name: genome_dnas_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY genome_dnas
    ADD CONSTRAINT genome_dnas_pkey PRIMARY KEY (isolate_id, did, did_auth);


--
-- Name: genome_studies_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY genome_studies
    ADD CONSTRAINT genome_studies_pkey PRIMARY KEY (label, isolate_name);


--
-- Name: geo_regions_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY geo_regions
    ADD CONSTRAINT geo_regions_pkey PRIMARY KEY (label);


--
-- Name: id_authority_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY id_codes
    ADD CONSTRAINT id_authority_pkey PRIMARY KEY (code);


--
-- Name: isolates_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY isolates
    ADD CONSTRAINT isolates_pkey PRIMARY KEY (label);


--
-- Name: journals_eissn_key; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY journals
    ADD CONSTRAINT journals_eissn_key UNIQUE (eissn);


--
-- Name: journals_med_abbr_key; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY journals
    ADD CONSTRAINT journals_med_abbr_key UNIQUE (med_abbr);


--
-- Name: journals_nlmid_key; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY journals
    ADD CONSTRAINT journals_nlmid_key UNIQUE (nlmid);


--
-- Name: journals_pissn_key; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY journals
    ADD CONSTRAINT journals_pissn_key UNIQUE (pissn);


--
-- Name: journals_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY journals
    ADD CONSTRAINT journals_pkey PRIMARY KEY (gid);


--
-- Name: mg_dnas_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY mg_dnas
    ADD CONSTRAINT mg_dnas_pkey PRIMARY KEY (study, sample_name, did, did_code);


--
-- Name: mg_pooled_dnas_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY mg_pooled_dnas
    ADD CONSTRAINT mg_pooled_dnas_pkey PRIMARY KEY (study, pool_label, did, did_code);


--
-- Name: mg_pooled_samples_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY mg_pooled_samples
    ADD CONSTRAINT mg_pooled_samples_pkey PRIMARY KEY (study, sample_label, pool_label);


--
-- Name: mg_studies_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY mg_studies
    ADD CONSTRAINT mg_studies_pkey PRIMARY KEY (study);


--
-- Name: multiregions_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY multiregions
    ADD CONSTRAINT multiregions_pkey PRIMARY KEY (label, feature, span_lpos, span_rpos);


--
-- Name: ncbi_tax_names_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY ncbi_tax_names
    ADD CONSTRAINT ncbi_tax_names_pkey PRIMARY KEY (tax_id, tax_name, unique_name);


--
-- Name: ncbi_tax_nodes_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY ncbi_tax_nodes
    ADD CONSTRAINT ncbi_tax_nodes_pkey PRIMARY KEY (tax_id);


--
-- Name: ncbi_tax_nodes_tax_id_key; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY ncbi_tax_nodes
    ADD CONSTRAINT ncbi_tax_nodes_tax_id_key UNIQUE (tax_id, scientific_name);


--
-- Name: observation_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY observation
    ADD CONSTRAINT observation_pkey PRIMARY KEY (gid);


--
-- Name: organisms_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY organisms
    ADD CONSTRAINT organisms_pkey PRIMARY KEY (genus, species);


--
-- Name: person_roles_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY person_roles
    ADD CONSTRAINT person_roles_pkey PRIMARY KEY (person, role);


--
-- Name: persons_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY logins
    ADD CONSTRAINT persons_pkey PRIMARY KEY (logname);


--
-- Name: pfam_group_descr_pkey; Type: CONSTRAINT; Schema: core; Owner: ikostadi; Tablespace: 
--

ALTER TABLE ONLY pfam_group_descr
    ADD CONSTRAINT pfam_group_descr_pkey PRIMARY KEY (label);


--
-- Name: pfam_groups_pkey; Type: CONSTRAINT; Schema: core; Owner: core_admin; Tablespace: 
--

ALTER TABLE ONLY pfam_groups
    ADD CONSTRAINT pfam_groups_pkey PRIMARY KEY (label, pfam_23_acc);


--
-- Name: privs_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY privs
    ADD CONSTRAINT privs_pkey PRIMARY KEY (label);


--
-- Name: projects_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY projects
    ADD CONSTRAINT projects_pkey PRIMARY KEY (id);


--
-- Name: role_links_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY role_links
    ADD CONSTRAINT role_links_pkey PRIMARY KEY (role_label, has_role);


--
-- Name: role_privs_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY role_privs
    ADD CONSTRAINT role_privs_pkey PRIMARY KEY (role_label, privil);


--
-- Name: roles_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY roles
    ADD CONSTRAINT roles_pkey PRIMARY KEY (label);


--
-- Name: sample_measures_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sample_measures
    ADD CONSTRAINT sample_measures_pkey PRIMARY KEY (study, sample_name, material, param, unit, vals, conducted, conducted_res, device);


--
-- Name: sample_pools_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sample_pools
    ADD CONSTRAINT sample_pools_pkey PRIMARY KEY (study, label);


--
-- Name: sample_set_mdata_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sample_set_mdata
    ADD CONSTRAINT sample_set_mdata_pkey PRIMARY KEY (label);


--
-- Name: sample_sets_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sample_sets
    ADD CONSTRAINT sample_sets_pkey PRIMARY KEY (label, study, sample_name);


--
-- Name: samples_id_key; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT samples_id_key UNIQUE (id);


--
-- Name: samples_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT samples_pkey PRIMARY KEY (study, label);


--
-- Name: samplingsites_id_key; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY samplingsites
    ADD CONSTRAINT samplingsites_id_key UNIQUE (id);


--
-- Name: samplingsites_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY samplingsites
    ADD CONSTRAINT samplingsites_pkey PRIMARY KEY (geom, max_uncertain);


--
-- Name: seq_regions_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY seq_regions
    ADD CONSTRAINT seq_regions_pkey PRIMARY KEY (did, did_auth, lpos, rpos, strand, feature);


--
-- Name: seq_regions_rid_key; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY seq_regions
    ADD CONSTRAINT seq_regions_rid_key UNIQUE (rid, rid_type);


--
-- Name: sequenceentries_gbkacc_key; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sequenceentries
    ADD CONSTRAINT sequenceentries_gbkacc_key UNIQUE (gbkacc);


--
-- Name: sequenceentries_gbkacc_key1; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sequenceentries
    ADD CONSTRAINT sequenceentries_gbkacc_key1 UNIQUE (gbkacc, gbkgi);


--
-- Name: sequenceentries_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sequenceentries
    ADD CONSTRAINT sequenceentries_pkey PRIMARY KEY (gid);


--
-- Name: studies_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY studies
    ADD CONSTRAINT studies_pkey PRIMARY KEY (label);


--
-- Name: tags_pkey; Type: CONSTRAINT; Schema: core; Owner: ikostadi; Tablespace: 
--

ALTER TABLE ONLY tags
    ADD CONSTRAINT tags_pkey PRIMARY KEY (tag);


--
-- Name: tools_pkey; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY tool_versions
    ADD CONSTRAINT tools_pkey PRIMARY KEY (label, ver);


--
-- Name: tools_pkey1; Type: CONSTRAINT; Schema: core; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY tools
    ADD CONSTRAINT tools_pkey1 PRIMARY KEY (label);


SET search_path = cv, pg_catalog;

--
-- Name: assembly_status_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY assembly_status
    ADD CONSTRAINT assembly_status_pkey PRIMARY KEY (term);


--
-- Name: biotic_relationship_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY biotic_relationship
    ADD CONSTRAINT biotic_relationship_pkey PRIMARY KEY (term);


--
-- Name: envo_lite_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY envo_lite
    ADD CONSTRAINT envo_lite_pkey PRIMARY KEY (term);


--
-- Name: estim_codes_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY estim_codes
    ADD CONSTRAINT estim_codes_pkey PRIMARY KEY (term);


--
-- Name: gencodes_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY gencodes
    ADD CONSTRAINT gencodes_pkey PRIMARY KEY (code_id);


--
-- Name: genome_materials_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY genome_materials
    ADD CONSTRAINT genome_materials_pkey PRIMARY KEY (term);


--
-- Name: genome_project_status_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY genome_project_status
    ADD CONSTRAINT genome_project_status_pkey PRIMARY KEY (term);


--
-- Name: habitat_lite_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY habitat_lite
    ADD CONSTRAINT habitat_lite_pkey PRIMARY KEY (term);


--
-- Name: habitat_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY habitat
    ADD CONSTRAINT habitat_pkey PRIMARY KEY (term);


--
-- Name: insdc_features_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY insdc_features
    ADD CONSTRAINT insdc_features_pkey PRIMARY KEY (term);


--
-- Name: mcodes_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY mcodes
    ADD CONSTRAINT mcodes_pkey PRIMARY KEY (term);


--
-- Name: parameters_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY parameters
    ADD CONSTRAINT parameters_pkey PRIMARY KEY (label, unit);


--
-- Name: sample_materials_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sample_materials
    ADD CONSTRAINT sample_materials_pkey PRIMARY KEY (term);


--
-- Name: seq_approaches_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY seq_approaches
    ADD CONSTRAINT seq_approaches_pkey PRIMARY KEY (term);


--
-- Name: seq_methods_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY seq_methods
    ADD CONSTRAINT seq_methods_pkey PRIMARY KEY (term);


--
-- Name: seq_platforms_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY seq_platforms
    ADD CONSTRAINT seq_platforms_pkey PRIMARY KEY (term);


--
-- Name: unit_definitions_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY unit_definitions
    ADD CONSTRAINT unit_definitions_pkey PRIMARY KEY (unit_name, std_symbol);


--
-- Name: verification_codes_pkey; Type: CONSTRAINT; Schema: cv; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY verification_codes
    ADD CONSTRAINT verification_codes_pkey PRIMARY KEY (term);


SET search_path = elayers, pg_catalog;

--
-- Name: boundaries_pkey; Type: CONSTRAINT; Schema: elayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY boundaries
    ADD CONSTRAINT boundaries_pkey PRIMARY KEY (gid);


--
-- Name: chlorophyll_gid_key; Type: CONSTRAINT; Schema: elayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chlorophyll
    ADD CONSTRAINT chlorophyll_gid_key UNIQUE (gid);


--
-- Name: chlorophyll_pkey; Type: CONSTRAINT; Schema: elayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chlorophyll
    ADD CONSTRAINT chlorophyll_pkey PRIMARY KEY (woa05_id, yr, season);


--
-- Name: longhurst_regions_pkey; Type: CONSTRAINT; Schema: elayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY longhurst_regions
    ADD CONSTRAINT longhurst_regions_pkey PRIMARY KEY (provcode);


--
-- Name: ocean_limits_pkey; Type: CONSTRAINT; Schema: elayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY ocean_limits
    ADD CONSTRAINT ocean_limits_pkey PRIMARY KEY (label);


--
-- Name: seasons_pkey; Type: CONSTRAINT; Schema: elayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY seasons
    ADD CONSTRAINT seasons_pkey PRIMARY KEY (code);


--
-- Name: seasons_season_key; Type: CONSTRAINT; Schema: elayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY seasons
    ADD CONSTRAINT seasons_season_key UNIQUE (season);


--
-- Name: standard_levels_lev_key; Type: CONSTRAINT; Schema: elayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY standard_levels
    ADD CONSTRAINT standard_levels_lev_key UNIQUE (lev);


--
-- Name: standard_levels_pkey; Type: CONSTRAINT; Schema: elayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY standard_levels
    ADD CONSTRAINT standard_levels_pkey PRIMARY KEY (depth);


--
-- Name: whale_falls_pkey; Type: CONSTRAINT; Schema: elayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY whale_falls
    ADD CONSTRAINT whale_falls_pkey PRIMARY KEY (lat, lon, depth);


--
-- Name: woa05_temperature_pkey; Type: CONSTRAINT; Schema: elayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY woa05_temperature
    ADD CONSTRAINT woa05_temperature_pkey PRIMARY KEY (woa05_id, depth, season);


--
-- Name: wod05_osd_all_pkey; Type: CONSTRAINT; Schema: elayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY wod05_osd_all
    ADD CONSTRAINT wod05_osd_all_pkey PRIMARY KEY (wod05_id);


SET search_path = mfdata, pg_catalog;

--
-- Name: chloro_0000_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_0000_grid
    ADD CONSTRAINT chloro_0000_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_1997_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_1997_grid
    ADD CONSTRAINT chloro_1997_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_1998_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_1998_grid
    ADD CONSTRAINT chloro_1998_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_1999_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_1999_grid
    ADD CONSTRAINT chloro_1999_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_2000_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_2000_grid
    ADD CONSTRAINT chloro_2000_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_2001_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_2001_grid
    ADD CONSTRAINT chloro_2001_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_2002_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_2002_grid
    ADD CONSTRAINT chloro_2002_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_2003_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_2003_grid
    ADD CONSTRAINT chloro_2003_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_2004_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_2004_grid
    ADD CONSTRAINT chloro_2004_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_2005_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_2005_grid
    ADD CONSTRAINT chloro_2005_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_2006_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_2006_grid
    ADD CONSTRAINT chloro_2006_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_cv_0000_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_cv_0000_grid
    ADD CONSTRAINT chloro_cv_0000_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_cv_1997_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_cv_1997_grid
    ADD CONSTRAINT chloro_cv_1997_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_cv_1998_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_cv_1998_grid
    ADD CONSTRAINT chloro_cv_1998_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_cv_1999_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_cv_1999_grid
    ADD CONSTRAINT chloro_cv_1999_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_cv_2000_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_cv_2000_grid
    ADD CONSTRAINT chloro_cv_2000_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_cv_2001_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_cv_2001_grid
    ADD CONSTRAINT chloro_cv_2001_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_cv_2002_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_cv_2002_grid
    ADD CONSTRAINT chloro_cv_2002_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_cv_2003_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_cv_2003_grid
    ADD CONSTRAINT chloro_cv_2003_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_cv_2004_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_cv_2004_grid
    ADD CONSTRAINT chloro_cv_2004_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_cv_2005_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_cv_2005_grid
    ADD CONSTRAINT chloro_cv_2005_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_cv_2006_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_cv_2006_grid
    ADD CONSTRAINT chloro_cv_2006_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_ss_0000_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_ss_0000_grid
    ADD CONSTRAINT chloro_ss_0000_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_ss_1997_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_ss_1997_grid
    ADD CONSTRAINT chloro_ss_1997_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_ss_1998_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_ss_1998_grid
    ADD CONSTRAINT chloro_ss_1998_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_ss_1999_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_ss_1999_grid
    ADD CONSTRAINT chloro_ss_1999_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_ss_2000_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_ss_2000_grid
    ADD CONSTRAINT chloro_ss_2000_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_ss_2001_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_ss_2001_grid
    ADD CONSTRAINT chloro_ss_2001_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_ss_2002_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_ss_2002_grid
    ADD CONSTRAINT chloro_ss_2002_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_ss_2003_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_ss_2003_grid
    ADD CONSTRAINT chloro_ss_2003_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_ss_2004_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_ss_2004_grid
    ADD CONSTRAINT chloro_ss_2004_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_ss_2005_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_ss_2005_grid
    ADD CONSTRAINT chloro_ss_2005_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: chloro_ss_2006_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY chloro_ss_2006_grid
    ADD CONSTRAINT chloro_ss_2006_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_00_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_00_grid
    ADD CONSTRAINT nitr_00_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_01_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_01_grid
    ADD CONSTRAINT nitr_01_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_02_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_02_grid
    ADD CONSTRAINT nitr_02_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_03_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_03_grid
    ADD CONSTRAINT nitr_03_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_04_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_04_grid
    ADD CONSTRAINT nitr_04_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_05_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_05_grid
    ADD CONSTRAINT nitr_05_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_06_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_06_grid
    ADD CONSTRAINT nitr_06_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_07_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_07_grid
    ADD CONSTRAINT nitr_07_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_08_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_08_grid
    ADD CONSTRAINT nitr_08_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_09_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_09_grid
    ADD CONSTRAINT nitr_09_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_10_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_10_grid
    ADD CONSTRAINT nitr_10_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_11_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_11_grid
    ADD CONSTRAINT nitr_11_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_12_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_12_grid
    ADD CONSTRAINT nitr_12_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_13_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_13_grid
    ADD CONSTRAINT nitr_13_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_14_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_14_grid
    ADD CONSTRAINT nitr_14_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_15_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_15_grid
    ADD CONSTRAINT nitr_15_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: nitr_16_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY nitr_16_grid
    ADD CONSTRAINT nitr_16_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_00_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_00_grid
    ADD CONSTRAINT oxy_dis_00_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_01_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_01_grid
    ADD CONSTRAINT oxy_dis_01_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_02_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_02_grid
    ADD CONSTRAINT oxy_dis_02_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_03_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_03_grid
    ADD CONSTRAINT oxy_dis_03_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_04_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_04_grid
    ADD CONSTRAINT oxy_dis_04_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_05_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_05_grid
    ADD CONSTRAINT oxy_dis_05_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_06_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_06_grid
    ADD CONSTRAINT oxy_dis_06_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_07_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_07_grid
    ADD CONSTRAINT oxy_dis_07_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_08_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_08_grid
    ADD CONSTRAINT oxy_dis_08_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_09_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_09_grid
    ADD CONSTRAINT oxy_dis_09_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_10_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_10_grid
    ADD CONSTRAINT oxy_dis_10_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_11_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_11_grid
    ADD CONSTRAINT oxy_dis_11_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_12_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_12_grid
    ADD CONSTRAINT oxy_dis_12_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_13_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_13_grid
    ADD CONSTRAINT oxy_dis_13_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_14_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_14_grid
    ADD CONSTRAINT oxy_dis_14_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_15_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_15_grid
    ADD CONSTRAINT oxy_dis_15_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_dis_16_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_dis_16_grid
    ADD CONSTRAINT oxy_dis_16_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_00_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_00_grid
    ADD CONSTRAINT oxy_sat_00_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_01_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_01_grid
    ADD CONSTRAINT oxy_sat_01_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_02_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_02_grid
    ADD CONSTRAINT oxy_sat_02_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_03_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_03_grid
    ADD CONSTRAINT oxy_sat_03_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_04_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_04_grid
    ADD CONSTRAINT oxy_sat_04_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_05_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_05_grid
    ADD CONSTRAINT oxy_sat_05_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_06_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_06_grid
    ADD CONSTRAINT oxy_sat_06_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_07_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_07_grid
    ADD CONSTRAINT oxy_sat_07_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_08_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_08_grid
    ADD CONSTRAINT oxy_sat_08_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_09_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_09_grid
    ADD CONSTRAINT oxy_sat_09_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_10_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_10_grid
    ADD CONSTRAINT oxy_sat_10_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_11_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_11_grid
    ADD CONSTRAINT oxy_sat_11_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_12_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_12_grid
    ADD CONSTRAINT oxy_sat_12_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_13_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_13_grid
    ADD CONSTRAINT oxy_sat_13_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_14_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_14_grid
    ADD CONSTRAINT oxy_sat_14_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_15_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_15_grid
    ADD CONSTRAINT oxy_sat_15_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_sat_16_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_sat_16_grid
    ADD CONSTRAINT oxy_sat_16_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_00_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_00_grid
    ADD CONSTRAINT oxy_util_00_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_01_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_01_grid
    ADD CONSTRAINT oxy_util_01_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_02_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_02_grid
    ADD CONSTRAINT oxy_util_02_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_03_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_03_grid
    ADD CONSTRAINT oxy_util_03_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_04_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_04_grid
    ADD CONSTRAINT oxy_util_04_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_05_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_05_grid
    ADD CONSTRAINT oxy_util_05_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_06_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_06_grid
    ADD CONSTRAINT oxy_util_06_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_07_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_07_grid
    ADD CONSTRAINT oxy_util_07_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_08_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_08_grid
    ADD CONSTRAINT oxy_util_08_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_09_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_09_grid
    ADD CONSTRAINT oxy_util_09_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_10_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_10_grid
    ADD CONSTRAINT oxy_util_10_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_11_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_11_grid
    ADD CONSTRAINT oxy_util_11_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_12_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_12_grid
    ADD CONSTRAINT oxy_util_12_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_13_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_13_grid
    ADD CONSTRAINT oxy_util_13_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_14_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_14_grid
    ADD CONSTRAINT oxy_util_14_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_15_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_15_grid
    ADD CONSTRAINT oxy_util_15_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: oxy_util_16_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY oxy_util_16_grid
    ADD CONSTRAINT oxy_util_16_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_00_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_00_grid
    ADD CONSTRAINT phosph_00_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_01_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_01_grid
    ADD CONSTRAINT phosph_01_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_02_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_02_grid
    ADD CONSTRAINT phosph_02_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_03_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_03_grid
    ADD CONSTRAINT phosph_03_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_04_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_04_grid
    ADD CONSTRAINT phosph_04_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_05_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_05_grid
    ADD CONSTRAINT phosph_05_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_06_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_06_grid
    ADD CONSTRAINT phosph_06_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_07_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_07_grid
    ADD CONSTRAINT phosph_07_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_08_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_08_grid
    ADD CONSTRAINT phosph_08_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_09_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_09_grid
    ADD CONSTRAINT phosph_09_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_10_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_10_grid
    ADD CONSTRAINT phosph_10_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_11_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_11_grid
    ADD CONSTRAINT phosph_11_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_12_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_12_grid
    ADD CONSTRAINT phosph_12_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_13_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_13_grid
    ADD CONSTRAINT phosph_13_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_14_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_14_grid
    ADD CONSTRAINT phosph_14_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_15_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_15_grid
    ADD CONSTRAINT phosph_15_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: phosph_16_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY phosph_16_grid
    ADD CONSTRAINT phosph_16_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_00_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_00_grid
    ADD CONSTRAINT sal_00_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_01_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_01_grid
    ADD CONSTRAINT sal_01_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_02_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_02_grid
    ADD CONSTRAINT sal_02_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_03_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_03_grid
    ADD CONSTRAINT sal_03_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_04_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_04_grid
    ADD CONSTRAINT sal_04_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_05_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_05_grid
    ADD CONSTRAINT sal_05_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_06_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_06_grid
    ADD CONSTRAINT sal_06_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_07_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_07_grid
    ADD CONSTRAINT sal_07_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_08_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_08_grid
    ADD CONSTRAINT sal_08_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_09_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_09_grid
    ADD CONSTRAINT sal_09_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_10_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_10_grid
    ADD CONSTRAINT sal_10_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_11_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_11_grid
    ADD CONSTRAINT sal_11_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_12_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_12_grid
    ADD CONSTRAINT sal_12_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_13_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_13_grid
    ADD CONSTRAINT sal_13_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_14_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_14_grid
    ADD CONSTRAINT sal_14_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_15_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_15_grid
    ADD CONSTRAINT sal_15_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sal_16_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sal_16_grid
    ADD CONSTRAINT sal_16_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: seasons_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY seasons
    ADD CONSTRAINT seasons_pkey PRIMARY KEY (code);


--
-- Name: sil_00_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_00_grid
    ADD CONSTRAINT sil_00_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_01_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_01_grid
    ADD CONSTRAINT sil_01_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_02_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_02_grid
    ADD CONSTRAINT sil_02_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_03_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_03_grid
    ADD CONSTRAINT sil_03_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_04_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_04_grid
    ADD CONSTRAINT sil_04_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_05_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_05_grid
    ADD CONSTRAINT sil_05_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_06_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_06_grid
    ADD CONSTRAINT sil_06_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_07_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_07_grid
    ADD CONSTRAINT sil_07_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_08_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_08_grid
    ADD CONSTRAINT sil_08_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_09_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_09_grid
    ADD CONSTRAINT sil_09_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_10_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_10_grid
    ADD CONSTRAINT sil_10_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_11_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_11_grid
    ADD CONSTRAINT sil_11_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_12_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_12_grid
    ADD CONSTRAINT sil_12_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_13_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_13_grid
    ADD CONSTRAINT sil_13_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_14_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_14_grid
    ADD CONSTRAINT sil_14_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_15_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_15_grid
    ADD CONSTRAINT sil_15_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: sil_16_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY sil_16_grid
    ADD CONSTRAINT sil_16_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: standard_levels_lev_key; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY standard_levels
    ADD CONSTRAINT standard_levels_lev_key UNIQUE (lev);


--
-- Name: standard_levels_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY standard_levels
    ADD CONSTRAINT standard_levels_pkey PRIMARY KEY (depth);


--
-- Name: temp_00_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_00_grid
    ADD CONSTRAINT temp_00_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_01_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_01_grid
    ADD CONSTRAINT temp_01_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_02_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_02_grid
    ADD CONSTRAINT temp_02_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_03_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_03_grid
    ADD CONSTRAINT temp_03_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_04_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_04_grid
    ADD CONSTRAINT temp_04_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_05_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_05_grid
    ADD CONSTRAINT temp_05_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_06_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_06_grid
    ADD CONSTRAINT temp_06_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_07_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_07_grid
    ADD CONSTRAINT temp_07_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_08_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_08_grid
    ADD CONSTRAINT temp_08_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_09_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_09_grid
    ADD CONSTRAINT temp_09_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_10_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_10_grid
    ADD CONSTRAINT temp_10_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_11_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_11_grid
    ADD CONSTRAINT temp_11_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_12_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_12_grid
    ADD CONSTRAINT temp_12_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_13_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_13_grid
    ADD CONSTRAINT temp_13_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_14_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_14_grid
    ADD CONSTRAINT temp_14_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_15_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_15_grid
    ADD CONSTRAINT temp_15_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: temp_16_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY temp_16_grid
    ADD CONSTRAINT temp_16_grid_pkey PRIMARY KEY (woa05_id);


--
-- Name: units_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY units
    ADD CONSTRAINT units_pkey PRIMARY KEY (param_id);


--
-- Name: woa05_grid_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY woa05_grid
    ADD CONSTRAINT woa05_grid_pkey PRIMARY KEY (gid);


--
-- Name: woa05_level_pkey; Type: CONSTRAINT; Schema: mfdata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY woa05_level
    ADD CONSTRAINT woa05_level_pkey PRIMARY KEY (woa05_level_id);


SET search_path = mflayers, pg_catalog;

--
-- Name: boundaries_pkey; Type: CONSTRAINT; Schema: mflayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY boundaries
    ADD CONSTRAINT boundaries_pkey PRIMARY KEY (gid);


--
-- Name: coordinates_pkey; Type: CONSTRAINT; Schema: mflayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY coordinates
    ADD CONSTRAINT coordinates_pkey PRIMARY KEY (label);


--
-- Name: lakes_pkey; Type: CONSTRAINT; Schema: mflayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY lakes
    ADD CONSTRAINT lakes_pkey PRIMARY KEY (gid);


--
-- Name: undersea_arc_pkey; Type: CONSTRAINT; Schema: mflayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY undersea_arc
    ADD CONSTRAINT undersea_arc_pkey PRIMARY KEY (gid);


--
-- Name: undersea_point_pkey; Type: CONSTRAINT; Schema: mflayers; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY undersea_point
    ADD CONSTRAINT undersea_point_pkey PRIMARY KEY (gid);


SET search_path = mfmetadata, pg_catalog;

--
-- Name: cl_address_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY cl_address
    ADD CONSTRAINT cl_address_pkey PRIMARY KEY (id_cl_address);


--
-- Name: cl_citation_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY cl_citation
    ADD CONSTRAINT cl_citation_pkey PRIMARY KEY (id_cl_citation);


--
-- Name: cl_contact_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY cl_contact
    ADD CONSTRAINT cl_contact_pkey PRIMARY KEY (id_cl_contact);


--
-- Name: cl_onlineresource_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY cl_onlineresource
    ADD CONSTRAINT cl_onlineresource_pkey PRIMARY KEY (id_cl_onlineresource);


--
-- Name: cl_responsibleparty_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY cl_responsibleparty
    ADD CONSTRAINT cl_responsibleparty_pkey PRIMARY KEY (id_cl_responsibleparty);


--
-- Name: cl_rolecode_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY cl_rolecode
    ADD CONSTRAINT cl_rolecode_pkey PRIMARY KEY (id_cl_rolecode);


--
-- Name: cl_telephone_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY cl_telephone
    ADD CONSTRAINT cl_telephone_pkey PRIMARY KEY (id_cl_telephone);


--
-- Name: dq_dataquality_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY dq_dataquality
    ADD CONSTRAINT dq_dataquality_pkey PRIMARY KEY (id_dq_quality);


--
-- Name: ex_extent_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY ex_extent
    ADD CONSTRAINT ex_extent_pkey PRIMARY KEY (id_ex_extent);


--
-- Name: li_lineage_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY li_lineage
    ADD CONSTRAINT li_lineage_pkey PRIMARY KEY (id_li_lineage);


--
-- Name: md_charactersetcode_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY md_charactersetcode
    ADD CONSTRAINT md_charactersetcode_pkey PRIMARY KEY (id_md_charactersetcode);


--
-- Name: md_digitaltransferoptions_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY md_digitaltransferoptions
    ADD CONSTRAINT md_digitaltransferoptions_pkey PRIMARY KEY (id_md_digitaltransferoptions);


--
-- Name: md_distribution_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY md_distribution
    ADD CONSTRAINT md_distribution_pkey PRIMARY KEY (id_md_distribution);


--
-- Name: md_format_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY md_format
    ADD CONSTRAINT md_format_pkey PRIMARY KEY (id_md_format);


--
-- Name: md_identification_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY md_identification
    ADD CONSTRAINT md_identification_pkey PRIMARY KEY (id_md_identification);


--
-- Name: md_metadata_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY md_metadata
    ADD CONSTRAINT md_metadata_pkey PRIMARY KEY (mdfileid);


--
-- Name: md_referencesystem_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY md_referencesystem
    ADD CONSTRAINT md_referencesystem_pkey PRIMARY KEY (id_md_referencesystem);


--
-- Name: md_resolution_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY md_resolution
    ADD CONSTRAINT md_resolution_pkey PRIMARY KEY (id_md_resolution);


--
-- Name: md_spatialrepresentationtypecode_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY md_spatialrepresentationtypecode
    ADD CONSTRAINT md_spatialrepresentationtypecode_pkey PRIMARY KEY (id_spatialrepresentationtypecode);


--
-- Name: md_topiccategorycode_pkey; Type: CONSTRAINT; Schema: mfmetadata; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY md_topiccategorycode
    ADD CONSTRAINT md_topiccategorycode_pkey PRIMARY KEY (id_md_topiccategorycode);


SET search_path = mfresults, pg_catalog;

--
-- Name: chloro_id_pkey; Type: CONSTRAINT; Schema: mfresults; Owner: megxuser; Tablespace: 
--

ALTER TABLE ONLY chloro_id
    ADD CONSTRAINT chloro_id_pkey PRIMARY KEY (woa05_id);


--
-- Name: user_chloro_pkey; Type: CONSTRAINT; Schema: mfresults; Owner: megxuser; Tablespace: 
--

ALTER TABLE ONLY user_chloro
    ADD CONSTRAINT user_chloro_pkey PRIMARY KEY (id);


--
-- Name: user_ss_pkey; Type: CONSTRAINT; Schema: mfresults; Owner: megxuser; Tablespace: 
--

ALTER TABLE ONLY user_ss
    ADD CONSTRAINT user_ss_pkey PRIMARY KEY (id);


--
-- Name: user_ss_vision_pkey; Type: CONSTRAINT; Schema: mfresults; Owner: megxuser; Tablespace: 
--

ALTER TABLE ONLY user_ss_vision
    ADD CONSTRAINT user_ss_vision_pkey PRIMARY KEY (id);


--
-- Name: user_woa_copy_pkey; Type: CONSTRAINT; Schema: mfresults; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY user_woa_copy
    ADD CONSTRAINT user_woa_copy_pkey PRIMARY KEY (id);


--
-- Name: user_woa_pkey; Type: CONSTRAINT; Schema: mfresults; Owner: megxuser; Tablespace: 
--

ALTER TABLE ONLY user_woa
    ADD CONSTRAINT user_woa_pkey PRIMARY KEY (id);


--
-- Name: woa_all_param_pkey; Type: CONSTRAINT; Schema: mfresults; Owner: megxuser; Tablespace: 
--

ALTER TABLE ONLY woa_all_param
    ADD CONSTRAINT woa_all_param_pkey PRIMARY KEY (sample_id);


SET search_path = pfam_23, pg_catalog;

--
-- Name: architecture_pkey; Type: CONSTRAINT; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

ALTER TABLE ONLY architecture
    ADD CONSTRAINT architecture_pkey PRIMARY KEY (auto_architecture);


--
-- Name: dead_clans_clan_acc_key; Type: CONSTRAINT; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

ALTER TABLE ONLY dead_clans
    ADD CONSTRAINT dead_clans_clan_acc_key UNIQUE (clan_acc);


--
-- Name: dead_families_pfama_acc_key; Type: CONSTRAINT; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

ALTER TABLE ONLY dead_families
    ADD CONSTRAINT dead_families_pfama_acc_key UNIQUE (pfama_acc);


--
-- Name: genome_species_ncbi_code_key; Type: CONSTRAINT; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

ALTER TABLE ONLY genome_species
    ADD CONSTRAINT genome_species_ncbi_code_key UNIQUE (ncbi_code);


--
-- Name: megx_annotations_pkey; Type: CONSTRAINT; Schema: pfam_23; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY megx_annotations
    ADD CONSTRAINT megx_annotations_pkey PRIMARY KEY (pfama_id);


--
-- Name: ncbi_taxonomy_pkey; Type: CONSTRAINT; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

ALTER TABLE ONLY ncbi_taxonomy
    ADD CONSTRAINT ncbi_taxonomy_pkey PRIMARY KEY (ncbi_code);


--
-- Name: pdb_pkey; Type: CONSTRAINT; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

ALTER TABLE ONLY pdb
    ADD CONSTRAINT pdb_pkey PRIMARY KEY (auto_pdb);


--
-- Name: pfama_pfama_acc_key; Type: CONSTRAINT; Schema: pfam_23; Owner: ikostadi; Tablespace: 
--

ALTER TABLE ONLY pfama
    ADD CONSTRAINT pfama_pfama_acc_key UNIQUE (pfama_acc);


--
-- Name: pfama_pfama_id_key; Type: CONSTRAINT; Schema: pfam_23; Owner: ikostadi; Tablespace: 
--

ALTER TABLE ONLY pfama
    ADD CONSTRAINT pfama_pfama_id_key UNIQUE (pfama_id);


--
-- Name: pfama_pkey; Type: CONSTRAINT; Schema: pfam_23; Owner: ikostadi; Tablespace: 
--

ALTER TABLE ONLY pfama
    ADD CONSTRAINT pfama_pkey PRIMARY KEY (auto_pfama);


--
-- Name: pfama_reg_full_pkey; Type: CONSTRAINT; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

ALTER TABLE ONLY pfama_reg_full
    ADD CONSTRAINT pfama_reg_full_pkey PRIMARY KEY (auto_pfama_reg_full);


--
-- Name: pfamseq_pfamseq_acc_key; Type: CONSTRAINT; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

ALTER TABLE ONLY pfamseq
    ADD CONSTRAINT pfamseq_pfamseq_acc_key UNIQUE (pfamseq_acc);


--
-- Name: pfamseq_pkey; Type: CONSTRAINT; Schema: pfam_23; Owner: pfam_admin; Tablespace: 
--

ALTER TABLE ONLY pfamseq
    ADD CONSTRAINT pfamseq_pkey PRIMARY KEY (auto_pfamseq);


SET search_path = pfam_24, pg_catalog;

--
-- Name: pfama_pkey; Type: CONSTRAINT; Schema: pfam_24; Owner: ikostadi; Tablespace: 
--

ALTER TABLE ONLY pfama
    ADD CONSTRAINT pfama_pkey PRIMARY KEY (pfama_acc);


SET search_path = pfam_stage, pg_catalog;

--
-- Name: architecture_pkey; Type: CONSTRAINT; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY architecture
    ADD CONSTRAINT architecture_pkey PRIMARY KEY (auto_architecture);


--
-- Name: dead_clans_clan_acc_key; Type: CONSTRAINT; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY dead_clans
    ADD CONSTRAINT dead_clans_clan_acc_key UNIQUE (clan_acc);


--
-- Name: dead_families_pfama_acc_key; Type: CONSTRAINT; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY dead_families
    ADD CONSTRAINT dead_families_pfama_acc_key UNIQUE (pfama_acc);


--
-- Name: genome_species_ncbi_code_key; Type: CONSTRAINT; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY genome_species
    ADD CONSTRAINT genome_species_ncbi_code_key UNIQUE (ncbi_code);


--
-- Name: ncbi_taxonomy_pkey; Type: CONSTRAINT; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY ncbi_taxonomy
    ADD CONSTRAINT ncbi_taxonomy_pkey PRIMARY KEY (ncbi_code);


--
-- Name: pdb_pkey; Type: CONSTRAINT; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY pdb
    ADD CONSTRAINT pdb_pkey PRIMARY KEY (auto_pdb);


--
-- Name: pfama_pfama_acc_key; Type: CONSTRAINT; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY pfama
    ADD CONSTRAINT pfama_pfama_acc_key UNIQUE (pfama_acc);


--
-- Name: pfama_pfama_id_key; Type: CONSTRAINT; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY pfama
    ADD CONSTRAINT pfama_pfama_id_key UNIQUE (pfama_id);


--
-- Name: pfama_pkey; Type: CONSTRAINT; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY pfama
    ADD CONSTRAINT pfama_pkey PRIMARY KEY (auto_pfama);


--
-- Name: pfama_reg_full_pkey; Type: CONSTRAINT; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY pfama_reg_full
    ADD CONSTRAINT pfama_reg_full_pkey PRIMARY KEY (auto_pfama_reg_full);


--
-- Name: pfamseq_pfamseq_acc_key; Type: CONSTRAINT; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY pfamseq
    ADD CONSTRAINT pfamseq_pfamseq_acc_key UNIQUE (pfamseq_acc);


--
-- Name: pfamseq_pkey; Type: CONSTRAINT; Schema: pfam_stage; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY pfamseq
    ADD CONSTRAINT pfamseq_pkey PRIMARY KEY (auto_pfamseq);


SET search_path = pgq, pg_catalog;

--
-- Name: consumer_name_uq; Type: CONSTRAINT; Schema: pgq; Owner: pgqueue; Tablespace: 
--

ALTER TABLE ONLY consumer
    ADD CONSTRAINT consumer_name_uq UNIQUE (co_name);


--
-- Name: consumer_pkey; Type: CONSTRAINT; Schema: pgq; Owner: pgqueue; Tablespace: 
--

ALTER TABLE ONLY consumer
    ADD CONSTRAINT consumer_pkey PRIMARY KEY (co_id);


--
-- Name: fq_pkey; Type: CONSTRAINT; Schema: pgq; Owner: pgqueue; Tablespace: 
--

ALTER TABLE ONLY failed_queue
    ADD CONSTRAINT fq_pkey PRIMARY KEY (ev_owner, ev_id);


--
-- Name: queue_name_uq; Type: CONSTRAINT; Schema: pgq; Owner: pgqueue; Tablespace: 
--

ALTER TABLE ONLY queue
    ADD CONSTRAINT queue_name_uq UNIQUE (queue_name);


--
-- Name: queue_pkey; Type: CONSTRAINT; Schema: pgq; Owner: pgqueue; Tablespace: 
--

ALTER TABLE ONLY queue
    ADD CONSTRAINT queue_pkey PRIMARY KEY (queue_id);


--
-- Name: rq_pkey; Type: CONSTRAINT; Schema: pgq; Owner: pgqueue; Tablespace: 
--

ALTER TABLE ONLY retry_queue
    ADD CONSTRAINT rq_pkey PRIMARY KEY (ev_owner, ev_id);


--
-- Name: subscription_pkey; Type: CONSTRAINT; Schema: pgq; Owner: pgqueue; Tablespace: 
--

ALTER TABLE ONLY subscription
    ADD CONSTRAINT subscription_pkey PRIMARY KEY (sub_id);


--
-- Name: subscription_ukey; Type: CONSTRAINT; Schema: pgq; Owner: pgqueue; Tablespace: 
--

ALTER TABLE ONLY subscription
    ADD CONSTRAINT subscription_ukey UNIQUE (sub_queue, sub_consumer);


--
-- Name: tick_pkey; Type: CONSTRAINT; Schema: pgq; Owner: pgqueue; Tablespace: 
--

ALTER TABLE ONLY tick
    ADD CONSTRAINT tick_pkey PRIMARY KEY (tick_queue, tick_id);


SET search_path = pgq_ext, pg_catalog;

--
-- Name: completed_batch_pkey; Type: CONSTRAINT; Schema: pgq_ext; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY completed_batch
    ADD CONSTRAINT completed_batch_pkey PRIMARY KEY (consumer_id);


--
-- Name: completed_event_pkey; Type: CONSTRAINT; Schema: pgq_ext; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY completed_event
    ADD CONSTRAINT completed_event_pkey PRIMARY KEY (consumer_id, batch_id, event_id);


--
-- Name: completed_tick_pkey; Type: CONSTRAINT; Schema: pgq_ext; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY completed_tick
    ADD CONSTRAINT completed_tick_pkey PRIMARY KEY (consumer_id);


--
-- Name: partial_batch_pkey; Type: CONSTRAINT; Schema: pgq_ext; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY partial_batch
    ADD CONSTRAINT partial_batch_pkey PRIMARY KEY (consumer_id);


SET search_path = silva_r100_lsu, pg_catalog;

--
-- Name: alignedregion_pkey; Type: CONSTRAINT; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY alignedregion
    ADD CONSTRAINT alignedregion_pkey PRIMARY KEY (start, stop, primaryaccession);


--
-- Name: publication_pkey; Type: CONSTRAINT; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY publication
    ADD CONSTRAINT publication_pkey PRIMARY KEY (_id);


--
-- Name: region_pkey; Type: CONSTRAINT; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY region
    ADD CONSTRAINT region_pkey PRIMARY KEY (start, stop, primaryaccession);


--
-- Name: sequenceentry_pkey; Type: CONSTRAINT; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY sequenceentry
    ADD CONSTRAINT sequenceentry_pkey PRIMARY KEY (primaryaccession);


--
-- Name: straininfo_pkey; Type: CONSTRAINT; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY straininfo
    ADD CONSTRAINT straininfo_pkey PRIMARY KEY (si_accession);


--
-- Name: taxmap_pkey; Type: CONSTRAINT; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_pkey PRIMARY KEY (taxname, path, organismname, primaryaccession);


--
-- Name: taxonomy_pkey; Type: CONSTRAINT; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY taxonomy
    ADD CONSTRAINT taxonomy_pkey PRIMARY KEY (taxname, path);


SET search_path = silva_r100_ssu, pg_catalog;

--
-- Name: alignedregion_pkey; Type: CONSTRAINT; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY alignedregion
    ADD CONSTRAINT alignedregion_pkey PRIMARY KEY (start, stop, primaryaccession);


--
-- Name: publication_pkey; Type: CONSTRAINT; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY publication
    ADD CONSTRAINT publication_pkey PRIMARY KEY (_id);


--
-- Name: region_pkey; Type: CONSTRAINT; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY region
    ADD CONSTRAINT region_pkey PRIMARY KEY (start, stop, primaryaccession);


--
-- Name: sequenceentry_pkey; Type: CONSTRAINT; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY sequenceentry
    ADD CONSTRAINT sequenceentry_pkey PRIMARY KEY (primaryaccession);


--
-- Name: straininfo_pkey; Type: CONSTRAINT; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY straininfo
    ADD CONSTRAINT straininfo_pkey PRIMARY KEY (si_accession);


--
-- Name: taxmap_pkey; Type: CONSTRAINT; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_pkey PRIMARY KEY (taxname, path, organismname, primaryaccession);


--
-- Name: taxonomy_pkey; Type: CONSTRAINT; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY taxonomy
    ADD CONSTRAINT taxonomy_pkey PRIMARY KEY (taxname, path);


SET search_path = silva_r102_lsu, pg_catalog;

--
-- Name: publication_pkey; Type: CONSTRAINT; Schema: silva_r102_lsu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY publication
    ADD CONSTRAINT publication_pkey PRIMARY KEY (_id);


--
-- Name: region_pkey; Type: CONSTRAINT; Schema: silva_r102_lsu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY region
    ADD CONSTRAINT region_pkey PRIMARY KEY (seqent_id, primaryaccession, start, stop);


--
-- Name: sequenceentry_pkey; Type: CONSTRAINT; Schema: silva_r102_lsu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY sequenceentry
    ADD CONSTRAINT sequenceentry_pkey PRIMARY KEY (primaryaccession);


--
-- Name: straininfo_pkey; Type: CONSTRAINT; Schema: silva_r102_lsu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY straininfo
    ADD CONSTRAINT straininfo_pkey PRIMARY KEY (si_accession);


--
-- Name: taxmap_pkey; Type: CONSTRAINT; Schema: silva_r102_lsu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_pkey PRIMARY KEY (node_id, organismname, primaryaccession);


--
-- Name: taxonomy_pkey; Type: CONSTRAINT; Schema: silva_r102_lsu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY taxonomy
    ADD CONSTRAINT taxonomy_pkey PRIMARY KEY (taxname, path);


SET search_path = silva_r102_ssu, pg_catalog;

--
-- Name: publication_pkey; Type: CONSTRAINT; Schema: silva_r102_ssu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY publication
    ADD CONSTRAINT publication_pkey PRIMARY KEY (_id);


--
-- Name: region_pkey; Type: CONSTRAINT; Schema: silva_r102_ssu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY region
    ADD CONSTRAINT region_pkey PRIMARY KEY (primaryaccession, start, stop);


--
-- Name: sequenceentry_pkey; Type: CONSTRAINT; Schema: silva_r102_ssu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY sequenceentry
    ADD CONSTRAINT sequenceentry_pkey PRIMARY KEY (primaryaccession);


--
-- Name: straininfo_pkey; Type: CONSTRAINT; Schema: silva_r102_ssu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY straininfo
    ADD CONSTRAINT straininfo_pkey PRIMARY KEY (primaryaccession);


--
-- Name: taxmap_pkey; Type: CONSTRAINT; Schema: silva_r102_ssu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_pkey PRIMARY KEY (node_id, organismname, primaryaccession);


--
-- Name: taxonomy_pkey; Type: CONSTRAINT; Schema: silva_r102_ssu; Owner: pyilmaz; Tablespace: 
--

ALTER TABLE ONLY taxonomy
    ADD CONSTRAINT taxonomy_pkey PRIMARY KEY (node_id);


SET search_path = silva_r103_lsu, pg_catalog;

--
-- Name: MSA_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY "MSA"
    ADD CONSTRAINT "MSA_pkey" PRIMARY KEY ("msaName");


--
-- Name: Publication_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY "Publication"
    ADD CONSTRAINT "Publication_pkey" PRIMARY KEY (_id);


--
-- Name: Region_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY "Region"
    ADD CONSTRAINT "Region_pkey" PRIMARY KEY ("primaryAccession", stop, start);


--
-- Name: SequenceEntry_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY "SequenceEntry"
    ADD CONSTRAINT "SequenceEntry_pkey" PRIMARY KEY ("primaryAccession");


--
-- Name: accession_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY accession
    ADD CONSTRAINT accession_pkey PRIMARY KEY ("primaryAccession", accession);


--
-- Name: blacklist_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY blacklist
    ADD CONSTRAINT blacklist_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: cluster_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY cluster
    ADD CONSTRAINT cluster_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: genomes_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY genomes
    ADD CONSTRAINT genomes_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: insects_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY insects
    ADD CONSTRAINT insects_pkey PRIMARY KEY (stop, start, "primaryAccession");


--
-- Name: livingtree_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY livingtree
    ADD CONSTRAINT livingtree_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: marine_habitat_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY marine_habitat
    ADD CONSTRAINT marine_habitat_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: observation_blast_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY observation_blast
    ADD CONSTRAINT observation_blast_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: otu_breakdown_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY otu_breakdown
    ADD CONSTRAINT otu_breakdown_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: straininfo_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY straininfo
    ADD CONSTRAINT straininfo_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: task_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY task
    ADD CONSTRAINT task_pkey PRIMARY KEY ("primaryAccession", stop, start);


--
-- Name: tax_breakdown_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY tax_breakdown
    ADD CONSTRAINT tax_breakdown_pkey PRIMARY KEY (sample_site, path);


--
-- Name: taxmap_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_pkey PRIMARY KEY ("primaryAccession", node_id, "organismName");


--
-- Name: taxmap_primaryAccession_key; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT "taxmap_primaryAccession_key" UNIQUE ("primaryAccession", taxname, node_id);


--
-- Name: taxonomy_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY taxonomy
    ADD CONSTRAINT taxonomy_pkey PRIMARY KEY (node_id);


--
-- Name: taxonomy_taxname_key; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY taxonomy
    ADD CONSTRAINT taxonomy_taxname_key UNIQUE (taxname, path);


--
-- Name: whitelist_pkey; Type: CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY whitelist
    ADD CONSTRAINT whitelist_pkey PRIMARY KEY ("primaryAccession", stop, start, name);


SET search_path = silva_r103_ssu, pg_catalog;

--
-- Name: AlignedRegion_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY "AlignedRegion"
    ADD CONSTRAINT "AlignedRegion_pkey" PRIMARY KEY ("primaryAccession", stop, start);


--
-- Name: MSA_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY "MSA"
    ADD CONSTRAINT "MSA_pkey" PRIMARY KEY ("msaName");


--
-- Name: Publication_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY "Publication"
    ADD CONSTRAINT "Publication_pkey" PRIMARY KEY (_id);


--
-- Name: Region_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY "Region"
    ADD CONSTRAINT "Region_pkey" PRIMARY KEY ("primaryAccession", stop, start);


--
-- Name: SequenceEntry_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY "SequenceEntry"
    ADD CONSTRAINT "SequenceEntry_pkey" PRIMARY KEY ("primaryAccession");


--
-- Name: accession_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY accession
    ADD CONSTRAINT accession_pkey PRIMARY KEY ("primaryAccession", accession);


--
-- Name: blacklist_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY blacklist
    ADD CONSTRAINT blacklist_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: cluster_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY cluster
    ADD CONSTRAINT cluster_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: genomes_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY genomes
    ADD CONSTRAINT genomes_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: insects_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY insects
    ADD CONSTRAINT insects_pkey PRIMARY KEY (stop, start, "primaryAccession");


--
-- Name: livingtree_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY livingtree
    ADD CONSTRAINT livingtree_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: marine_habitat_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY marine_habitat
    ADD CONSTRAINT marine_habitat_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: observation_blast_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY observation_blast
    ADD CONSTRAINT observation_blast_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: otu_breakdown_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY otu_breakdown
    ADD CONSTRAINT otu_breakdown_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: straininfo_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY straininfo
    ADD CONSTRAINT straininfo_pkey PRIMARY KEY ("primaryAccession");


--
-- Name: task_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY task
    ADD CONSTRAINT task_pkey PRIMARY KEY ("primaryAccession", stop, start);


--
-- Name: tax_breakdown_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY tax_breakdown
    ADD CONSTRAINT tax_breakdown_pkey PRIMARY KEY (sample_site, path);


--
-- Name: taxmap_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_pkey PRIMARY KEY ("primaryAccession", node_id, "organismName");


--
-- Name: taxmap_primaryAccession_key; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT "taxmap_primaryAccession_key" UNIQUE ("primaryAccession", taxname, node_id);


--
-- Name: taxonomy_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY taxonomy
    ADD CONSTRAINT taxonomy_pkey PRIMARY KEY (node_id);


--
-- Name: taxonomy_taxname_key; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY taxonomy
    ADD CONSTRAINT taxonomy_taxname_key UNIQUE (taxname, path);


--
-- Name: whitelist_pkey; Type: CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse; Tablespace: 
--

ALTER TABLE ONLY whitelist
    ADD CONSTRAINT whitelist_pkey PRIMARY KEY ("primaryAccession", stop, start, name);


SET search_path = stage_r8, pg_catalog;

--
-- Name: camera_read_sample_pkey; Type: CONSTRAINT; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY camera_read_sample
    ADD CONSTRAINT camera_read_sample_pkey PRIMARY KEY (did_code, did, sample_name);


--
-- Name: envogenomes_ba_pkey; Type: CONSTRAINT; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY envogenomes_ba
    ADD CONSTRAINT envogenomes_ba_pkey PRIMARY KEY (goldstamp);


--
-- Name: gold_2010_05_18_pkey; Type: CONSTRAINT; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY gold_2010_05_18
    ADD CONSTRAINT gold_2010_05_18_pkey PRIMARY KEY (goldstamp);


--
-- Name: gold_goldstamp_key; Type: CONSTRAINT; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY gold
    ADD CONSTRAINT gold_goldstamp_key UNIQUE (goldstamp);


--
-- Name: img_map_pkey; Type: CONSTRAINT; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY img_map
    ADD CONSTRAINT img_map_pkey PRIMARY KEY (taxon_oid);


--
-- Name: img_pfam_cats_pkey; Type: CONSTRAINT; Schema: stage_r8; Owner: kbseah; Tablespace: 
--

ALTER TABLE ONLY img_pfam_cats
    ADD CONSTRAINT img_pfam_cats_pkey PRIMARY KEY (pfama_acc, cog, definition, cog_pathway_name);


--
-- Name: img_taxon_pkey; Type: CONSTRAINT; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY img_taxon
    ADD CONSTRAINT img_taxon_pkey PRIMARY KEY (taxon_oid);


--
-- Name: img_taxonomy_pkey; Type: CONSTRAINT; Schema: stage_r8; Owner: pbuttigi; Tablespace: 
--

ALTER TABLE ONLY img_taxonomy
    ADD CONSTRAINT img_taxonomy_pkey PRIMARY KEY (taxon_oid);


--
-- Name: michi_genomes_key; Type: CONSTRAINT; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY michi_genomes
    ADD CONSTRAINT michi_genomes_key UNIQUE (_goldstamp);


--
-- Name: primary; Type: CONSTRAINT; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY marine_phages
    ADD CONSTRAINT "primary" PRIMARY KEY (embl_accn);


--
-- Name: tpommier_ip_pkey; Type: CONSTRAINT; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY tpommier_ip
    ADD CONSTRAINT tpommier_ip_pkey PRIMARY KEY (dataset, _date, depth, latitude, longitude);


--
-- Name: whale_falls_pkey; Type: CONSTRAINT; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY whale_falls
    ADD CONSTRAINT whale_falls_pkey PRIMARY KEY (lat, lon, _depth);


SET search_path = web, pg_catalog;

--
-- Name: silva_100_dnas_pkey; Type: CONSTRAINT; Schema: web; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY silva_100_dnas
    ADD CONSTRAINT silva_100_dnas_pkey PRIMARY KEY (primaryaccession, l, r);


--
-- Name: silva_100_dnas_sid_key; Type: CONSTRAINT; Schema: web; Owner: rkottman; Tablespace: 
--

ALTER TABLE ONLY silva_100_dnas
    ADD CONSTRAINT silva_100_dnas_sid_key UNIQUE (sid);


--
-- Name: silva_pkey; Type: CONSTRAINT; Schema: web; Owner: ikostadi; Tablespace: 
--

ALTER TABLE ONLY silva
    ADD CONSTRAINT silva_pkey PRIMARY KEY (primaryaccession);


SET search_path = web_r8, pg_catalog;

--
-- Name: silva_102_regions_pkey; Type: CONSTRAINT; Schema: web_r8; Owner: ikostadi; Tablespace: 
--

ALTER TABLE ONLY silva_102_regions
    ADD CONSTRAINT silva_102_regions_pkey PRIMARY KEY (primaryaccession, l, r, rna_type);


--
-- Name: silva_102_regions_sid_key; Type: CONSTRAINT; Schema: web_r8; Owner: ikostadi; Tablespace: 
--

ALTER TABLE ONLY silva_102_regions
    ADD CONSTRAINT silva_102_regions_sid_key UNIQUE (sid);


--
-- Name: silva_102_samples_pkey; Type: CONSTRAINT; Schema: web_r8; Owner: ikostadi; Tablespace: 
--

ALTER TABLE ONLY silva_102_samples
    ADD CONSTRAINT silva_102_samples_pkey PRIMARY KEY (geom, depth, datum, dat_res);


--
-- Name: silva_102_samples_sid_key; Type: CONSTRAINT; Schema: web_r8; Owner: ikostadi; Tablespace: 
--

ALTER TABLE ONLY silva_102_samples
    ADD CONSTRAINT silva_102_samples_sid_key UNIQUE (sid);


SET search_path = core, pg_catalog;

--
-- Name: aux_vocabs_lower_term_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE UNIQUE INDEX aux_vocabs_lower_term_idx ON aux_cv USING btree (lower(term));


--
-- Name: blast_hits_id_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE UNIQUE INDEX blast_hits_id_idx ON blast_hits USING btree (id);


--
-- Name: dna_regions_gi_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX dna_regions_gi_idx ON dna_regions USING btree (gi);


--
-- Name: dna_regons_msid_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX dna_regons_msid_idx ON dna_regions USING btree (msid);


--
-- Name: fki_; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX fki_ ON dna_seqs USING btree (did_auth);


--
-- Name: fki_2; Type: INDEX; Schema: core; Owner: core_admin; Tablespace: 
--

CREATE INDEX fki_2 ON pfam_groups USING btree (pfam_23_acc);


--
-- Name: genome_dnas_msid_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX genome_dnas_msid_idx ON genome_dnas USING btree (msid);


--
-- Name: genome_studies_lower_label_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE UNIQUE INDEX genome_studies_lower_label_idx ON genome_studies USING btree (lower(label), lower(isolate_name));


--
-- Name: geo_regions_geom_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE UNIQUE INDEX geo_regions_geom_idx ON geo_regions USING btree (geom);


--
-- Name: iso_abbr_unique_constraint; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE UNIQUE INDEX iso_abbr_unique_constraint ON journals USING btree (iso_abbr) WHERE (NOT (iso_abbr = ''::text));


--
-- Name: isolates_id_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX isolates_id_idx ON isolates USING btree (id);


--
-- Name: isolates_lower_label_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE UNIQUE INDEX isolates_lower_label_idx ON isolates USING btree (lower(label));


--
-- Name: isolates_sid_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX isolates_sid_idx ON isolates USING btree (sid);


--
-- Name: label_idx; Type: INDEX; Schema: core; Owner: core_admin; Tablespace: 
--

CREATE INDEX label_idx ON pfam_groups USING btree (label, pfam_24_acc);


--
-- Name: mg_dnas_did_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX mg_dnas_did_idx ON mg_dnas USING btree (did);


--
-- Name: mg_pooled_dnas_did_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX mg_pooled_dnas_did_idx ON mg_pooled_dnas USING btree (did);


--
-- Name: sample_measures_sid_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX sample_measures_sid_idx ON sample_measures USING btree (sid);


--
-- Name: samples_geom_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX samples_geom_idx ON samples USING gist (geom);


--
-- Name: samples_old_geom_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX samples_old_geom_idx ON samples USING gist (old_geom);


--
-- Name: samples_sid_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX samples_sid_idx ON samples USING btree (sid);


--
-- Name: samplingsite_geom_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX samplingsite_geom_idx ON samplingsites USING gist (geom);


--
-- Name: samplingsite_old_geom_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX samplingsite_old_geom_idx ON samplingsites USING gist (old_geom);


--
-- Name: studies_lower_label_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE UNIQUE INDEX studies_lower_label_idx ON studies USING btree (lower(label));


--
-- Name: tools_lower_label_idx; Type: INDEX; Schema: core; Owner: rkottman; Tablespace: 
--

CREATE INDEX tools_lower_label_idx ON tools USING btree (lower(label));


SET search_path = cv, pg_catalog;

--
-- Name: seq_approaches_key; Type: INDEX; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE UNIQUE INDEX seq_approaches_key ON seq_approaches USING btree (lower(term));


--
-- Name: seq_platforms_key; Type: INDEX; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE UNIQUE INDEX seq_platforms_key ON seq_platforms USING btree (lower(term));


--
-- Name: term_lower_envo_lite_idx; Type: INDEX; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE UNIQUE INDEX term_lower_envo_lite_idx ON envo_lite USING btree (lower(term));


--
-- Name: term_lower_genome_project_status_idx; Type: INDEX; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE UNIQUE INDEX term_lower_genome_project_status_idx ON genome_project_status USING btree (lower(term));


--
-- Name: term_lower_habitat_idx; Type: INDEX; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE INDEX term_lower_habitat_idx ON habitat USING btree (lower(term));


--
-- Name: verification_codes_key; Type: INDEX; Schema: cv; Owner: rkottman; Tablespace: 
--

CREATE UNIQUE INDEX verification_codes_key ON verification_codes USING btree (lower(term));


SET search_path = elayers, pg_catalog;

--
-- Name: boundaries_geom_idx; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX boundaries_geom_idx ON boundaries USING gist (geom);


--
-- Name: chlorophyll_geom_idx; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX chlorophyll_geom_idx ON chlorophyll USING gist (geom);


--
-- Name: chlorophyll_year_season_idx; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX chlorophyll_year_season_idx ON chlorophyll USING btree (season, yr);


--
-- Name: d_s_idx; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX d_s_idx ON woa05_temperature USING btree (season, depth);


--
-- Name: idx_wod05_osd_all; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX idx_wod05_osd_all ON wod05_osd_all USING btree (latitude, longitude, depth);


--
-- Name: longhurst_regions_geom_gist; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX longhurst_regions_geom_gist ON longhurst_regions USING gist (geom);


--
-- Name: nitrate_depth_season_idx; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX nitrate_depth_season_idx ON woa05_nitrate USING btree (season, depth);


--
-- Name: ocean_limits_geom_idx; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX ocean_limits_geom_idx ON ocean_limits USING gist (geom);


--
-- Name: oxygen_dissolved_depth_season_idx; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX oxygen_dissolved_depth_season_idx ON woa05_oxygen_dissolved USING btree (season, depth);


--
-- Name: oxygen_saturation_depth_season_idx; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX oxygen_saturation_depth_season_idx ON woa05_oxygen_saturation USING btree (season, depth);


--
-- Name: oxygen_utilization_depth_season_idx; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX oxygen_utilization_depth_season_idx ON woa05_oxygen_utilization USING btree (season, depth);


--
-- Name: phosphate_depth_season_idx; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX phosphate_depth_season_idx ON woa05_phosphate USING btree (season, depth);


--
-- Name: salinity_depth_season_idx; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX salinity_depth_season_idx ON woa05_salinity USING btree (season, depth);


--
-- Name: silicate_depth_season_idx; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX silicate_depth_season_idx ON woa05_silicate USING btree (season, depth);


--
-- Name: woa05_temperature_geom_idx; Type: INDEX; Schema: elayers; Owner: rkottman; Tablespace: 
--

CREATE INDEX woa05_temperature_geom_idx ON woa05_temperature USING gist (geom);


SET search_path = mfdata, pg_catalog;

--
-- Name: chloro_0000_geom_idx; Type: INDEX; Schema: mfdata; Owner: rkottman; Tablespace: 
--

CREATE INDEX chloro_0000_geom_idx ON chloro_ss_0000_grid USING gist (the_geom);


SET search_path = pgq, pg_catalog;

--
-- Name: event_1_0_txid_idx; Type: INDEX; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE INDEX event_1_0_txid_idx ON event_1_0 USING btree (ev_txid);


--
-- Name: event_1_1_txid_idx; Type: INDEX; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE INDEX event_1_1_txid_idx ON event_1_1 USING btree (ev_txid);


--
-- Name: event_1_2_txid_idx; Type: INDEX; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE INDEX event_1_2_txid_idx ON event_1_2 USING btree (ev_txid);


--
-- Name: rq_retry_idx; Type: INDEX; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE INDEX rq_retry_idx ON retry_queue USING btree (ev_retry_after);


--
-- Name: rq_retry_owner_idx; Type: INDEX; Schema: pgq; Owner: pgqueue; Tablespace: 
--

CREATE INDEX rq_retry_owner_idx ON retry_queue USING btree (ev_owner, ev_id);


SET search_path = silva_r100_lsu, pg_catalog;

--
-- Name: lsu_latlong_idx; Type: INDEX; Schema: silva_r100_lsu; Owner: pyilmaz; Tablespace: 
--

CREATE INDEX lsu_latlong_idx ON sequenceentry USING btree (latlong) WHERE (latlong <> ''::text);


SET search_path = silva_r100_ssu, pg_catalog;

--
-- Name: alignedregion_masname_idx; Type: INDEX; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE INDEX alignedregion_masname_idx ON alignedregion USING btree (msaname);


--
-- Name: region_primaryaccession_idx; Type: INDEX; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE INDEX region_primaryaccession_idx ON region USING btree (primaryaccession);


--
-- Name: ssu_latlong_idx; Type: INDEX; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE INDEX ssu_latlong_idx ON sequenceentry USING btree (latlong) WHERE (latlong <> ''::text);


--
-- Name: test_idx; Type: INDEX; Schema: silva_r100_ssu; Owner: pyilmaz; Tablespace: 
--

CREATE INDEX test_idx ON alignedregion USING btree (bpscore, alignmentquality, msaname);


SET search_path = stage_r8, pg_catalog;

--
-- Name: marine_phages_geom_idx; Type: INDEX; Schema: stage_r8; Owner: rkottman; Tablespace: 
--

CREATE INDEX marine_phages_geom_idx ON marine_phages USING gist (geom);


SET search_path = web, pg_catalog;

--
-- Name: silva_100_dnas_coldate_idx; Type: INDEX; Schema: web; Owner: rkottman; Tablespace: 
--

CREATE INDEX silva_100_dnas_coldate_idx ON silva_100_dnas USING btree (collectiondate);


--
-- Name: silva_100_dnas_geom_idx; Type: INDEX; Schema: web; Owner: rkottman; Tablespace: 
--

CREATE INDEX silva_100_dnas_geom_idx ON silva_100_dnas USING gist (geom);


--
-- Name: silva_100_dnas_latlong_idx; Type: INDEX; Schema: web; Owner: rkottman; Tablespace: 
--

CREATE INDEX silva_100_dnas_latlong_idx ON silva_100_dnas USING btree (latlong);


--
-- Name: silva_100_dnas_rny_type_idx; Type: INDEX; Schema: web; Owner: rkottman; Tablespace: 
--

CREATE INDEX silva_100_dnas_rny_type_idx ON silva_100_dnas USING btree (rna_type);


--
-- Name: silva_100_samples_geom_idx; Type: INDEX; Schema: web; Owner: rkottman; Tablespace: 
--

CREATE INDEX silva_100_samples_geom_idx ON silva_100_samples USING gist (geom);


SET search_path = web_r8, pg_catalog;

--
-- Name: silva_102_regions_coldate_idx; Type: INDEX; Schema: web_r8; Owner: ikostadi; Tablespace: 
--

CREATE INDEX silva_102_regions_coldate_idx ON silva_102_regions USING btree (collectiondate);


--
-- Name: silva_102_regions_geom_idx; Type: INDEX; Schema: web_r8; Owner: ikostadi; Tablespace: 
--

CREATE INDEX silva_102_regions_geom_idx ON silva_102_regions USING gist (geom);


--
-- Name: silva_102_regions_latlong_idx; Type: INDEX; Schema: web_r8; Owner: ikostadi; Tablespace: 
--

CREATE INDEX silva_102_regions_latlong_idx ON silva_102_regions USING btree (latlong);


--
-- Name: silva_102_regions_rna_type_idx; Type: INDEX; Schema: web_r8; Owner: ikostadi; Tablespace: 
--

CREATE INDEX silva_102_regions_rna_type_idx ON silva_102_regions USING btree (rna_type);


--
-- Name: silva_102_regions_sample_id_idx; Type: INDEX; Schema: web_r8; Owner: ikostadi; Tablespace: 
--

CREATE INDEX silva_102_regions_sample_id_idx ON silva_102_regions USING btree (sample_id);


--
-- Name: silva_102_samples_geom_idx; Type: INDEX; Schema: web_r8; Owner: ikostadi; Tablespace: 
--

CREATE INDEX silva_102_samples_geom_idx ON silva_102_samples USING gist (geom);


--
-- Name: silva_102_samples_sid_idx; Type: INDEX; Schema: web_r8; Owner: ikostadi; Tablespace: 
--

CREATE INDEX silva_102_samples_sid_idx ON silva_102_samples USING btree (sid);


--
-- Name: i_tools; Type: RULE; Schema: web_r8; Owner: rkottman
--

CREATE RULE i_tools AS ON INSERT TO tools DO INSTEAD INSERT INTO core.tools (label, descr, url, cat, remark) VALUES (new.label, new.descr, new.url, new.cat, new.remark);


SET search_path = core, pg_catalog;

--
-- Name: aa_samples_b_trg; Type: TRIGGER; Schema: core; Owner: rkottman
--

CREATE TRIGGER aa_samples_b_trg BEFORE INSERT OR UPDATE ON samples FOR EACH ROW EXECUTE PROCEDURE samples_b_trg();


--
-- Name: az_isolates_b_trg; Type: TRIGGER; Schema: core; Owner: rkottman
--

CREATE TRIGGER az_isolates_b_trg BEFORE INSERT OR UPDATE ON isolates FOR EACH ROW EXECUTE PROCEDURE isolates_b_trg();


--
-- Name: bi_dna_id_maps; Type: TRIGGER; Schema: core; Owner: rkottman
--

CREATE TRIGGER bi_dna_id_maps BEFORE INSERT ON dna_id_maps FOR EACH ROW EXECUTE PROCEDURE id_maps_tf();


--
-- Name: bi_dna_seqs; Type: TRIGGER; Schema: core; Owner: rkottman
--

CREATE TRIGGER bi_dna_seqs BEFORE INSERT ON dna_seqs FOR EACH ROW EXECUTE PROCEDURE dna_id_check();


--
-- Name: blast_result_timestamp; Type: TRIGGER; Schema: core; Owner: ikostadi
--

CREATE TRIGGER blast_result_timestamp BEFORE UPDATE ON blast_run FOR EACH ROW EXECUTE PROCEDURE update_date_finished();


--
-- Name: i_to_queue; Type: TRIGGER; Schema: core; Owner: ikostadi
--

CREATE TRIGGER i_to_queue AFTER INSERT ON blast_run FOR EACH ROW EXECUTE PROCEDURE pgq.logutriga('blastqueue', 'ignore=seq');


--
-- Name: project_clonelibs_pk; Type: TRIGGER; Schema: core; Owner: rkottman
--

CREATE TRIGGER project_clonelibs_pk BEFORE INSERT ON clonelibs FOR EACH ROW EXECUTE PROCEDURE set_samples_pk();


--
-- Name: project_isolates_pk; Type: TRIGGER; Schema: core; Owner: rkottman
--

CREATE TRIGGER project_isolates_pk BEFORE INSERT ON isolates FOR EACH ROW EXECUTE PROCEDURE set_samples_pk();


--
-- Name: project_samples_pk; Type: TRIGGER; Schema: core; Owner: rkottman
--

CREATE TRIGGER project_samples_pk BEFORE INSERT ON samples FOR EACH ROW EXECUTE PROCEDURE set_samples_pk();


SET search_path = stage_r8, pg_catalog;

--
-- Name: aa_marine_phages_iu_trg; Type: TRIGGER; Schema: stage_r8; Owner: rkottman
--

CREATE TRIGGER aa_marine_phages_iu_trg BEFORE INSERT OR UPDATE ON marine_phages FOR EACH ROW EXECUTE PROCEDURE update_marine_phages();


SET search_path = core, pg_catalog;

--
-- Name: annotation_annotatorid_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY annotation
    ADD CONSTRAINT annotation_annotatorid_fkey FOREIGN KEY (annotatorid) REFERENCES annotator(gid);


--
-- Name: articles_id_code_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY articles
    ADD CONSTRAINT articles_id_code_fkey FOREIGN KEY (id_code) REFERENCES id_codes(code) ON UPDATE CASCADE;


--
-- Name: articles_journalid_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY articles
    ADD CONSTRAINT articles_journalid_fkey FOREIGN KEY (journalid) REFERENCES journals(gid) ON DELETE RESTRICT;


--
-- Name: assignments_person_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY assignments
    ADD CONSTRAINT assignments_person_fkey FOREIGN KEY (person, role) REFERENCES person_roles(person, role);


--
-- Name: assignments_project_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY assignments
    ADD CONSTRAINT assignments_project_fkey FOREIGN KEY (project) REFERENCES projects(id);


--
-- Name: authorlists_article_id_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY authorlists
    ADD CONSTRAINT authorlists_article_id_fkey FOREIGN KEY (article_id, article_id_code) REFERENCES articles(id, id_code) ON UPDATE CASCADE;


--
-- Name: authorlists_first_name_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY authorlists
    ADD CONSTRAINT authorlists_first_name_fkey FOREIGN KEY (first_name, initials, last_name, sex) REFERENCES authors(first_name, initials, last_name, sex) ON UPDATE CASCADE;


--
-- Name: blast_run_label_fkey; Type: FK CONSTRAINT; Schema: core; Owner: ikostadi
--

ALTER TABLE ONLY blast_run
    ADD CONSTRAINT blast_run_label_fkey FOREIGN KEY (tool_label, tool_ver) REFERENCES tool_versions(label, ver);


--
-- Name: clonelib_dnas_did_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY clonelib_dnas
    ADD CONSTRAINT clonelib_dnas_did_fkey FOREIGN KEY (did, did_code) REFERENCES dna_seqs(did, did_auth);


--
-- Name: clonelibs_own_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY clonelibs
    ADD CONSTRAINT clonelibs_own_fkey FOREIGN KEY (own) REFERENCES logins(logname) ON UPDATE CASCADE;


--
-- Name: clonelibs_project_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY clonelibs
    ADD CONSTRAINT clonelibs_project_fkey FOREIGN KEY (project) REFERENCES projects(id);


--
-- Name: clonelibs_study_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY clonelibs
    ADD CONSTRAINT clonelibs_study_fkey FOREIGN KEY (study, sample_name) REFERENCES samples(study, label);


--
-- Name: clones_study_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY clones
    ADD CONSTRAINT clones_study_fkey FOREIGN KEY (study, lib_name) REFERENCES clonelibs(study, label);


--
-- Name: data_sources_maintainer_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY data_sources
    ADD CONSTRAINT data_sources_maintainer_fkey FOREIGN KEY (maintainer) REFERENCES logins(logname);


--
-- Name: dna_id_maps_pid_type_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY dna_id_maps
    ADD CONSTRAINT dna_id_maps_pid_type_fkey FOREIGN KEY (pid_type) REFERENCES id_codes(code);


--
-- Name: dna_id_maps_sid_type_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY dna_id_maps
    ADD CONSTRAINT dna_id_maps_sid_type_fkey FOREIGN KEY (sid_type) REFERENCES id_codes(code);


--
-- Name: dna_regions_rid_auth_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY dna_regions
    ADD CONSTRAINT dna_regions_rid_auth_fkey FOREIGN KEY (rid_type) REFERENCES id_codes(code) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: dna_seqs_assembly_status_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY dna_seqs
    ADD CONSTRAINT dna_seqs_assembly_status_fkey FOREIGN KEY (assembly_status) REFERENCES cv.assembly_status(term) ON UPDATE CASCADE;


--
-- Name: dna_seqs_id_auth_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY dna_seqs
    ADD CONSTRAINT dna_seqs_id_auth_fkey FOREIGN KEY (did_auth) REFERENCES id_codes(code) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: dna_seqs_own_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY dna_seqs
    ADD CONSTRAINT dna_seqs_own_fkey FOREIGN KEY (own) REFERENCES logins(logname);


--
-- Name: dna_seqs_project_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY dna_seqs
    ADD CONSTRAINT dna_seqs_project_fkey FOREIGN KEY (project) REFERENCES projects(id);


--
-- Name: dna_seqs_seq_method_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY dna_seqs
    ADD CONSTRAINT dna_seqs_seq_method_fkey FOREIGN KEY (seq_method) REFERENCES cv.seq_methods(term);


--
-- Name: dna_sets_did_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY dna_sets
    ADD CONSTRAINT dna_sets_did_fkey FOREIGN KEY (did, did_auth) REFERENCES dna_seqs(did, did_auth) ON UPDATE CASCADE;


--
-- Name: dna_sets_label_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY dna_sets
    ADD CONSTRAINT dna_sets_label_fkey FOREIGN KEY (label) REFERENCES dna_set_mdata(label);


--
-- Name: genome_dnas_assembly_tool_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY genome_dnas
    ADD CONSTRAINT genome_dnas_assembly_tool_fkey FOREIGN KEY (assembly_tool, assembly_tool_version) REFERENCES tool_versions(label, ver);


--
-- Name: genome_dnas_did_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY genome_dnas
    ADD CONSTRAINT genome_dnas_did_fkey FOREIGN KEY (did, did_auth) REFERENCES dna_seqs(did, did_auth) ON UPDATE CASCADE;


--
-- Name: genome_dnas_genome_material_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY genome_dnas
    ADD CONSTRAINT genome_dnas_genome_material_fkey FOREIGN KEY (genome_material) REFERENCES cv.genome_materials(term) ON UPDATE CASCADE;


--
-- Name: genome_dnas_seq_approach_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY genome_dnas
    ADD CONSTRAINT genome_dnas_seq_approach_fkey FOREIGN KEY (seq_approach) REFERENCES cv.seq_approaches(term) ON UPDATE CASCADE;


--
-- Name: genome_dnas_seq_method_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY genome_dnas
    ADD CONSTRAINT genome_dnas_seq_method_fkey FOREIGN KEY (seq_method) REFERENCES cv.seq_methods(term) ON UPDATE CASCADE;


--
-- Name: genome_dnas_seq_platform_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY genome_dnas
    ADD CONSTRAINT genome_dnas_seq_platform_fkey FOREIGN KEY (seq_platform) REFERENCES cv.seq_platforms(term) ON UPDATE CASCADE;


--
-- Name: genome_dnas_study_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY genome_dnas
    ADD CONSTRAINT genome_dnas_study_fkey FOREIGN KEY (study, isolate_name) REFERENCES genome_studies(label, isolate_name) ON UPDATE CASCADE;


--
-- Name: genome_studies_isolate_name_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY genome_studies
    ADD CONSTRAINT genome_studies_isolate_name_fkey FOREIGN KEY (isolate_name) REFERENCES isolates(label) ON UPDATE CASCADE;


--
-- Name: genome_studies_project_status_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY genome_studies
    ADD CONSTRAINT genome_studies_project_status_fkey FOREIGN KEY (status) REFERENCES cv.genome_project_status(term) ON UPDATE CASCADE;


--
-- Name: geo_regions_loc_estim_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY geo_regions
    ADD CONSTRAINT geo_regions_loc_estim_fkey FOREIGN KEY (loc_estim) REFERENCES cv.estim_codes(term) ON UPDATE CASCADE;


--
-- Name: isolates_biotic_relationship_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY isolates
    ADD CONSTRAINT isolates_biotic_relationship_fkey FOREIGN KEY (biotic_relationship) REFERENCES cv.biotic_relationship(term);


--
-- Name: isolates_own_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY isolates
    ADD CONSTRAINT isolates_own_fkey FOREIGN KEY (own) REFERENCES logins(logname);


--
-- Name: isolates_project_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY isolates
    ADD CONSTRAINT isolates_project_fkey FOREIGN KEY (project) REFERENCES projects(id);


--
-- Name: isolates_study_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY isolates
    ADD CONSTRAINT isolates_study_fkey FOREIGN KEY (study, sample_name) REFERENCES samples(study, label) ON UPDATE CASCADE;


--
-- Name: mg_dnas_study_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY mg_dnas
    ADD CONSTRAINT mg_dnas_study_fkey FOREIGN KEY (study, sample_name) REFERENCES samples(study, label) ON UPDATE CASCADE;


--
-- Name: mg_pooled_dnas_did_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY mg_pooled_dnas
    ADD CONSTRAINT mg_pooled_dnas_did_fkey FOREIGN KEY (did, did_code) REFERENCES dna_seqs(did, did_auth);


--
-- Name: mg_pooled_dnas_study_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY mg_pooled_dnas
    ADD CONSTRAINT mg_pooled_dnas_study_fkey FOREIGN KEY (study, pool_label) REFERENCES sample_pools(study, label);


--
-- Name: mg_pooled_samples_study_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY mg_pooled_samples
    ADD CONSTRAINT mg_pooled_samples_study_fkey FOREIGN KEY (study, sample_label) REFERENCES samples(study, label);


--
-- Name: mg_pooled_samples_study_fkey1; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY mg_pooled_samples
    ADD CONSTRAINT mg_pooled_samples_study_fkey1 FOREIGN KEY (study, pool_label) REFERENCES sample_pools(study, label);


--
-- Name: mg_studies_study_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY mg_studies
    ADD CONSTRAINT mg_studies_study_fkey FOREIGN KEY (study) REFERENCES studies(label);


--
-- Name: multiregion_members_regions_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY multiregion_members
    ADD CONSTRAINT multiregion_members_regions_fkey FOREIGN KEY (did, did_auth, lpos, rpos, strand, rfeature) REFERENCES seq_regions(did, did_auth, lpos, rpos, strand, feature) ON UPDATE CASCADE;


--
-- Name: multiregions_feature_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY multiregions
    ADD CONSTRAINT multiregions_feature_fkey FOREIGN KEY (feature) REFERENCES cv.insdc_features(term);


--
-- Name: multiregions_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY multiregion_members
    ADD CONSTRAINT multiregions_fkey FOREIGN KEY (label, span_lpos, span_rpos, mfeature) REFERENCES multiregions(label, span_lpos, span_rpos, feature) ON UPDATE CASCADE;


--
-- Name: ncbi_tax_names_tax_id_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY ncbi_tax_names
    ADD CONSTRAINT ncbi_tax_names_tax_id_fkey FOREIGN KEY (tax_id) REFERENCES ncbi_tax_nodes(tax_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: parameter_fk; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY sample_measures
    ADD CONSTRAINT parameter_fk FOREIGN KEY (param, unit) REFERENCES cv.parameters(label, unit) ON UPDATE CASCADE;


--
-- Name: person_roles_person_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY person_roles
    ADD CONSTRAINT person_roles_person_fkey FOREIGN KEY (person) REFERENCES logins(logname);


--
-- Name: person_roles_role_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY person_roles
    ADD CONSTRAINT person_roles_role_fkey FOREIGN KEY (role) REFERENCES roles(label);


--
-- Name: pfam_23_fk; Type: FK CONSTRAINT; Schema: core; Owner: core_admin
--

ALTER TABLE ONLY pfam_groups
    ADD CONSTRAINT pfam_23_fk FOREIGN KEY (pfam_23_acc) REFERENCES pfam_23.pfama(pfama_acc);


--
-- Name: pfam_groups_label_fkey; Type: FK CONSTRAINT; Schema: core; Owner: core_admin
--

ALTER TABLE ONLY pfam_groups
    ADD CONSTRAINT pfam_groups_label_fkey FOREIGN KEY (label) REFERENCES pfam_group_descr(label) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: pfam_groups_pfam_23_acc_fkey; Type: FK CONSTRAINT; Schema: core; Owner: core_admin
--

ALTER TABLE ONLY pfam_groups
    ADD CONSTRAINT pfam_groups_pfam_23_acc_fkey FOREIGN KEY (pfam_23_acc) REFERENCES pfam_23.pfama(pfama_acc) MATCH FULL;


--
-- Name: pfam_groups_pfam_24_acc_fkey; Type: FK CONSTRAINT; Schema: core; Owner: core_admin
--

ALTER TABLE ONLY pfam_groups
    ADD CONSTRAINT pfam_groups_pfam_24_acc_fkey FOREIGN KEY (pfam_24_acc) REFERENCES pfam_24.pfama(pfama_acc);


--
-- Name: role_links_has_role_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY role_links
    ADD CONSTRAINT role_links_has_role_fkey FOREIGN KEY (has_role) REFERENCES roles(label);


--
-- Name: role_links_role_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY role_links
    ADD CONSTRAINT role_links_role_fkey FOREIGN KEY (role_label) REFERENCES roles(label);


--
-- Name: role_privs_privil_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY role_privs
    ADD CONSTRAINT role_privs_privil_fkey FOREIGN KEY (privil) REFERENCES privs(label);


--
-- Name: role_privs_role_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY role_privs
    ADD CONSTRAINT role_privs_role_fkey FOREIGN KEY (role_label) REFERENCES roles(label);


--
-- Name: sample_measures_material_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY sample_measures
    ADD CONSTRAINT sample_measures_material_fkey FOREIGN KEY (material) REFERENCES cv.sample_materials(term) ON UPDATE CASCADE;


--
-- Name: sample_measures_mcode_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY sample_measures
    ADD CONSTRAINT sample_measures_mcode_fkey FOREIGN KEY (mcode) REFERENCES cv.mcodes(term) ON UPDATE CASCADE;


--
-- Name: sample_measures_own_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY sample_measures
    ADD CONSTRAINT sample_measures_own_fkey FOREIGN KEY (own) REFERENCES logins(logname);


--
-- Name: sample_measures_project_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY sample_measures
    ADD CONSTRAINT sample_measures_project_fkey FOREIGN KEY (project) REFERENCES projects(id);


--
-- Name: sample_measures_study_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY sample_measures
    ADD CONSTRAINT sample_measures_study_fkey FOREIGN KEY (study, sample_name) REFERENCES samples(study, label) ON UPDATE CASCADE;


--
-- Name: sample_set_mdata_own_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY sample_set_mdata
    ADD CONSTRAINT sample_set_mdata_own_fkey FOREIGN KEY (own) REFERENCES logins(logname);


--
-- Name: sample_set_mdata_project_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY sample_set_mdata
    ADD CONSTRAINT sample_set_mdata_project_fkey FOREIGN KEY (project) REFERENCES projects(id);


--
-- Name: sample_sets_label_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY sample_sets
    ADD CONSTRAINT sample_sets_label_fkey FOREIGN KEY (label) REFERENCES sample_set_mdata(label) ON UPDATE CASCADE;


--
-- Name: sample_sets_study_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY sample_sets
    ADD CONSTRAINT sample_sets_study_fkey FOREIGN KEY (study, sample_name) REFERENCES samples(study, label) ON UPDATE CASCADE;


--
-- Name: samples_geom_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT samples_geom_fkey FOREIGN KEY (geom, max_uncertain) REFERENCES samplingsites(geom, max_uncertain);


--
-- Name: samples_hab_lite_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT samples_hab_lite_fkey FOREIGN KEY (hab_lite) REFERENCES cv.envo_lite(term) ON UPDATE CASCADE;


--
-- Name: samples_habitat_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT samples_habitat_fkey FOREIGN KEY (habitat) REFERENCES cv.habitat(term) ON UPDATE CASCADE;


--
-- Name: samples_material_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT samples_material_fkey FOREIGN KEY (material) REFERENCES cv.sample_materials(term);


--
-- Name: samples_own_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY aux_project
    ADD CONSTRAINT samples_own_fkey FOREIGN KEY (own) REFERENCES logins(logname) ON UPDATE CASCADE;


--
-- Name: samples_own_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT samples_own_fkey FOREIGN KEY (own) REFERENCES logins(logname);


--
-- Name: samples_project_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY aux_project
    ADD CONSTRAINT samples_project_fkey FOREIGN KEY (project) REFERENCES projects(id);


--
-- Name: samples_project_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT samples_project_fkey FOREIGN KEY (project) REFERENCES projects(id);


--
-- Name: samples_study_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY samples
    ADD CONSTRAINT samples_study_fkey FOREIGN KEY (study) REFERENCES studies(label) ON UPDATE CASCADE;


--
-- Name: samplingsites_georef_by_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY samplingsites
    ADD CONSTRAINT samplingsites_georef_by_fkey FOREIGN KEY (georef_by) REFERENCES logins(logname);


--
-- Name: samplingsites_loc_estim_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY samplingsites
    ADD CONSTRAINT samplingsites_loc_estim_fkey FOREIGN KEY (loc_estim) REFERENCES cv.estim_codes(term) ON UPDATE CASCADE;


--
-- Name: samplingsites_own_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY samplingsites
    ADD CONSTRAINT samplingsites_own_fkey FOREIGN KEY (own) REFERENCES logins(logname);


--
-- Name: samplingsites_project_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY samplingsites
    ADD CONSTRAINT samplingsites_project_fkey FOREIGN KEY (project) REFERENCES projects(id);


--
-- Name: samplingsites_region_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY samplingsites
    ADD CONSTRAINT samplingsites_region_fkey FOREIGN KEY (region) REFERENCES geo_regions(label) ON UPDATE CASCADE;


--
-- Name: samplingsites_verification_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY samplingsites
    ADD CONSTRAINT samplingsites_verification_fkey FOREIGN KEY (verification) REFERENCES cv.verification_codes(term);


--
-- Name: seq_regions_feature_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY seq_regions
    ADD CONSTRAINT seq_regions_feature_fkey FOREIGN KEY (feature) REFERENCES cv.insdc_features(term);


--
-- Name: seq_regions_rid_auth_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY seq_regions
    ADD CONSTRAINT seq_regions_rid_auth_fkey FOREIGN KEY (rid_type) REFERENCES id_codes(code) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: tool_dna_runs_who_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY tool_dna_runs
    ADD CONSTRAINT tool_dna_runs_who_fkey FOREIGN KEY (who) REFERENCES logins(logname);


--
-- Name: tool_run_label_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY tool_dna_runs
    ADD CONSTRAINT tool_run_label_fkey FOREIGN KEY (label, ver) REFERENCES tool_versions(label, ver);


--
-- Name: tool_run_seq_set_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY tool_dna_runs
    ADD CONSTRAINT tool_run_seq_set_fkey FOREIGN KEY (seq_set) REFERENCES dna_set_mdata(label);


--
-- Name: tool_versions_label_fkey; Type: FK CONSTRAINT; Schema: core; Owner: rkottman
--

ALTER TABLE ONLY tool_versions
    ADD CONSTRAINT tool_versions_label_fkey FOREIGN KEY (label) REFERENCES tools(label);


SET search_path = elayers, pg_catalog;

--
-- Name: chlorophyll_season_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY chlorophyll
    ADD CONSTRAINT chlorophyll_season_fkey FOREIGN KEY (season) REFERENCES mfdata.seasons(code) ON UPDATE CASCADE ON DELETE RESTRICT;


--
-- Name: temperature_depth_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_temperature
    ADD CONSTRAINT temperature_depth_fkey FOREIGN KEY (depth) REFERENCES standard_levels(depth);


--
-- Name: woa05_nitrate_depth_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_nitrate
    ADD CONSTRAINT woa05_nitrate_depth_fkey FOREIGN KEY (depth) REFERENCES standard_levels(depth);


--
-- Name: woa05_nitrate_season_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_nitrate
    ADD CONSTRAINT woa05_nitrate_season_fkey FOREIGN KEY (season) REFERENCES seasons(code);


--
-- Name: woa05_oxygen_dissolved_depth_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_oxygen_dissolved
    ADD CONSTRAINT woa05_oxygen_dissolved_depth_fkey FOREIGN KEY (depth) REFERENCES standard_levels(depth);


--
-- Name: woa05_oxygen_dissolved_season_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_oxygen_dissolved
    ADD CONSTRAINT woa05_oxygen_dissolved_season_fkey FOREIGN KEY (season) REFERENCES seasons(code);


--
-- Name: woa05_oxygen_saturation_depth_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_oxygen_saturation
    ADD CONSTRAINT woa05_oxygen_saturation_depth_fkey FOREIGN KEY (depth) REFERENCES standard_levels(depth);


--
-- Name: woa05_oxygen_saturation_season_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_oxygen_saturation
    ADD CONSTRAINT woa05_oxygen_saturation_season_fkey FOREIGN KEY (season) REFERENCES seasons(code);


--
-- Name: woa05_oxygen_utilization_depth_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_oxygen_utilization
    ADD CONSTRAINT woa05_oxygen_utilization_depth_fkey FOREIGN KEY (depth) REFERENCES standard_levels(depth);


--
-- Name: woa05_oxygen_utilization_season_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_oxygen_utilization
    ADD CONSTRAINT woa05_oxygen_utilization_season_fkey FOREIGN KEY (season) REFERENCES seasons(code);


--
-- Name: woa05_phosphate_depth_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_phosphate
    ADD CONSTRAINT woa05_phosphate_depth_fkey FOREIGN KEY (depth) REFERENCES standard_levels(depth);


--
-- Name: woa05_phosphate_season_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_phosphate
    ADD CONSTRAINT woa05_phosphate_season_fkey FOREIGN KEY (season) REFERENCES seasons(code);


--
-- Name: woa05_salinity_depth_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_salinity
    ADD CONSTRAINT woa05_salinity_depth_fkey FOREIGN KEY (depth) REFERENCES standard_levels(depth);


--
-- Name: woa05_salinity_season_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_salinity
    ADD CONSTRAINT woa05_salinity_season_fkey FOREIGN KEY (season) REFERENCES seasons(code);


--
-- Name: woa05_silicate_depth_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_silicate
    ADD CONSTRAINT woa05_silicate_depth_fkey FOREIGN KEY (depth) REFERENCES standard_levels(depth);


--
-- Name: woa05_silicate_season_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_silicate
    ADD CONSTRAINT woa05_silicate_season_fkey FOREIGN KEY (season) REFERENCES seasons(code);


--
-- Name: woa05_temperature_season_fkey; Type: FK CONSTRAINT; Schema: elayers; Owner: rkottman
--

ALTER TABLE ONLY woa05_temperature
    ADD CONSTRAINT woa05_temperature_season_fkey FOREIGN KEY (season) REFERENCES seasons(code);


SET search_path = pgq, pg_catalog;

--
-- Name: fq_owner_fkey; Type: FK CONSTRAINT; Schema: pgq; Owner: pgqueue
--

ALTER TABLE ONLY failed_queue
    ADD CONSTRAINT fq_owner_fkey FOREIGN KEY (ev_owner) REFERENCES subscription(sub_id);


--
-- Name: rq_owner_fkey; Type: FK CONSTRAINT; Schema: pgq; Owner: pgqueue
--

ALTER TABLE ONLY retry_queue
    ADD CONSTRAINT rq_owner_fkey FOREIGN KEY (ev_owner) REFERENCES subscription(sub_id);


--
-- Name: sub_consumer_fkey; Type: FK CONSTRAINT; Schema: pgq; Owner: pgqueue
--

ALTER TABLE ONLY subscription
    ADD CONSTRAINT sub_consumer_fkey FOREIGN KEY (sub_consumer) REFERENCES consumer(co_id);


--
-- Name: sub_queue_fkey; Type: FK CONSTRAINT; Schema: pgq; Owner: pgqueue
--

ALTER TABLE ONLY subscription
    ADD CONSTRAINT sub_queue_fkey FOREIGN KEY (sub_queue) REFERENCES queue(queue_id);


--
-- Name: tick_queue_fkey; Type: FK CONSTRAINT; Schema: pgq; Owner: pgqueue
--

ALTER TABLE ONLY tick
    ADD CONSTRAINT tick_queue_fkey FOREIGN KEY (tick_queue) REFERENCES queue(queue_id);


SET search_path = silva_r100_lsu, pg_catalog;

--
-- Name: alignedregion_start_fkey; Type: FK CONSTRAINT; Schema: silva_r100_lsu; Owner: pyilmaz
--

ALTER TABLE ONLY alignedregion
    ADD CONSTRAINT alignedregion_start_fkey FOREIGN KEY (start, stop, primaryaccession) REFERENCES region(start, stop, primaryaccession) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: publication_primaryaccession_fkey; Type: FK CONSTRAINT; Schema: silva_r100_lsu; Owner: pyilmaz
--

ALTER TABLE ONLY publication
    ADD CONSTRAINT publication_primaryaccession_fkey FOREIGN KEY (primaryaccession) REFERENCES sequenceentry(primaryaccession) ON DELETE CASCADE;


--
-- Name: region_primaryaccession_fkey; Type: FK CONSTRAINT; Schema: silva_r100_lsu; Owner: pyilmaz
--

ALTER TABLE ONLY region
    ADD CONSTRAINT region_primaryaccession_fkey FOREIGN KEY (primaryaccession) REFERENCES sequenceentry(primaryaccession) ON DELETE CASCADE;


--
-- Name: taxmap_primaryaccession_fkey; Type: FK CONSTRAINT; Schema: silva_r100_lsu; Owner: pyilmaz
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_primaryaccession_fkey FOREIGN KEY (primaryaccession) REFERENCES sequenceentry(primaryaccession) ON DELETE CASCADE;


--
-- Name: taxmap_taxname_fkey; Type: FK CONSTRAINT; Schema: silva_r100_lsu; Owner: pyilmaz
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_taxname_fkey FOREIGN KEY (taxname, path) REFERENCES taxonomy(taxname, path) ON DELETE CASCADE;


SET search_path = silva_r100_ssu, pg_catalog;

--
-- Name: alignedregion_start_fkey; Type: FK CONSTRAINT; Schema: silva_r100_ssu; Owner: pyilmaz
--

ALTER TABLE ONLY alignedregion
    ADD CONSTRAINT alignedregion_start_fkey FOREIGN KEY (start, stop, primaryaccession) REFERENCES region(start, stop, primaryaccession) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: publication_primaryaccession_fkey; Type: FK CONSTRAINT; Schema: silva_r100_ssu; Owner: pyilmaz
--

ALTER TABLE ONLY publication
    ADD CONSTRAINT publication_primaryaccession_fkey FOREIGN KEY (primaryaccession) REFERENCES sequenceentry(primaryaccession) ON DELETE CASCADE;


--
-- Name: region_primaryaccession_fkey; Type: FK CONSTRAINT; Schema: silva_r100_ssu; Owner: pyilmaz
--

ALTER TABLE ONLY region
    ADD CONSTRAINT region_primaryaccession_fkey FOREIGN KEY (primaryaccession) REFERENCES sequenceentry(primaryaccession) ON DELETE CASCADE;


--
-- Name: taxmap_primaryaccession_fkey; Type: FK CONSTRAINT; Schema: silva_r100_ssu; Owner: pyilmaz
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_primaryaccession_fkey FOREIGN KEY (primaryaccession) REFERENCES sequenceentry(primaryaccession) ON DELETE CASCADE;


--
-- Name: taxmap_taxname_fkey; Type: FK CONSTRAINT; Schema: silva_r100_ssu; Owner: pyilmaz
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_taxname_fkey FOREIGN KEY (taxname, path) REFERENCES taxonomy(taxname, path) ON DELETE CASCADE;


SET search_path = silva_r102_lsu, pg_catalog;

--
-- Name: publication_primaryaccession_fkey; Type: FK CONSTRAINT; Schema: silva_r102_lsu; Owner: pyilmaz
--

ALTER TABLE ONLY publication
    ADD CONSTRAINT publication_primaryaccession_fkey FOREIGN KEY (primaryaccession) REFERENCES sequenceentry(primaryaccession) ON DELETE CASCADE;


--
-- Name: region_primaryaccession_fkey; Type: FK CONSTRAINT; Schema: silva_r102_lsu; Owner: pyilmaz
--

ALTER TABLE ONLY region
    ADD CONSTRAINT region_primaryaccession_fkey FOREIGN KEY (primaryaccession) REFERENCES sequenceentry(primaryaccession) ON DELETE CASCADE;


--
-- Name: taxmap_primaryaccession_fkey; Type: FK CONSTRAINT; Schema: silva_r102_lsu; Owner: pyilmaz
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_primaryaccession_fkey FOREIGN KEY (primaryaccession) REFERENCES sequenceentry(primaryaccession) ON DELETE CASCADE;


--
-- Name: taxmap_taxname_fkey; Type: FK CONSTRAINT; Schema: silva_r102_lsu; Owner: pyilmaz
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_taxname_fkey FOREIGN KEY (taxname, path) REFERENCES taxonomy(taxname, path) ON DELETE CASCADE;


SET search_path = silva_r102_ssu, pg_catalog;

--
-- Name: publication_primaryaccession_fkey; Type: FK CONSTRAINT; Schema: silva_r102_ssu; Owner: pyilmaz
--

ALTER TABLE ONLY publication
    ADD CONSTRAINT publication_primaryaccession_fkey FOREIGN KEY (primaryaccession) REFERENCES sequenceentry(primaryaccession) ON DELETE CASCADE;


--
-- Name: region_primaryaccession_fkey; Type: FK CONSTRAINT; Schema: silva_r102_ssu; Owner: pyilmaz
--

ALTER TABLE ONLY region
    ADD CONSTRAINT region_primaryaccession_fkey FOREIGN KEY (primaryaccession) REFERENCES sequenceentry(primaryaccession) ON DELETE CASCADE;


--
-- Name: taxmap_node_id_fkey; Type: FK CONSTRAINT; Schema: silva_r102_ssu; Owner: pyilmaz
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_node_id_fkey FOREIGN KEY (node_id) REFERENCES taxonomy(node_id) ON DELETE CASCADE;


--
-- Name: taxmap_primaryaccession_fkey; Type: FK CONSTRAINT; Schema: silva_r102_ssu; Owner: pyilmaz
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_primaryaccession_fkey FOREIGN KEY (primaryaccession) REFERENCES sequenceentry(primaryaccession) ON DELETE CASCADE;


SET search_path = silva_r103_lsu, pg_catalog;

--
-- Name: Publication_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse
--

ALTER TABLE ONLY "Publication"
    ADD CONSTRAINT "Publication_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Region_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse
--

ALTER TABLE ONLY "Region"
    ADD CONSTRAINT "Region_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: accession_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse
--

ALTER TABLE ONLY accession
    ADD CONSTRAINT "accession_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON DELETE CASCADE;


--
-- Name: cluster_clusterAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse
--

ALTER TABLE ONLY cluster
    ADD CONSTRAINT "cluster_clusterAccession_fkey" FOREIGN KEY ("clusterAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: cluster_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse
--

ALTER TABLE ONLY cluster
    ADD CONSTRAINT "cluster_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: observation_blast_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse
--

ALTER TABLE ONLY observation_blast
    ADD CONSTRAINT "observation_blast_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: otu_breakdown_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse
--

ALTER TABLE ONLY otu_breakdown
    ADD CONSTRAINT "otu_breakdown_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: task_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse
--

ALTER TABLE ONLY task
    ADD CONSTRAINT "task_primaryAccession_fkey" FOREIGN KEY ("primaryAccession", stop, start) REFERENCES "Region"("primaryAccession", stop, start) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: taxmap_node_id_fkey; Type: FK CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_node_id_fkey FOREIGN KEY (node_id) REFERENCES taxonomy(node_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: taxmap_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_lsu; Owner: epruesse
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT "taxmap_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = silva_r103_ssu, pg_catalog;

--
-- Name: Publication_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse
--

ALTER TABLE ONLY "Publication"
    ADD CONSTRAINT "Publication_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: Region_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse
--

ALTER TABLE ONLY "Region"
    ADD CONSTRAINT "Region_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: accession_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse
--

ALTER TABLE ONLY accession
    ADD CONSTRAINT "accession_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON DELETE CASCADE;


--
-- Name: cluster_clusterAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse
--

ALTER TABLE ONLY cluster
    ADD CONSTRAINT "cluster_clusterAccession_fkey" FOREIGN KEY ("clusterAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: cluster_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse
--

ALTER TABLE ONLY cluster
    ADD CONSTRAINT "cluster_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: observation_blast_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse
--

ALTER TABLE ONLY observation_blast
    ADD CONSTRAINT "observation_blast_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: otu_breakdown_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse
--

ALTER TABLE ONLY otu_breakdown
    ADD CONSTRAINT "otu_breakdown_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: task_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse
--

ALTER TABLE ONLY task
    ADD CONSTRAINT "task_primaryAccession_fkey" FOREIGN KEY ("primaryAccession", stop, start) REFERENCES "Region"("primaryAccession", stop, start) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: taxmap_node_id_fkey; Type: FK CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT taxmap_node_id_fkey FOREIGN KEY (node_id) REFERENCES taxonomy(node_id) ON UPDATE CASCADE ON DELETE CASCADE;


--
-- Name: taxmap_primaryAccession_fkey; Type: FK CONSTRAINT; Schema: silva_r103_ssu; Owner: epruesse
--

ALTER TABLE ONLY taxmap
    ADD CONSTRAINT "taxmap_primaryAccession_fkey" FOREIGN KEY ("primaryAccession") REFERENCES "SequenceEntry"("primaryAccession") ON UPDATE CASCADE ON DELETE CASCADE;


SET search_path = stage_r8, pg_catalog;

--
-- Name: core; Type: ACL; Schema: -; Owner: megdb_admin
--

REVOKE ALL ON SCHEMA core FROM PUBLIC;
REVOKE ALL ON SCHEMA core FROM megdb_admin;
GRANT ALL ON SCHEMA core TO megdb_admin;
GRANT USAGE ON SCHEMA core TO selectors;
GRANT USAGE ON SCHEMA core TO sge;
GRANT ALL ON SCHEMA core TO megx_team;
GRANT USAGE ON SCHEMA core TO curators;


--
-- Name: cv; Type: ACL; Schema: -; Owner: rkottman
--

REVOKE ALL ON SCHEMA cv FROM PUBLIC;
REVOKE ALL ON SCHEMA cv FROM rkottman;
GRANT ALL ON SCHEMA cv TO rkottman;
GRANT USAGE ON SCHEMA cv TO selectors;


--
-- Name: elayers; Type: ACL; Schema: -; Owner: megdb_admin
--

REVOKE ALL ON SCHEMA elayers FROM PUBLIC;
REVOKE ALL ON SCHEMA elayers FROM megdb_admin;
GRANT ALL ON SCHEMA elayers TO megdb_admin;
GRANT USAGE ON SCHEMA elayers TO selectors;
GRANT USAGE ON SCHEMA elayers TO curators;


--
-- Name: mfdata; Type: ACL; Schema: -; Owner: megdb_admin
--

REVOKE ALL ON SCHEMA mfdata FROM PUBLIC;
REVOKE ALL ON SCHEMA mfdata FROM megdb_admin;
GRANT ALL ON SCHEMA mfdata TO megdb_admin;
GRANT USAGE ON SCHEMA mfdata TO selectors;
GRANT ALL ON SCHEMA mfdata TO megxuser;


--
-- Name: mflayers; Type: ACL; Schema: -; Owner: megdb_admin
--

REVOKE ALL ON SCHEMA mflayers FROM PUBLIC;
REVOKE ALL ON SCHEMA mflayers FROM megdb_admin;
GRANT ALL ON SCHEMA mflayers TO megdb_admin;
GRANT USAGE ON SCHEMA mflayers TO selectors;


--
-- Name: mfmetadata; Type: ACL; Schema: -; Owner: megdb_admin
--

REVOKE ALL ON SCHEMA mfmetadata FROM PUBLIC;
REVOKE ALL ON SCHEMA mfmetadata FROM megdb_admin;
GRANT ALL ON SCHEMA mfmetadata TO megdb_admin;
GRANT USAGE ON SCHEMA mfmetadata TO selectors;


--
-- Name: mfresults; Type: ACL; Schema: -; Owner: megdb_admin
--

REVOKE ALL ON SCHEMA mfresults FROM PUBLIC;
REVOKE ALL ON SCHEMA mfresults FROM megdb_admin;
GRANT ALL ON SCHEMA mfresults TO megdb_admin;
GRANT ALL ON SCHEMA mfresults TO megxuser;


--
-- Name: pfam_23; Type: ACL; Schema: -; Owner: rkottman
--

REVOKE ALL ON SCHEMA pfam_23 FROM PUBLIC;
REVOKE ALL ON SCHEMA pfam_23 FROM rkottman;
GRANT ALL ON SCHEMA pfam_23 TO rkottman;
GRANT ALL ON SCHEMA pfam_23 TO selectors;
GRANT ALL ON SCHEMA pfam_23 TO pfam_admin WITH GRANT OPTION;


--
-- Name: pfam_24; Type: ACL; Schema: -; Owner: ikostadi
--

REVOKE ALL ON SCHEMA pfam_24 FROM PUBLIC;
REVOKE ALL ON SCHEMA pfam_24 FROM ikostadi;
GRANT ALL ON SCHEMA pfam_24 TO ikostadi;
GRANT USAGE ON SCHEMA pfam_24 TO selectors;


--
-- Name: pfam_stage; Type: ACL; Schema: -; Owner: schema_admin
--

REVOKE ALL ON SCHEMA pfam_stage FROM PUBLIC;
REVOKE ALL ON SCHEMA pfam_stage FROM schema_admin;
GRANT ALL ON SCHEMA pfam_stage TO schema_admin;
GRANT USAGE ON SCHEMA pfam_stage TO selectors;
GRANT ALL ON SCHEMA pfam_stage TO pfam_admin;


--
-- Name: pgq; Type: ACL; Schema: -; Owner: rkottman
--

REVOKE ALL ON SCHEMA pgq FROM PUBLIC;
REVOKE ALL ON SCHEMA pgq FROM rkottman;
GRANT ALL ON SCHEMA pgq TO rkottman;
GRANT USAGE ON SCHEMA pgq TO ikostadi;
GRANT ALL ON SCHEMA pgq TO pgqueue;
GRANT USAGE ON SCHEMA pgq TO megxuser;


--
-- Name: pgq_ext; Type: ACL; Schema: -; Owner: rkottman
--

REVOKE ALL ON SCHEMA pgq_ext FROM PUBLIC;
REVOKE ALL ON SCHEMA pgq_ext FROM rkottman;
GRANT ALL ON SCHEMA pgq_ext TO rkottman;
GRANT ALL ON SCHEMA pgq_ext TO pgqueue;


--
-- Name: silva_r100_lsu; Type: ACL; Schema: -; Owner: schema_admin
--

REVOKE ALL ON SCHEMA silva_r100_lsu FROM PUBLIC;
REVOKE ALL ON SCHEMA silva_r100_lsu FROM schema_admin;
GRANT ALL ON SCHEMA silva_r100_lsu TO schema_admin;
GRANT USAGE ON SCHEMA silva_r100_lsu TO selectors;
GRANT ALL ON SCHEMA silva_r100_lsu TO silva_admin;


--
-- Name: silva_r100_ssu; Type: ACL; Schema: -; Owner: schema_admin
--

REVOKE ALL ON SCHEMA silva_r100_ssu FROM PUBLIC;
REVOKE ALL ON SCHEMA silva_r100_ssu FROM schema_admin;
GRANT ALL ON SCHEMA silva_r100_ssu TO schema_admin;
GRANT USAGE ON SCHEMA silva_r100_ssu TO selectors;
GRANT ALL ON SCHEMA silva_r100_ssu TO silva_admin;


--
-- Name: silva_r102_lsu; Type: ACL; Schema: -; Owner: schema_admin
--

REVOKE ALL ON SCHEMA silva_r102_lsu FROM PUBLIC;
REVOKE ALL ON SCHEMA silva_r102_lsu FROM schema_admin;
GRANT ALL ON SCHEMA silva_r102_lsu TO schema_admin;
GRANT USAGE ON SCHEMA silva_r102_lsu TO selectors;
GRANT ALL ON SCHEMA silva_r102_lsu TO silva_admin;
GRANT USAGE ON SCHEMA silva_r102_lsu TO megx_team;


--
-- Name: silva_r102_ssu; Type: ACL; Schema: -; Owner: schema_admin
--

REVOKE ALL ON SCHEMA silva_r102_ssu FROM PUBLIC;
REVOKE ALL ON SCHEMA silva_r102_ssu FROM schema_admin;
GRANT ALL ON SCHEMA silva_r102_ssu TO schema_admin;
GRANT USAGE ON SCHEMA silva_r102_ssu TO selectors;
GRANT ALL ON SCHEMA silva_r102_ssu TO silva_admin;
GRANT USAGE ON SCHEMA silva_r102_ssu TO megx_team;


--
-- Name: stage_r8; Type: ACL; Schema: -; Owner: curation_admin
--

REVOKE ALL ON SCHEMA stage_r8 FROM PUBLIC;
REVOKE ALL ON SCHEMA stage_r8 FROM curation_admin;
GRANT ALL ON SCHEMA stage_r8 TO curation_admin;
GRANT USAGE ON SCHEMA stage_r8 TO selectors;
GRANT ALL ON SCHEMA stage_r8 TO curators;
GRANT ALL ON SCHEMA stage_r8 TO megx_team;


--
-- Name: web; Type: ACL; Schema: -; Owner: megxuser
--

REVOKE ALL ON SCHEMA web FROM PUBLIC;
REVOKE ALL ON SCHEMA web FROM megxuser;
GRANT ALL ON SCHEMA web TO megxuser;
GRANT ALL ON SCHEMA web TO megdb_admin WITH GRANT OPTION;
GRANT USAGE ON SCHEMA web TO megx_team;


--
-- Name: web_r8; Type: ACL; Schema: -; Owner: megxuser
--

REVOKE ALL ON SCHEMA web_r8 FROM PUBLIC;
REVOKE ALL ON SCHEMA web_r8 FROM megxuser;
GRANT ALL ON SCHEMA web_r8 TO megxuser;
GRANT ALL ON SCHEMA web_r8 TO megdb_admin WITH GRANT OPTION;
GRANT USAGE ON SCHEMA web_r8 TO megx_team;


SET search_path = core, pg_catalog;

--
-- Name: audit_table(); Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON FUNCTION audit_table() FROM PUBLIC;
REVOKE ALL ON FUNCTION audit_table() FROM rkottman;
GRANT ALL ON FUNCTION audit_table() TO rkottman;
GRANT ALL ON FUNCTION audit_table() TO PUBLIC;
GRANT ALL ON FUNCTION audit_table() TO curators;


--
-- Name: blast_run_status(text, numeric); Type: ACL; Schema: core; Owner: ikostadi
--

REVOKE ALL ON FUNCTION blast_run_status(s_id text, j_id numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION blast_run_status(s_id text, j_id numeric) FROM ikostadi;
GRANT ALL ON FUNCTION blast_run_status(s_id text, j_id numeric) TO ikostadi;
GRANT ALL ON FUNCTION blast_run_status(s_id text, j_id numeric) TO PUBLIC;
GRANT ALL ON FUNCTION blast_run_status(s_id text, j_id numeric) TO selectors;
GRANT ALL ON FUNCTION blast_run_status(s_id text, j_id numeric) TO megxuser;


--
-- Name: create_audit_table(text, text); Type: ACL; Schema: core; Owner: ikostadi
--

REVOKE ALL ON FUNCTION create_audit_table(schemaname text, tablename text) FROM PUBLIC;
REVOKE ALL ON FUNCTION create_audit_table(schemaname text, tablename text) FROM ikostadi;
GRANT ALL ON FUNCTION create_audit_table(schemaname text, tablename text) TO ikostadi;
GRANT ALL ON FUNCTION create_audit_table(schemaname text, tablename text) TO PUBLIC;
GRANT ALL ON FUNCTION create_audit_table(schemaname text, tablename text) TO curation_admin;


--
-- Name: flag_entity_by_id(text, text, bigint, smallint, character varying, text); Type: ACL; Schema: core; Owner: ikostadi
--

REVOKE ALL ON FUNCTION flag_entity_by_id(schemaname text, tablename text, myid bigint, myver smallint, myflag character varying, mylogname text) FROM PUBLIC;
REVOKE ALL ON FUNCTION flag_entity_by_id(schemaname text, tablename text, myid bigint, myver smallint, myflag character varying, mylogname text) FROM ikostadi;
GRANT ALL ON FUNCTION flag_entity_by_id(schemaname text, tablename text, myid bigint, myver smallint, myflag character varying, mylogname text) TO ikostadi;
GRANT ALL ON FUNCTION flag_entity_by_id(schemaname text, tablename text, myid bigint, myver smallint, myflag character varying, mylogname text) TO PUBLIC;
GRANT ALL ON FUNCTION flag_entity_by_id(schemaname text, tablename text, myid bigint, myver smallint, myflag character varying, mylogname text) TO curators;


--
-- Name: is_active_user(character varying, text); Type: ACL; Schema: core; Owner: ikostadi
--

REVOKE ALL ON FUNCTION is_active_user(uname character varying, upass text) FROM PUBLIC;
REVOKE ALL ON FUNCTION is_active_user(uname character varying, upass text) FROM ikostadi;
GRANT ALL ON FUNCTION is_active_user(uname character varying, upass text) TO ikostadi;
GRANT ALL ON FUNCTION is_active_user(uname character varying, upass text) TO PUBLIC;
GRANT ALL ON FUNCTION is_active_user(uname character varying, upass text) TO megxuser;
GRANT ALL ON FUNCTION is_active_user(uname character varying, upass text) TO megx_team;


--
-- Name: isolates_b_trg(); Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON FUNCTION isolates_b_trg() FROM PUBLIC;
REVOKE ALL ON FUNCTION isolates_b_trg() FROM rkottman;
GRANT ALL ON FUNCTION isolates_b_trg() TO rkottman;


--
-- Name: pangaea_url(public.geometry); Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON FUNCTION pangaea_url(geom public.geometry) FROM PUBLIC;
REVOKE ALL ON FUNCTION pangaea_url(geom public.geometry) FROM rkottman;
GRANT ALL ON FUNCTION pangaea_url(geom public.geometry) TO rkottman;
GRANT ALL ON FUNCTION pangaea_url(geom public.geometry) TO PUBLIC;
GRANT ALL ON FUNCTION pangaea_url(geom public.geometry) TO megx_team;


--
-- Name: pp_evalue(numeric); Type: ACL; Schema: core; Owner: ikostadi
--

REVOKE ALL ON FUNCTION pp_evalue(i numeric) FROM PUBLIC;
REVOKE ALL ON FUNCTION pp_evalue(i numeric) FROM ikostadi;
GRANT ALL ON FUNCTION pp_evalue(i numeric) TO ikostadi;
GRANT ALL ON FUNCTION pp_evalue(i numeric) TO PUBLIC;
GRANT ALL ON FUNCTION pp_evalue(i numeric) TO selectors;
GRANT ALL ON FUNCTION pp_evalue(i numeric) TO megxuser;


--
-- Name: project_pk_next(); Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON FUNCTION project_pk_next() FROM PUBLIC;
REVOKE ALL ON FUNCTION project_pk_next() FROM rkottman;
GRANT ALL ON FUNCTION project_pk_next() TO rkottman;
GRANT ALL ON FUNCTION project_pk_next() TO PUBLIC;


--
-- Name: project_sample_next(integer); Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON FUNCTION project_sample_next(project_id integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION project_sample_next(project_id integer) FROM rkottman;
GRANT ALL ON FUNCTION project_sample_next(project_id integer) TO rkottman;
GRANT ALL ON FUNCTION project_sample_next(project_id integer) TO PUBLIC;


--
-- Name: samples_b_trg(); Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON FUNCTION samples_b_trg() FROM PUBLIC;
REVOKE ALL ON FUNCTION samples_b_trg() FROM rkottman;
GRANT ALL ON FUNCTION samples_b_trg() TO rkottman;


--
-- Name: set_samples_pk(); Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON FUNCTION set_samples_pk() FROM PUBLIC;
REVOKE ALL ON FUNCTION set_samples_pk() FROM rkottman;
GRANT ALL ON FUNCTION set_samples_pk() TO rkottman;
GRANT ALL ON FUNCTION set_samples_pk() TO PUBLIC;


--
-- Name: update_version(); Type: ACL; Schema: core; Owner: ikostadi
--

REVOKE ALL ON FUNCTION update_version() FROM PUBLIC;
REVOKE ALL ON FUNCTION update_version() FROM ikostadi;
GRANT ALL ON FUNCTION update_version() TO ikostadi;
GRANT ALL ON FUNCTION update_version() TO PUBLIC;
GRANT ALL ON FUNCTION update_version() TO curators;


SET search_path = elayers, pg_catalog;

--
-- Name: woa05_idw_ip(double precision, double precision, real, text, smallint); Type: ACL; Schema: elayers; Owner: ikostadi
--

REVOKE ALL ON FUNCTION woa05_idw_ip(x double precision, y double precision, depth real, param text, season smallint) FROM PUBLIC;
REVOKE ALL ON FUNCTION woa05_idw_ip(x double precision, y double precision, depth real, param text, season smallint) FROM ikostadi;
GRANT ALL ON FUNCTION woa05_idw_ip(x double precision, y double precision, depth real, param text, season smallint) TO ikostadi;
GRANT ALL ON FUNCTION woa05_idw_ip(x double precision, y double precision, depth real, param text, season smallint) TO PUBLIC;
GRANT ALL ON FUNCTION woa05_idw_ip(x double precision, y double precision, depth real, param text, season smallint) TO selectors;


--
-- Name: wod05_idw_ip(real, real, real, real); Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON FUNCTION wod05_idw_ip(lon real, lat real, depth real, buffer real) FROM PUBLIC;
REVOKE ALL ON FUNCTION wod05_idw_ip(lon real, lat real, depth real, buffer real) FROM rkottman;
GRANT ALL ON FUNCTION wod05_idw_ip(lon real, lat real, depth real, buffer real) TO rkottman;
GRANT ALL ON FUNCTION wod05_idw_ip(lon real, lat real, depth real, buffer real) TO PUBLIC;
GRANT ALL ON FUNCTION wod05_idw_ip(lon real, lat real, depth real, buffer real) TO selectors;


--
-- Name: wod05_osd_all; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE wod05_osd_all FROM PUBLIC;
REVOKE ALL ON TABLE wod05_osd_all FROM rkottman;
GRANT ALL ON TABLE wod05_osd_all TO rkottman;
GRANT SELECT ON TABLE wod05_osd_all TO selectors;
GRANT SELECT ON TABLE wod05_osd_all TO megxuser;


SET search_path = mfdata, pg_catalog;

--
-- Name: add_minmax(integer); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION add_minmax(integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION add_minmax(integer) FROM rkottman;
GRANT ALL ON FUNCTION add_minmax(integer) TO rkottman;
GRANT ALL ON FUNCTION add_minmax(integer) TO PUBLIC;


--
-- Name: exists_column(text, text); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION exists_column(text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION exists_column(text, text) FROM rkottman;
GRANT ALL ON FUNCTION exists_column(text, text) TO rkottman;
GRANT ALL ON FUNCTION exists_column(text, text) TO PUBLIC;


--
-- Name: mf_chloro(real, real, real, text); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_chloro(real, real, real, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_chloro(real, real, real, text) FROM rkottman;
GRANT ALL ON FUNCTION mf_chloro(real, real, real, text) TO rkottman;
GRANT ALL ON FUNCTION mf_chloro(real, real, real, text) TO PUBLIC;


--
-- Name: mf_chloro_tot(); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_chloro_tot() FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_chloro_tot() FROM rkottman;
GRANT ALL ON FUNCTION mf_chloro_tot() TO rkottman;
GRANT ALL ON FUNCTION mf_chloro_tot() TO PUBLIC;


--
-- Name: mf_exists_column(text, text); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_exists_column(text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_exists_column(text, text) FROM rkottman;
GRANT ALL ON FUNCTION mf_exists_column(text, text) TO rkottman;
GRANT ALL ON FUNCTION mf_exists_column(text, text) TO PUBLIC;


--
-- Name: mf_test(real, real, real, text); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_test(real, real, real, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_test(real, real, real, text) FROM rkottman;
GRANT ALL ON FUNCTION mf_test(real, real, real, text) TO rkottman;
GRANT ALL ON FUNCTION mf_test(real, real, real, text) TO PUBLIC;


--
-- Name: mf_test(real, real, real, text, real, real); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_test(real, real, real, text, real, real) FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_test(real, real, real, text, real, real) FROM rkottman;
GRANT ALL ON FUNCTION mf_test(real, real, real, text, real, real) TO rkottman;
GRANT ALL ON FUNCTION mf_test(real, real, real, text, real, real) TO PUBLIC;


--
-- Name: mf_woa_all_param(real, real, real, text, real, real); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_woa_all_param(real, real, real, text, real, real) FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_woa_all_param(real, real, real, text, real, real) FROM rkottman;
GRANT ALL ON FUNCTION mf_woa_all_param(real, real, real, text, real, real) TO rkottman;
GRANT ALL ON FUNCTION mf_woa_all_param(real, real, real, text, real, real) TO PUBLIC;


--
-- Name: mf_woa_interpol(real, real, text, text, text, text); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_woa_interpol(real, real, text, text, text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_woa_interpol(real, real, text, text, text, text) FROM rkottman;
GRANT ALL ON FUNCTION mf_woa_interpol(real, real, text, text, text, text) TO rkottman;
GRANT ALL ON FUNCTION mf_woa_interpol(real, real, text, text, text, text) TO PUBLIC;


--
-- Name: mf_woa_interpol_old(real, real, real, text, text); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_woa_interpol_old(real, real, real, text, text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_woa_interpol_old(real, real, real, text, text) FROM rkottman;
GRANT ALL ON FUNCTION mf_woa_interpol_old(real, real, real, text, text) TO rkottman;
GRANT ALL ON FUNCTION mf_woa_interpol_old(real, real, real, text, text) TO PUBLIC;


--
-- Name: mf_woa_interpol_tot(); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_woa_interpol_tot() FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_woa_interpol_tot() FROM rkottman;
GRANT ALL ON FUNCTION mf_woa_interpol_tot() TO rkottman;
GRANT ALL ON FUNCTION mf_woa_interpol_tot() TO PUBLIC;


--
-- Name: mf_woa_interpol_tot_old(); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_woa_interpol_tot_old() FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_woa_interpol_tot_old() FROM rkottman;
GRANT ALL ON FUNCTION mf_woa_interpol_tot_old() TO rkottman;
GRANT ALL ON FUNCTION mf_woa_interpol_tot_old() TO PUBLIC;


--
-- Name: mf_wod_all_param(text); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_wod_all_param(text) FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_wod_all_param(text) FROM rkottman;
GRANT ALL ON FUNCTION mf_wod_all_param(text) TO rkottman;
GRANT ALL ON FUNCTION mf_wod_all_param(text) TO PUBLIC;


--
-- Name: mf_wod_averages(); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_wod_averages() FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_wod_averages() FROM rkottman;
GRANT ALL ON FUNCTION mf_wod_averages() TO rkottman;
GRANT ALL ON FUNCTION mf_wod_averages() TO PUBLIC;


--
-- Name: mf_wod_interp(); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_wod_interp() FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_wod_interp() FROM rkottman;
GRANT ALL ON FUNCTION mf_wod_interp() TO rkottman;
GRANT ALL ON FUNCTION mf_wod_interp() TO PUBLIC;


--
-- Name: mf_wod_select(real, real, real, real); Type: ACL; Schema: mfdata; Owner: megxuser
--

REVOKE ALL ON FUNCTION mf_wod_select(real, real, real, real) FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_wod_select(real, real, real, real) FROM megxuser;
GRANT ALL ON FUNCTION mf_wod_select(real, real, real, real) TO megxuser;
GRANT ALL ON FUNCTION mf_wod_select(real, real, real, real) TO PUBLIC;


--
-- Name: mf_zwod_all_param(real); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_zwod_all_param(real) FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_zwod_all_param(real) FROM rkottman;
GRANT ALL ON FUNCTION mf_zwod_all_param(real) TO rkottman;
GRANT ALL ON FUNCTION mf_zwod_all_param(real) TO PUBLIC;


--
-- Name: na_noel(text); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION na_noel(text) FROM PUBLIC;
REVOKE ALL ON FUNCTION na_noel(text) FROM rkottman;
GRANT ALL ON FUNCTION na_noel(text) TO rkottman;
GRANT ALL ON FUNCTION na_noel(text) TO PUBLIC;


--
-- Name: na_noel_2(text); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION na_noel_2(text) FROM PUBLIC;
REVOKE ALL ON FUNCTION na_noel_2(text) FROM rkottman;
GRANT ALL ON FUNCTION na_noel_2(text) TO rkottman;
GRANT ALL ON FUNCTION na_noel_2(text) TO PUBLIC;


--
-- Name: transform_chloro(text); Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON FUNCTION transform_chloro(tab text) FROM PUBLIC;
REVOKE ALL ON FUNCTION transform_chloro(tab text) FROM rkottman;
GRANT ALL ON FUNCTION transform_chloro(tab text) TO rkottman;
GRANT ALL ON FUNCTION transform_chloro(tab text) TO PUBLIC;


SET search_path = mfresults, pg_catalog;

--
-- Name: kill(); Type: ACL; Schema: mfresults; Owner: rkottman
--

REVOKE ALL ON FUNCTION kill() FROM PUBLIC;
REVOKE ALL ON FUNCTION kill() FROM rkottman;
GRANT ALL ON FUNCTION kill() TO rkottman;
GRANT ALL ON FUNCTION kill() TO PUBLIC;
GRANT ALL ON FUNCTION kill() TO megxuser;


--
-- Name: mf_wod_interp(); Type: ACL; Schema: mfresults; Owner: rkottman
--

REVOKE ALL ON FUNCTION mf_wod_interp() FROM PUBLIC;
REVOKE ALL ON FUNCTION mf_wod_interp() FROM rkottman;
GRANT ALL ON FUNCTION mf_wod_interp() TO rkottman;
GRANT ALL ON FUNCTION mf_wod_interp() TO PUBLIC;
GRANT ALL ON FUNCTION mf_wod_interp() TO megxuser;


--
-- Name: test_wod(); Type: ACL; Schema: mfresults; Owner: rkottman
--

REVOKE ALL ON FUNCTION test_wod() FROM PUBLIC;
REVOKE ALL ON FUNCTION test_wod() FROM rkottman;
GRANT ALL ON FUNCTION test_wod() TO rkottman;
GRANT ALL ON FUNCTION test_wod() TO PUBLIC;
GRANT ALL ON FUNCTION test_wod() TO megxuser;


SET search_path = pgq, pg_catalog;

--
-- Name: batch_event_sql(bigint); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION batch_event_sql(x_batch_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION batch_event_sql(x_batch_id bigint) FROM rkottman;
GRANT ALL ON FUNCTION batch_event_sql(x_batch_id bigint) TO rkottman;
GRANT ALL ON FUNCTION batch_event_sql(x_batch_id bigint) TO PUBLIC;
GRANT ALL ON FUNCTION batch_event_sql(x_batch_id bigint) TO pgqueue;


--
-- Name: batch_event_tables(bigint); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION batch_event_tables(x_batch_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION batch_event_tables(x_batch_id bigint) FROM rkottman;
GRANT ALL ON FUNCTION batch_event_tables(x_batch_id bigint) TO rkottman;
GRANT ALL ON FUNCTION batch_event_tables(x_batch_id bigint) TO PUBLIC;
GRANT ALL ON FUNCTION batch_event_tables(x_batch_id bigint) TO pgqueue;


--
-- Name: create_queue(text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION create_queue(i_queue_name text) FROM PUBLIC;
REVOKE ALL ON FUNCTION create_queue(i_queue_name text) FROM rkottman;
GRANT ALL ON FUNCTION create_queue(i_queue_name text) TO rkottman;
GRANT ALL ON FUNCTION create_queue(i_queue_name text) TO PUBLIC;
GRANT ALL ON FUNCTION create_queue(i_queue_name text) TO pgqueue;


--
-- Name: current_event_table(text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION current_event_table(x_queue_name text) FROM PUBLIC;
REVOKE ALL ON FUNCTION current_event_table(x_queue_name text) FROM rkottman;
GRANT ALL ON FUNCTION current_event_table(x_queue_name text) TO rkottman;
GRANT ALL ON FUNCTION current_event_table(x_queue_name text) TO PUBLIC;
GRANT ALL ON FUNCTION current_event_table(x_queue_name text) TO pgqueue;


--
-- Name: drop_queue(text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION drop_queue(x_queue_name text) FROM PUBLIC;
REVOKE ALL ON FUNCTION drop_queue(x_queue_name text) FROM rkottman;
GRANT ALL ON FUNCTION drop_queue(x_queue_name text) TO rkottman;
GRANT ALL ON FUNCTION drop_queue(x_queue_name text) TO PUBLIC;
GRANT ALL ON FUNCTION drop_queue(x_queue_name text) TO pgqueue;


--
-- Name: event_failed(bigint, bigint, text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION event_failed(x_batch_id bigint, x_event_id bigint, x_reason text) FROM PUBLIC;
REVOKE ALL ON FUNCTION event_failed(x_batch_id bigint, x_event_id bigint, x_reason text) FROM rkottman;
GRANT ALL ON FUNCTION event_failed(x_batch_id bigint, x_event_id bigint, x_reason text) TO rkottman;
GRANT ALL ON FUNCTION event_failed(x_batch_id bigint, x_event_id bigint, x_reason text) TO PUBLIC;
GRANT ALL ON FUNCTION event_failed(x_batch_id bigint, x_event_id bigint, x_reason text) TO pgqueue;


--
-- Name: event_retry(bigint, bigint, timestamp with time zone); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION event_retry(x_batch_id bigint, x_event_id bigint, x_retry_time timestamp with time zone) FROM PUBLIC;
REVOKE ALL ON FUNCTION event_retry(x_batch_id bigint, x_event_id bigint, x_retry_time timestamp with time zone) FROM rkottman;
GRANT ALL ON FUNCTION event_retry(x_batch_id bigint, x_event_id bigint, x_retry_time timestamp with time zone) TO rkottman;
GRANT ALL ON FUNCTION event_retry(x_batch_id bigint, x_event_id bigint, x_retry_time timestamp with time zone) TO PUBLIC;
GRANT ALL ON FUNCTION event_retry(x_batch_id bigint, x_event_id bigint, x_retry_time timestamp with time zone) TO pgqueue;


--
-- Name: event_retry(bigint, bigint, integer); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION event_retry(x_batch_id bigint, x_event_id bigint, x_retry_seconds integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION event_retry(x_batch_id bigint, x_event_id bigint, x_retry_seconds integer) FROM rkottman;
GRANT ALL ON FUNCTION event_retry(x_batch_id bigint, x_event_id bigint, x_retry_seconds integer) TO rkottman;
GRANT ALL ON FUNCTION event_retry(x_batch_id bigint, x_event_id bigint, x_retry_seconds integer) TO PUBLIC;
GRANT ALL ON FUNCTION event_retry(x_batch_id bigint, x_event_id bigint, x_retry_seconds integer) TO pgqueue;


--
-- Name: event_retry_raw(text, text, timestamp with time zone, bigint, timestamp with time zone, integer, text, text, text, text, text, text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION event_retry_raw(x_queue text, x_consumer text, x_retry_after timestamp with time zone, x_ev_id bigint, x_ev_time timestamp with time zone, x_ev_retry integer, x_ev_type text, x_ev_data text, x_ev_extra1 text, x_ev_extra2 text, x_ev_extra3 text, x_ev_extra4 text) FROM PUBLIC;
REVOKE ALL ON FUNCTION event_retry_raw(x_queue text, x_consumer text, x_retry_after timestamp with time zone, x_ev_id bigint, x_ev_time timestamp with time zone, x_ev_retry integer, x_ev_type text, x_ev_data text, x_ev_extra1 text, x_ev_extra2 text, x_ev_extra3 text, x_ev_extra4 text) FROM rkottman;
GRANT ALL ON FUNCTION event_retry_raw(x_queue text, x_consumer text, x_retry_after timestamp with time zone, x_ev_id bigint, x_ev_time timestamp with time zone, x_ev_retry integer, x_ev_type text, x_ev_data text, x_ev_extra1 text, x_ev_extra2 text, x_ev_extra3 text, x_ev_extra4 text) TO rkottman;
GRANT ALL ON FUNCTION event_retry_raw(x_queue text, x_consumer text, x_retry_after timestamp with time zone, x_ev_id bigint, x_ev_time timestamp with time zone, x_ev_retry integer, x_ev_type text, x_ev_data text, x_ev_extra1 text, x_ev_extra2 text, x_ev_extra3 text, x_ev_extra4 text) TO PUBLIC;
GRANT ALL ON FUNCTION event_retry_raw(x_queue text, x_consumer text, x_retry_after timestamp with time zone, x_ev_id bigint, x_ev_time timestamp with time zone, x_ev_retry integer, x_ev_type text, x_ev_data text, x_ev_extra1 text, x_ev_extra2 text, x_ev_extra3 text, x_ev_extra4 text) TO pgqueue;


--
-- Name: failed_event_count(text, text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION failed_event_count(x_queue_name text, x_consumer_name text) FROM PUBLIC;
REVOKE ALL ON FUNCTION failed_event_count(x_queue_name text, x_consumer_name text) FROM rkottman;
GRANT ALL ON FUNCTION failed_event_count(x_queue_name text, x_consumer_name text) TO rkottman;
GRANT ALL ON FUNCTION failed_event_count(x_queue_name text, x_consumer_name text) TO PUBLIC;
GRANT ALL ON FUNCTION failed_event_count(x_queue_name text, x_consumer_name text) TO pgqueue;


--
-- Name: failed_event_delete(text, text, bigint); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION failed_event_delete(x_queue_name text, x_consumer_name text, x_event_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION failed_event_delete(x_queue_name text, x_consumer_name text, x_event_id bigint) FROM rkottman;
GRANT ALL ON FUNCTION failed_event_delete(x_queue_name text, x_consumer_name text, x_event_id bigint) TO rkottman;
GRANT ALL ON FUNCTION failed_event_delete(x_queue_name text, x_consumer_name text, x_event_id bigint) TO PUBLIC;
GRANT ALL ON FUNCTION failed_event_delete(x_queue_name text, x_consumer_name text, x_event_id bigint) TO pgqueue;


--
-- Name: failed_queue; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON TABLE failed_queue FROM PUBLIC;
REVOKE ALL ON TABLE failed_queue FROM pgqueue;
GRANT ALL ON TABLE failed_queue TO pgqueue;
GRANT SELECT ON TABLE failed_queue TO PUBLIC;


--
-- Name: failed_event_list(text, text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION failed_event_list(x_queue_name text, x_consumer_name text) FROM PUBLIC;
REVOKE ALL ON FUNCTION failed_event_list(x_queue_name text, x_consumer_name text) FROM rkottman;
GRANT ALL ON FUNCTION failed_event_list(x_queue_name text, x_consumer_name text) TO rkottman;
GRANT ALL ON FUNCTION failed_event_list(x_queue_name text, x_consumer_name text) TO PUBLIC;
GRANT ALL ON FUNCTION failed_event_list(x_queue_name text, x_consumer_name text) TO pgqueue;


--
-- Name: failed_event_list(text, text, integer, integer); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION failed_event_list(x_queue_name text, x_consumer_name text, x_count integer, x_offset integer) FROM PUBLIC;
REVOKE ALL ON FUNCTION failed_event_list(x_queue_name text, x_consumer_name text, x_count integer, x_offset integer) FROM rkottman;
GRANT ALL ON FUNCTION failed_event_list(x_queue_name text, x_consumer_name text, x_count integer, x_offset integer) TO rkottman;
GRANT ALL ON FUNCTION failed_event_list(x_queue_name text, x_consumer_name text, x_count integer, x_offset integer) TO PUBLIC;
GRANT ALL ON FUNCTION failed_event_list(x_queue_name text, x_consumer_name text, x_count integer, x_offset integer) TO pgqueue;


--
-- Name: failed_event_retry(text, text, bigint); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION failed_event_retry(x_queue_name text, x_consumer_name text, x_event_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION failed_event_retry(x_queue_name text, x_consumer_name text, x_event_id bigint) FROM rkottman;
GRANT ALL ON FUNCTION failed_event_retry(x_queue_name text, x_consumer_name text, x_event_id bigint) TO rkottman;
GRANT ALL ON FUNCTION failed_event_retry(x_queue_name text, x_consumer_name text, x_event_id bigint) TO PUBLIC;
GRANT ALL ON FUNCTION failed_event_retry(x_queue_name text, x_consumer_name text, x_event_id bigint) TO pgqueue;


--
-- Name: finish_batch(bigint); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION finish_batch(x_batch_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION finish_batch(x_batch_id bigint) FROM rkottman;
GRANT ALL ON FUNCTION finish_batch(x_batch_id bigint) TO rkottman;
GRANT ALL ON FUNCTION finish_batch(x_batch_id bigint) TO PUBLIC;
GRANT ALL ON FUNCTION finish_batch(x_batch_id bigint) TO pgqueue;


--
-- Name: force_tick(text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION force_tick(i_queue_name text) FROM PUBLIC;
REVOKE ALL ON FUNCTION force_tick(i_queue_name text) FROM rkottman;
GRANT ALL ON FUNCTION force_tick(i_queue_name text) TO rkottman;
GRANT ALL ON FUNCTION force_tick(i_queue_name text) TO PUBLIC;
GRANT ALL ON FUNCTION force_tick(i_queue_name text) TO pgqueue;


--
-- Name: get_batch_events(bigint); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION get_batch_events(x_batch_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION get_batch_events(x_batch_id bigint) FROM rkottman;
GRANT ALL ON FUNCTION get_batch_events(x_batch_id bigint) TO rkottman;
GRANT ALL ON FUNCTION get_batch_events(x_batch_id bigint) TO PUBLIC;
GRANT ALL ON FUNCTION get_batch_events(x_batch_id bigint) TO pgqueue;


--
-- Name: get_batch_info(bigint); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION get_batch_info(x_batch_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION get_batch_info(x_batch_id bigint) FROM rkottman;
GRANT ALL ON FUNCTION get_batch_info(x_batch_id bigint) TO rkottman;
GRANT ALL ON FUNCTION get_batch_info(x_batch_id bigint) TO PUBLIC;
GRANT ALL ON FUNCTION get_batch_info(x_batch_id bigint) TO pgqueue;


--
-- Name: get_consumer_info(); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION get_consumer_info() FROM PUBLIC;
REVOKE ALL ON FUNCTION get_consumer_info() FROM rkottman;
GRANT ALL ON FUNCTION get_consumer_info() TO rkottman;
GRANT ALL ON FUNCTION get_consumer_info() TO PUBLIC;
GRANT ALL ON FUNCTION get_consumer_info() TO pgqueue;


--
-- Name: get_consumer_info(text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION get_consumer_info(x_queue_name text) FROM PUBLIC;
REVOKE ALL ON FUNCTION get_consumer_info(x_queue_name text) FROM rkottman;
GRANT ALL ON FUNCTION get_consumer_info(x_queue_name text) TO rkottman;
GRANT ALL ON FUNCTION get_consumer_info(x_queue_name text) TO PUBLIC;
GRANT ALL ON FUNCTION get_consumer_info(x_queue_name text) TO pgqueue;


--
-- Name: get_consumer_info(text, text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION get_consumer_info(x_queue_name text, x_consumer_name text) FROM PUBLIC;
REVOKE ALL ON FUNCTION get_consumer_info(x_queue_name text, x_consumer_name text) FROM rkottman;
GRANT ALL ON FUNCTION get_consumer_info(x_queue_name text, x_consumer_name text) TO rkottman;
GRANT ALL ON FUNCTION get_consumer_info(x_queue_name text, x_consumer_name text) TO PUBLIC;
GRANT ALL ON FUNCTION get_consumer_info(x_queue_name text, x_consumer_name text) TO pgqueue;


--
-- Name: get_queue_info(); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION get_queue_info() FROM PUBLIC;
REVOKE ALL ON FUNCTION get_queue_info() FROM rkottman;
GRANT ALL ON FUNCTION get_queue_info() TO rkottman;
GRANT ALL ON FUNCTION get_queue_info() TO PUBLIC;
GRANT ALL ON FUNCTION get_queue_info() TO pgqueue;


--
-- Name: get_queue_info(text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION get_queue_info(qname text) FROM PUBLIC;
REVOKE ALL ON FUNCTION get_queue_info(qname text) FROM rkottman;
GRANT ALL ON FUNCTION get_queue_info(qname text) TO rkottman;
GRANT ALL ON FUNCTION get_queue_info(qname text) TO PUBLIC;
GRANT ALL ON FUNCTION get_queue_info(qname text) TO pgqueue;


--
-- Name: grant_perms(text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION grant_perms(x_queue_name text) FROM PUBLIC;
REVOKE ALL ON FUNCTION grant_perms(x_queue_name text) FROM rkottman;
GRANT ALL ON FUNCTION grant_perms(x_queue_name text) TO rkottman;
GRANT ALL ON FUNCTION grant_perms(x_queue_name text) TO PUBLIC;
GRANT ALL ON FUNCTION grant_perms(x_queue_name text) TO pgqueue;


--
-- Name: insert_event(text, text, text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION insert_event(queue_name text, ev_type text, ev_data text) FROM PUBLIC;
REVOKE ALL ON FUNCTION insert_event(queue_name text, ev_type text, ev_data text) FROM rkottman;
GRANT ALL ON FUNCTION insert_event(queue_name text, ev_type text, ev_data text) TO rkottman;
GRANT ALL ON FUNCTION insert_event(queue_name text, ev_type text, ev_data text) TO PUBLIC;
GRANT ALL ON FUNCTION insert_event(queue_name text, ev_type text, ev_data text) TO pgqueue;


--
-- Name: insert_event(text, text, text, text, text, text, text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION insert_event(queue_name text, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) FROM PUBLIC;
REVOKE ALL ON FUNCTION insert_event(queue_name text, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) FROM rkottman;
GRANT ALL ON FUNCTION insert_event(queue_name text, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) TO rkottman;
GRANT ALL ON FUNCTION insert_event(queue_name text, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) TO PUBLIC;
GRANT ALL ON FUNCTION insert_event(queue_name text, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) TO pgqueue;


--
-- Name: insert_event_raw(text, bigint, timestamp with time zone, integer, integer, text, text, text, text, text, text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION insert_event_raw(queue_name text, ev_id bigint, ev_time timestamp with time zone, ev_owner integer, ev_retry integer, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) FROM PUBLIC;
REVOKE ALL ON FUNCTION insert_event_raw(queue_name text, ev_id bigint, ev_time timestamp with time zone, ev_owner integer, ev_retry integer, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) FROM rkottman;
GRANT ALL ON FUNCTION insert_event_raw(queue_name text, ev_id bigint, ev_time timestamp with time zone, ev_owner integer, ev_retry integer, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) TO rkottman;
GRANT ALL ON FUNCTION insert_event_raw(queue_name text, ev_id bigint, ev_time timestamp with time zone, ev_owner integer, ev_retry integer, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) TO PUBLIC;
GRANT ALL ON FUNCTION insert_event_raw(queue_name text, ev_id bigint, ev_time timestamp with time zone, ev_owner integer, ev_retry integer, ev_type text, ev_data text, ev_extra1 text, ev_extra2 text, ev_extra3 text, ev_extra4 text) TO pgqueue;


--
-- Name: logtriga(); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION logtriga() FROM PUBLIC;
REVOKE ALL ON FUNCTION logtriga() FROM rkottman;
GRANT ALL ON FUNCTION logtriga() TO rkottman;
GRANT ALL ON FUNCTION logtriga() TO PUBLIC;
GRANT ALL ON FUNCTION logtriga() TO pgqueue;


--
-- Name: logutriga(); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION logutriga() FROM PUBLIC;
REVOKE ALL ON FUNCTION logutriga() FROM rkottman;
GRANT ALL ON FUNCTION logutriga() TO rkottman;
GRANT ALL ON FUNCTION logutriga() TO PUBLIC;
GRANT ALL ON FUNCTION logutriga() TO pgqueue;


--
-- Name: maint_retry_events(); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION maint_retry_events() FROM PUBLIC;
REVOKE ALL ON FUNCTION maint_retry_events() FROM rkottman;
GRANT ALL ON FUNCTION maint_retry_events() TO rkottman;
GRANT ALL ON FUNCTION maint_retry_events() TO PUBLIC;
GRANT ALL ON FUNCTION maint_retry_events() TO pgqueue;


--
-- Name: maint_rotate_tables_step1(text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION maint_rotate_tables_step1(i_queue_name text) FROM PUBLIC;
REVOKE ALL ON FUNCTION maint_rotate_tables_step1(i_queue_name text) FROM rkottman;
GRANT ALL ON FUNCTION maint_rotate_tables_step1(i_queue_name text) TO rkottman;
GRANT ALL ON FUNCTION maint_rotate_tables_step1(i_queue_name text) TO PUBLIC;
GRANT ALL ON FUNCTION maint_rotate_tables_step1(i_queue_name text) TO pgqueue;


--
-- Name: maint_rotate_tables_step2(); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION maint_rotate_tables_step2() FROM PUBLIC;
REVOKE ALL ON FUNCTION maint_rotate_tables_step2() FROM rkottman;
GRANT ALL ON FUNCTION maint_rotate_tables_step2() TO rkottman;
GRANT ALL ON FUNCTION maint_rotate_tables_step2() TO PUBLIC;
GRANT ALL ON FUNCTION maint_rotate_tables_step2() TO pgqueue;


--
-- Name: maint_tables_to_vacuum(); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION maint_tables_to_vacuum() FROM PUBLIC;
REVOKE ALL ON FUNCTION maint_tables_to_vacuum() FROM rkottman;
GRANT ALL ON FUNCTION maint_tables_to_vacuum() TO rkottman;
GRANT ALL ON FUNCTION maint_tables_to_vacuum() TO PUBLIC;
GRANT ALL ON FUNCTION maint_tables_to_vacuum() TO pgqueue;


--
-- Name: next_batch(text, text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION next_batch(x_queue_name text, x_consumer_name text) FROM PUBLIC;
REVOKE ALL ON FUNCTION next_batch(x_queue_name text, x_consumer_name text) FROM rkottman;
GRANT ALL ON FUNCTION next_batch(x_queue_name text, x_consumer_name text) TO rkottman;
GRANT ALL ON FUNCTION next_batch(x_queue_name text, x_consumer_name text) TO PUBLIC;
GRANT ALL ON FUNCTION next_batch(x_queue_name text, x_consumer_name text) TO pgqueue;


--
-- Name: register_consumer(text, text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION register_consumer(x_queue_name text, x_consumer_id text) FROM PUBLIC;
REVOKE ALL ON FUNCTION register_consumer(x_queue_name text, x_consumer_id text) FROM rkottman;
GRANT ALL ON FUNCTION register_consumer(x_queue_name text, x_consumer_id text) TO rkottman;
GRANT ALL ON FUNCTION register_consumer(x_queue_name text, x_consumer_id text) TO PUBLIC;
GRANT ALL ON FUNCTION register_consumer(x_queue_name text, x_consumer_id text) TO pgqueue;


--
-- Name: register_consumer(text, text, bigint); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION register_consumer(x_queue_name text, x_consumer_name text, x_tick_pos bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION register_consumer(x_queue_name text, x_consumer_name text, x_tick_pos bigint) FROM rkottman;
GRANT ALL ON FUNCTION register_consumer(x_queue_name text, x_consumer_name text, x_tick_pos bigint) TO rkottman;
GRANT ALL ON FUNCTION register_consumer(x_queue_name text, x_consumer_name text, x_tick_pos bigint) TO PUBLIC;
GRANT ALL ON FUNCTION register_consumer(x_queue_name text, x_consumer_name text, x_tick_pos bigint) TO pgqueue;


--
-- Name: sqltriga(); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION sqltriga() FROM PUBLIC;
REVOKE ALL ON FUNCTION sqltriga() FROM rkottman;
GRANT ALL ON FUNCTION sqltriga() TO rkottman;
GRANT ALL ON FUNCTION sqltriga() TO PUBLIC;
GRANT ALL ON FUNCTION sqltriga() TO pgqueue;


--
-- Name: ticker(); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION ticker() FROM PUBLIC;
REVOKE ALL ON FUNCTION ticker() FROM rkottman;
GRANT ALL ON FUNCTION ticker() TO rkottman;
GRANT ALL ON FUNCTION ticker() TO PUBLIC;
GRANT ALL ON FUNCTION ticker() TO pgqueue;


--
-- Name: ticker(text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION ticker(i_queue_name text) FROM PUBLIC;
REVOKE ALL ON FUNCTION ticker(i_queue_name text) FROM rkottman;
GRANT ALL ON FUNCTION ticker(i_queue_name text) TO rkottman;
GRANT ALL ON FUNCTION ticker(i_queue_name text) TO PUBLIC;
GRANT ALL ON FUNCTION ticker(i_queue_name text) TO pgqueue;


--
-- Name: ticker(text, bigint); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION ticker(i_queue_name text, i_tick_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION ticker(i_queue_name text, i_tick_id bigint) FROM rkottman;
GRANT ALL ON FUNCTION ticker(i_queue_name text, i_tick_id bigint) TO rkottman;
GRANT ALL ON FUNCTION ticker(i_queue_name text, i_tick_id bigint) TO PUBLIC;
GRANT ALL ON FUNCTION ticker(i_queue_name text, i_tick_id bigint) TO pgqueue;


--
-- Name: unregister_consumer(text, text); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION unregister_consumer(x_queue_name text, x_consumer_name text) FROM PUBLIC;
REVOKE ALL ON FUNCTION unregister_consumer(x_queue_name text, x_consumer_name text) FROM rkottman;
GRANT ALL ON FUNCTION unregister_consumer(x_queue_name text, x_consumer_name text) TO rkottman;
GRANT ALL ON FUNCTION unregister_consumer(x_queue_name text, x_consumer_name text) TO PUBLIC;
GRANT ALL ON FUNCTION unregister_consumer(x_queue_name text, x_consumer_name text) TO pgqueue;


--
-- Name: version(); Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON FUNCTION version() FROM PUBLIC;
REVOKE ALL ON FUNCTION version() FROM rkottman;
GRANT ALL ON FUNCTION version() TO rkottman;
GRANT ALL ON FUNCTION version() TO PUBLIC;
GRANT ALL ON FUNCTION version() TO pgqueue;


SET search_path = pgq_ext, pg_catalog;

--
-- Name: get_last_tick(text); Type: ACL; Schema: pgq_ext; Owner: rkottman
--

REVOKE ALL ON FUNCTION get_last_tick(a_consumer text) FROM PUBLIC;
REVOKE ALL ON FUNCTION get_last_tick(a_consumer text) FROM rkottman;
GRANT ALL ON FUNCTION get_last_tick(a_consumer text) TO rkottman;
GRANT ALL ON FUNCTION get_last_tick(a_consumer text) TO PUBLIC;
GRANT ALL ON FUNCTION get_last_tick(a_consumer text) TO pgqueue;


--
-- Name: is_batch_done(text, bigint); Type: ACL; Schema: pgq_ext; Owner: rkottman
--

REVOKE ALL ON FUNCTION is_batch_done(a_consumer text, a_batch_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION is_batch_done(a_consumer text, a_batch_id bigint) FROM rkottman;
GRANT ALL ON FUNCTION is_batch_done(a_consumer text, a_batch_id bigint) TO rkottman;
GRANT ALL ON FUNCTION is_batch_done(a_consumer text, a_batch_id bigint) TO PUBLIC;
GRANT ALL ON FUNCTION is_batch_done(a_consumer text, a_batch_id bigint) TO pgqueue;


--
-- Name: is_event_done(text, bigint, bigint); Type: ACL; Schema: pgq_ext; Owner: rkottman
--

REVOKE ALL ON FUNCTION is_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION is_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) FROM rkottman;
GRANT ALL ON FUNCTION is_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) TO rkottman;
GRANT ALL ON FUNCTION is_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) TO PUBLIC;
GRANT ALL ON FUNCTION is_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) TO pgqueue;


--
-- Name: set_batch_done(text, bigint); Type: ACL; Schema: pgq_ext; Owner: rkottman
--

REVOKE ALL ON FUNCTION set_batch_done(a_consumer text, a_batch_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION set_batch_done(a_consumer text, a_batch_id bigint) FROM rkottman;
GRANT ALL ON FUNCTION set_batch_done(a_consumer text, a_batch_id bigint) TO rkottman;
GRANT ALL ON FUNCTION set_batch_done(a_consumer text, a_batch_id bigint) TO PUBLIC;
GRANT ALL ON FUNCTION set_batch_done(a_consumer text, a_batch_id bigint) TO pgqueue;


--
-- Name: set_event_done(text, bigint, bigint); Type: ACL; Schema: pgq_ext; Owner: rkottman
--

REVOKE ALL ON FUNCTION set_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION set_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) FROM rkottman;
GRANT ALL ON FUNCTION set_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) TO rkottman;
GRANT ALL ON FUNCTION set_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) TO PUBLIC;
GRANT ALL ON FUNCTION set_event_done(a_consumer text, a_batch_id bigint, a_event_id bigint) TO pgqueue;


--
-- Name: set_last_tick(text, bigint); Type: ACL; Schema: pgq_ext; Owner: rkottman
--

REVOKE ALL ON FUNCTION set_last_tick(a_consumer text, a_tick_id bigint) FROM PUBLIC;
REVOKE ALL ON FUNCTION set_last_tick(a_consumer text, a_tick_id bigint) FROM rkottman;
GRANT ALL ON FUNCTION set_last_tick(a_consumer text, a_tick_id bigint) TO rkottman;
GRANT ALL ON FUNCTION set_last_tick(a_consumer text, a_tick_id bigint) TO PUBLIC;
GRANT ALL ON FUNCTION set_last_tick(a_consumer text, a_tick_id bigint) TO pgqueue;


--
-- Name: version(); Type: ACL; Schema: pgq_ext; Owner: rkottman
--

REVOKE ALL ON FUNCTION version() FROM PUBLIC;
REVOKE ALL ON FUNCTION version() FROM rkottman;
GRANT ALL ON FUNCTION version() TO rkottman;
GRANT ALL ON FUNCTION version() TO PUBLIC;
GRANT ALL ON FUNCTION version() TO pgqueue;


SET search_path = web, pg_catalog;

--
-- Name: pangaea_url(public.geometry); Type: ACL; Schema: web; Owner: rkottman
--

REVOKE ALL ON FUNCTION pangaea_url(geom public.geometry) FROM PUBLIC;
REVOKE ALL ON FUNCTION pangaea_url(geom public.geometry) FROM rkottman;
GRANT ALL ON FUNCTION pangaea_url(geom public.geometry) TO rkottman;
GRANT ALL ON FUNCTION pangaea_url(geom public.geometry) TO PUBLIC;
GRANT ALL ON FUNCTION pangaea_url(geom public.geometry) TO megx_team;


SET search_path = web_r8, pg_catalog;

--
-- Name: habitat_lite_distribution(text); Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON FUNCTION habitat_lite_distribution(viewname text) FROM PUBLIC;
REVOKE ALL ON FUNCTION habitat_lite_distribution(viewname text) FROM ikostadi;
GRANT ALL ON FUNCTION habitat_lite_distribution(viewname text) TO ikostadi;
GRANT ALL ON FUNCTION habitat_lite_distribution(viewname text) TO PUBLIC;
GRANT ALL ON FUNCTION habitat_lite_distribution(viewname text) TO selectors;
GRANT ALL ON FUNCTION habitat_lite_distribution(viewname text) TO megxuser;


SET search_path = core, pg_catalog;

--
-- Name: blast_run; Type: ACL; Schema: core; Owner: ikostadi
--

REVOKE ALL ON TABLE blast_run FROM PUBLIC;
REVOKE ALL ON TABLE blast_run FROM ikostadi;
GRANT ALL ON TABLE blast_run TO ikostadi;
GRANT SELECT ON TABLE blast_run TO selectors;
GRANT INSERT ON TABLE blast_run TO megxuser;
GRANT SELECT,UPDATE ON TABLE blast_run TO sge;


--
-- Name: genome_dnas; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE genome_dnas FROM PUBLIC;
REVOKE ALL ON TABLE genome_dnas FROM rkottman;
GRANT ALL ON TABLE genome_dnas TO rkottman;
GRANT SELECT ON TABLE genome_dnas TO selectors;


--
-- Name: genome_studies; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE genome_studies FROM PUBLIC;
REVOKE ALL ON TABLE genome_studies FROM rkottman;
GRANT ALL ON TABLE genome_studies TO rkottman;
GRANT SELECT ON TABLE genome_studies TO selectors;


--
-- Name: isolates; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE isolates FROM PUBLIC;
REVOKE ALL ON TABLE isolates FROM rkottman;
GRANT ALL ON TABLE isolates TO rkottman;
GRANT SELECT ON TABLE isolates TO selectors;


--
-- Name: samples; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE samples FROM PUBLIC;
REVOKE ALL ON TABLE samples FROM rkottman;
GRANT ALL ON TABLE samples TO rkottman;
GRANT SELECT ON TABLE samples TO selectors;


--
-- Name: samplingsites; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE samplingsites FROM PUBLIC;
REVOKE ALL ON TABLE samplingsites FROM rkottman;
GRANT ALL ON TABLE samplingsites TO rkottman;
GRANT SELECT ON TABLE samplingsites TO selectors;
GRANT SELECT ON TABLE samplingsites TO testuser;


SET search_path = web_r8, pg_catalog;

--
-- Name: genome_reports; Type: ACL; Schema: web_r8; Owner: rkottman
--

REVOKE ALL ON TABLE genome_reports FROM PUBLIC;
REVOKE ALL ON TABLE genome_reports FROM rkottman;
GRANT ALL ON TABLE genome_reports TO rkottman;
GRANT SELECT ON TABLE genome_reports TO megxuser;
GRANT SELECT ON TABLE genome_reports TO selectors;
GRANT SELECT ON TABLE genome_reports TO megx_team;


SET search_path = core, pg_catalog;

--
-- Name: mg_dnas; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE mg_dnas FROM PUBLIC;
REVOKE ALL ON TABLE mg_dnas FROM rkottman;
GRANT ALL ON TABLE mg_dnas TO rkottman;
GRANT SELECT ON TABLE mg_dnas TO selectors;


--
-- Name: mg_all_dnas; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE mg_all_dnas FROM PUBLIC;
REVOKE ALL ON TABLE mg_all_dnas FROM rkottman;
GRANT ALL ON TABLE mg_all_dnas TO rkottman;
GRANT SELECT ON TABLE mg_all_dnas TO selectors;


--
-- Name: annotation; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE annotation FROM PUBLIC;
REVOKE ALL ON TABLE annotation FROM rkottman;
GRANT ALL ON TABLE annotation TO rkottman;
GRANT SELECT ON TABLE annotation TO selectors;


--
-- Name: annotation_gid_seq; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON SEQUENCE annotation_gid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE annotation_gid_seq FROM rkottman;
GRANT ALL ON SEQUENCE annotation_gid_seq TO rkottman;
GRANT SELECT ON SEQUENCE annotation_gid_seq TO selectors;


--
-- Name: annotator; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE annotator FROM PUBLIC;
REVOKE ALL ON TABLE annotator FROM rkottman;
GRANT ALL ON TABLE annotator TO rkottman;
GRANT SELECT ON TABLE annotator TO selectors;


--
-- Name: annotator_gid_seq; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON SEQUENCE annotator_gid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE annotator_gid_seq FROM rkottman;
GRANT ALL ON SEQUENCE annotator_gid_seq TO rkottman;
GRANT SELECT ON SEQUENCE annotator_gid_seq TO selectors;


--
-- Name: articles; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE articles FROM PUBLIC;
REVOKE ALL ON TABLE articles FROM rkottman;
GRANT ALL ON TABLE articles TO rkottman;
GRANT SELECT ON TABLE articles TO selectors;


--
-- Name: assignments; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE assignments FROM PUBLIC;
REVOKE ALL ON TABLE assignments FROM rkottman;
GRANT ALL ON TABLE assignments TO rkottman;
GRANT SELECT ON TABLE assignments TO selectors;


--
-- Name: authorlists; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE authorlists FROM PUBLIC;
REVOKE ALL ON TABLE authorlists FROM rkottman;
GRANT ALL ON TABLE authorlists TO rkottman;
GRANT SELECT ON TABLE authorlists TO selectors;


--
-- Name: authors; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE authors FROM PUBLIC;
REVOKE ALL ON TABLE authors FROM rkottman;
GRANT ALL ON TABLE authors TO rkottman;
GRANT SELECT ON TABLE authors TO selectors;


--
-- Name: aux_audit; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE aux_audit FROM PUBLIC;
REVOKE ALL ON TABLE aux_audit FROM rkottman;
GRANT ALL ON TABLE aux_audit TO rkottman;


--
-- Name: aux_cv; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE aux_cv FROM PUBLIC;
REVOKE ALL ON TABLE aux_cv FROM rkottman;
GRANT ALL ON TABLE aux_cv TO rkottman;


--
-- Name: aux_project; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE aux_project FROM PUBLIC;
REVOKE ALL ON TABLE aux_project FROM rkottman;
GRANT ALL ON TABLE aux_project TO rkottman;


--
-- Name: blast_hits; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE blast_hits FROM PUBLIC;
REVOKE ALL ON TABLE blast_hits FROM rkottman;
GRANT ALL ON TABLE blast_hits TO rkottman;
GRANT SELECT ON TABLE blast_hits TO selectors;
GRANT ALL ON TABLE blast_hits TO core_admin;
GRANT INSERT ON TABLE blast_hits TO megxuser;


--
-- Name: blast_hits_id_seq; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON SEQUENCE blast_hits_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE blast_hits_id_seq FROM rkottman;
GRANT ALL ON SEQUENCE blast_hits_id_seq TO rkottman;
GRANT USAGE ON SEQUENCE blast_hits_id_seq TO megxuser;


--
-- Name: clonelib_dnas; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE clonelib_dnas FROM PUBLIC;
REVOKE ALL ON TABLE clonelib_dnas FROM rkottman;
GRANT ALL ON TABLE clonelib_dnas TO rkottman;
GRANT SELECT ON TABLE clonelib_dnas TO selectors;


--
-- Name: clonelibs; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE clonelibs FROM PUBLIC;
REVOKE ALL ON TABLE clonelibs FROM rkottman;
GRANT ALL ON TABLE clonelibs TO rkottman;
GRANT SELECT ON TABLE clonelibs TO selectors;


--
-- Name: clones; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE clones FROM PUBLIC;
REVOKE ALL ON TABLE clones FROM rkottman;
GRANT ALL ON TABLE clones TO rkottman;
GRANT SELECT ON TABLE clones TO selectors;


--
-- Name: dna_regions; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE dna_regions FROM PUBLIC;
REVOKE ALL ON TABLE dna_regions FROM rkottman;
GRANT ALL ON TABLE dna_regions TO rkottman;
GRANT SELECT ON TABLE dna_regions TO selectors;


--
-- Name: dna_seqs; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE dna_seqs FROM PUBLIC;
REVOKE ALL ON TABLE dna_seqs FROM rkottman;
GRANT ALL ON TABLE dna_seqs TO rkottman;
GRANT SELECT ON TABLE dna_seqs TO selectors;


--
-- Name: dna_seqs_msid_seq; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON SEQUENCE dna_seqs_msid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dna_seqs_msid_seq FROM rkottman;
GRANT ALL ON SEQUENCE dna_seqs_msid_seq TO rkottman;
GRANT SELECT ON SEQUENCE dna_seqs_msid_seq TO selectors;


--
-- Name: dna_set_mdata; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE dna_set_mdata FROM PUBLIC;
REVOKE ALL ON TABLE dna_set_mdata FROM rkottman;
GRANT ALL ON TABLE dna_set_mdata TO rkottman;
GRANT SELECT ON TABLE dna_set_mdata TO selectors;


--
-- Name: dna_sets; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE dna_sets FROM PUBLIC;
REVOKE ALL ON TABLE dna_sets FROM rkottman;
GRANT ALL ON TABLE dna_sets TO rkottman;
GRANT SELECT ON TABLE dna_sets TO selectors;


--
-- Name: geo_regions; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE geo_regions FROM PUBLIC;
REVOKE ALL ON TABLE geo_regions FROM rkottman;
GRANT ALL ON TABLE geo_regions TO rkottman;
GRANT SELECT ON TABLE geo_regions TO selectors;


--
-- Name: id_codes; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE id_codes FROM PUBLIC;
REVOKE ALL ON TABLE id_codes FROM rkottman;
GRANT ALL ON TABLE id_codes TO rkottman;
GRANT SELECT ON TABLE id_codes TO selectors;


--
-- Name: isolate_sites; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE isolate_sites FROM PUBLIC;
REVOKE ALL ON TABLE isolate_sites FROM rkottman;
GRANT ALL ON TABLE isolate_sites TO rkottman;
GRANT SELECT ON TABLE isolate_sites TO selectors;


--
-- Name: journals; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE journals FROM PUBLIC;
REVOKE ALL ON TABLE journals FROM rkottman;
GRANT ALL ON TABLE journals TO rkottman;
GRANT SELECT ON TABLE journals TO selectors;


--
-- Name: journals_gid_seq; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON SEQUENCE journals_gid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE journals_gid_seq FROM rkottman;
GRANT ALL ON SEQUENCE journals_gid_seq TO rkottman;
GRANT SELECT ON SEQUENCE journals_gid_seq TO selectors;


--
-- Name: logins; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE logins FROM PUBLIC;
REVOKE ALL ON TABLE logins FROM rkottman;
GRANT ALL ON TABLE logins TO rkottman;
GRANT SELECT ON TABLE logins TO selectors;
GRANT REFERENCES ON TABLE logins TO curators;
GRANT SELECT ON TABLE logins TO megxuser;
GRANT SELECT ON TABLE logins TO megx_team;


--
-- Name: mg_studies; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE mg_studies FROM PUBLIC;
REVOKE ALL ON TABLE mg_studies FROM rkottman;
GRANT ALL ON TABLE mg_studies TO rkottman;
GRANT SELECT ON TABLE mg_studies TO selectors;


--
-- Name: multiregion_members; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE multiregion_members FROM PUBLIC;
REVOKE ALL ON TABLE multiregion_members FROM rkottman;
GRANT ALL ON TABLE multiregion_members TO rkottman;
GRANT SELECT ON TABLE multiregion_members TO selectors;


--
-- Name: multiregions; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE multiregions FROM PUBLIC;
REVOKE ALL ON TABLE multiregions FROM rkottman;
GRANT ALL ON TABLE multiregions TO rkottman;
GRANT SELECT ON TABLE multiregions TO selectors;


--
-- Name: observation; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE observation FROM PUBLIC;
REVOKE ALL ON TABLE observation FROM rkottman;
GRANT ALL ON TABLE observation TO rkottman;
GRANT SELECT ON TABLE observation TO selectors;


--
-- Name: observation_gid_seq; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON SEQUENCE observation_gid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE observation_gid_seq FROM rkottman;
GRANT ALL ON SEQUENCE observation_gid_seq TO rkottman;
GRANT SELECT ON SEQUENCE observation_gid_seq TO selectors;


--
-- Name: organisms; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE organisms FROM PUBLIC;
REVOKE ALL ON TABLE organisms FROM rkottman;
GRANT ALL ON TABLE organisms TO rkottman;
GRANT SELECT ON TABLE organisms TO selectors;


--
-- Name: person_roles; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE person_roles FROM PUBLIC;
REVOKE ALL ON TABLE person_roles FROM rkottman;
GRANT ALL ON TABLE person_roles TO rkottman;
GRANT SELECT ON TABLE person_roles TO selectors;


--
-- Name: pfam_group_descr; Type: ACL; Schema: core; Owner: ikostadi
--

REVOKE ALL ON TABLE pfam_group_descr FROM PUBLIC;
REVOKE ALL ON TABLE pfam_group_descr FROM ikostadi;
GRANT ALL ON TABLE pfam_group_descr TO ikostadi;
GRANT ALL ON TABLE pfam_group_descr TO curation_admin;
GRANT SELECT,INSERT,UPDATE ON TABLE pfam_group_descr TO megx_team;


--
-- Name: pfam_groups; Type: ACL; Schema: core; Owner: core_admin
--

REVOKE ALL ON TABLE pfam_groups FROM PUBLIC;
REVOKE ALL ON TABLE pfam_groups FROM core_admin;
GRANT ALL ON TABLE pfam_groups TO core_admin;
GRANT ALL ON TABLE pfam_groups TO curation_admin;
GRANT SELECT,INSERT,UPDATE ON TABLE pfam_groups TO megx_team;


--
-- Name: privs; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE privs FROM PUBLIC;
REVOKE ALL ON TABLE privs FROM rkottman;
GRANT ALL ON TABLE privs TO rkottman;
GRANT SELECT ON TABLE privs TO selectors;


--
-- Name: projects; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE projects FROM PUBLIC;
REVOKE ALL ON TABLE projects FROM rkottman;
GRANT ALL ON TABLE projects TO rkottman;
GRANT SELECT ON TABLE projects TO selectors;
GRANT SELECT ON TABLE projects TO megx_team;


--
-- Name: role_links; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE role_links FROM PUBLIC;
REVOKE ALL ON TABLE role_links FROM rkottman;
GRANT ALL ON TABLE role_links TO rkottman;
GRANT SELECT ON TABLE role_links TO selectors;


--
-- Name: role_privs; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE role_privs FROM PUBLIC;
REVOKE ALL ON TABLE role_privs FROM rkottman;
GRANT ALL ON TABLE role_privs TO rkottman;
GRANT SELECT ON TABLE role_privs TO selectors;


--
-- Name: roles; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE roles FROM PUBLIC;
REVOKE ALL ON TABLE roles FROM rkottman;
GRANT ALL ON TABLE roles TO rkottman;
GRANT SELECT ON TABLE roles TO selectors;


--
-- Name: sample_measures; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE sample_measures FROM PUBLIC;
REVOKE ALL ON TABLE sample_measures FROM rkottman;
GRANT ALL ON TABLE sample_measures TO rkottman;
GRANT SELECT ON TABLE sample_measures TO selectors;


--
-- Name: sample_measures_mid_seq; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON SEQUENCE sample_measures_mid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sample_measures_mid_seq FROM rkottman;
GRANT ALL ON SEQUENCE sample_measures_mid_seq TO rkottman;
GRANT SELECT ON SEQUENCE sample_measures_mid_seq TO selectors;


--
-- Name: sample_pools; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE sample_pools FROM PUBLIC;
REVOKE ALL ON TABLE sample_pools FROM rkottman;
GRANT ALL ON TABLE sample_pools TO rkottman;
GRANT SELECT ON TABLE sample_pools TO selectors;


--
-- Name: sample_set_mdata; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE sample_set_mdata FROM PUBLIC;
REVOKE ALL ON TABLE sample_set_mdata FROM rkottman;
GRANT ALL ON TABLE sample_set_mdata TO rkottman;
GRANT SELECT ON TABLE sample_set_mdata TO selectors;


--
-- Name: sample_sets; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE sample_sets FROM PUBLIC;
REVOKE ALL ON TABLE sample_sets FROM rkottman;
GRANT ALL ON TABLE sample_sets TO rkottman;
GRANT SELECT ON TABLE sample_sets TO selectors;


--
-- Name: sampleid_seq; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON SEQUENCE sampleid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sampleid_seq FROM rkottman;
GRANT ALL ON SEQUENCE sampleid_seq TO rkottman;
GRANT SELECT ON SEQUENCE sampleid_seq TO selectors;


--
-- Name: samples_audit_old; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE samples_audit_old FROM PUBLIC;
REVOKE ALL ON TABLE samples_audit_old FROM rkottman;
GRANT ALL ON TABLE samples_audit_old TO rkottman;


--
-- Name: samplingsites_id_seq; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON SEQUENCE samplingsites_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE samplingsites_id_seq FROM rkottman;
GRANT ALL ON SEQUENCE samplingsites_id_seq TO rkottman;
GRANT SELECT ON SEQUENCE samplingsites_id_seq TO selectors;


--
-- Name: seq_regions; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE seq_regions FROM PUBLIC;
REVOKE ALL ON TABLE seq_regions FROM rkottman;
GRANT ALL ON TABLE seq_regions TO rkottman;
GRANT SELECT ON TABLE seq_regions TO selectors;


--
-- Name: sequenceentries; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE sequenceentries FROM PUBLIC;
REVOKE ALL ON TABLE sequenceentries FROM rkottman;
GRANT ALL ON TABLE sequenceentries TO rkottman;
GRANT SELECT ON TABLE sequenceentries TO selectors;


--
-- Name: sequenceentries_gid_seq; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON SEQUENCE sequenceentries_gid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE sequenceentries_gid_seq FROM rkottman;
GRANT ALL ON SEQUENCE sequenceentries_gid_seq TO rkottman;
GRANT SELECT ON SEQUENCE sequenceentries_gid_seq TO selectors;


--
-- Name: studies; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE studies FROM PUBLIC;
REVOKE ALL ON TABLE studies FROM rkottman;
GRANT ALL ON TABLE studies TO rkottman;
GRANT SELECT ON TABLE studies TO megx_team;


--
-- Name: tags; Type: ACL; Schema: core; Owner: ikostadi
--

REVOKE ALL ON TABLE tags FROM PUBLIC;
REVOKE ALL ON TABLE tags FROM ikostadi;
GRANT ALL ON TABLE tags TO ikostadi;
GRANT SELECT ON TABLE tags TO megx_team;


--
-- Name: tags.tag; Type: ACL; Schema: core; Owner: ikostadi
--

REVOKE ALL(tag) ON TABLE tags FROM PUBLIC;
REVOKE ALL(tag) ON TABLE tags FROM ikostadi;
GRANT SELECT(tag),INSERT(tag) ON TABLE tags TO curators;


--
-- Name: tags.time_added; Type: ACL; Schema: core; Owner: ikostadi
--

REVOKE ALL(time_added) ON TABLE tags FROM PUBLIC;
REVOKE ALL(time_added) ON TABLE tags FROM ikostadi;
GRANT SELECT(time_added) ON TABLE tags TO curators;


--
-- Name: tags.tag_count; Type: ACL; Schema: core; Owner: ikostadi
--

REVOKE ALL(tag_count) ON TABLE tags FROM PUBLIC;
REVOKE ALL(tag_count) ON TABLE tags FROM ikostadi;
GRANT SELECT(tag_count),UPDATE(tag_count) ON TABLE tags TO curators;


--
-- Name: tool_dna_runs; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE tool_dna_runs FROM PUBLIC;
REVOKE ALL ON TABLE tool_dna_runs FROM rkottman;
GRANT ALL ON TABLE tool_dna_runs TO rkottman;
GRANT SELECT ON TABLE tool_dna_runs TO selectors;
GRANT ALL ON TABLE tool_dna_runs TO core_admin;


--
-- Name: tool_versions; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE tool_versions FROM PUBLIC;
REVOKE ALL ON TABLE tool_versions FROM rkottman;
GRANT ALL ON TABLE tool_versions TO rkottman;
GRANT SELECT ON TABLE tool_versions TO selectors;
GRANT ALL ON TABLE tool_versions TO core_admin;


--
-- Name: tools; Type: ACL; Schema: core; Owner: rkottman
--

REVOKE ALL ON TABLE tools FROM PUBLIC;
REVOKE ALL ON TABLE tools FROM rkottman;
GRANT ALL ON TABLE tools TO rkottman;
GRANT SELECT ON TABLE tools TO selectors;
GRANT ALL ON TABLE tools TO core_admin;


SET search_path = cv, pg_catalog;

--
-- Name: assembly_status; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE assembly_status FROM PUBLIC;
REVOKE ALL ON TABLE assembly_status FROM rkottman;
GRANT ALL ON TABLE assembly_status TO rkottman;
GRANT ALL ON TABLE assembly_status TO megdb_admin;
GRANT SELECT ON TABLE assembly_status TO selectors;
GRANT SELECT,REFERENCES ON TABLE assembly_status TO megx_team;


--
-- Name: biotic_relationship; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE biotic_relationship FROM PUBLIC;
REVOKE ALL ON TABLE biotic_relationship FROM rkottman;
GRANT ALL ON TABLE biotic_relationship TO rkottman;
GRANT ALL ON TABLE biotic_relationship TO megdb_admin;
GRANT SELECT ON TABLE biotic_relationship TO selectors;
GRANT SELECT,REFERENCES ON TABLE biotic_relationship TO megx_team;


--
-- Name: envo_lite; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE envo_lite FROM PUBLIC;
REVOKE ALL ON TABLE envo_lite FROM rkottman;
GRANT ALL ON TABLE envo_lite TO rkottman;
GRANT SELECT,REFERENCES ON TABLE envo_lite TO megx_team;


--
-- Name: estim_codes; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE estim_codes FROM PUBLIC;
REVOKE ALL ON TABLE estim_codes FROM rkottman;
GRANT ALL ON TABLE estim_codes TO rkottman;
GRANT ALL ON TABLE estim_codes TO megdb_admin;
GRANT SELECT ON TABLE estim_codes TO selectors;
GRANT SELECT,REFERENCES ON TABLE estim_codes TO megx_team;


--
-- Name: gencodes; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE gencodes FROM PUBLIC;
REVOKE ALL ON TABLE gencodes FROM rkottman;
GRANT ALL ON TABLE gencodes TO rkottman;
GRANT SELECT,REFERENCES ON TABLE gencodes TO megx_team;


--
-- Name: genome_materials; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE genome_materials FROM PUBLIC;
REVOKE ALL ON TABLE genome_materials FROM rkottman;
GRANT ALL ON TABLE genome_materials TO rkottman;
GRANT ALL ON TABLE genome_materials TO megdb_admin;
GRANT SELECT ON TABLE genome_materials TO selectors;
GRANT SELECT,REFERENCES ON TABLE genome_materials TO megx_team;


--
-- Name: genome_project_status; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE genome_project_status FROM PUBLIC;
REVOKE ALL ON TABLE genome_project_status FROM rkottman;
GRANT ALL ON TABLE genome_project_status TO rkottman;
GRANT SELECT,REFERENCES ON TABLE genome_project_status TO megx_team;


--
-- Name: habitat; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE habitat FROM PUBLIC;
REVOKE ALL ON TABLE habitat FROM rkottman;
GRANT ALL ON TABLE habitat TO rkottman;
GRANT SELECT,REFERENCES ON TABLE habitat TO megx_team;


--
-- Name: habitat_lite; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE habitat_lite FROM PUBLIC;
REVOKE ALL ON TABLE habitat_lite FROM rkottman;
GRANT ALL ON TABLE habitat_lite TO rkottman;
GRANT ALL ON TABLE habitat_lite TO megdb_admin;
GRANT SELECT ON TABLE habitat_lite TO selectors;
GRANT SELECT,REFERENCES ON TABLE habitat_lite TO megx_team;


--
-- Name: insdc_features; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE insdc_features FROM PUBLIC;
REVOKE ALL ON TABLE insdc_features FROM rkottman;
GRANT ALL ON TABLE insdc_features TO rkottman;
GRANT ALL ON TABLE insdc_features TO megdb_admin;
GRANT SELECT ON TABLE insdc_features TO selectors;
GRANT SELECT,REFERENCES ON TABLE insdc_features TO megx_team;


--
-- Name: mcodes; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE mcodes FROM PUBLIC;
REVOKE ALL ON TABLE mcodes FROM rkottman;
GRANT ALL ON TABLE mcodes TO rkottman;
GRANT SELECT ON TABLE mcodes TO selectors;
GRANT ALL ON TABLE mcodes TO megdb_admin;
GRANT SELECT,REFERENCES ON TABLE mcodes TO megx_team;


--
-- Name: parameters; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE parameters FROM PUBLIC;
REVOKE ALL ON TABLE parameters FROM rkottman;
GRANT ALL ON TABLE parameters TO rkottman;
GRANT ALL ON TABLE parameters TO megdb_admin;
GRANT SELECT ON TABLE parameters TO selectors;
GRANT SELECT,REFERENCES ON TABLE parameters TO megx_team;


--
-- Name: sample_materials; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE sample_materials FROM PUBLIC;
REVOKE ALL ON TABLE sample_materials FROM rkottman;
GRANT ALL ON TABLE sample_materials TO rkottman;
GRANT SELECT ON TABLE sample_materials TO selectors;
GRANT ALL ON TABLE sample_materials TO megdb_admin WITH GRANT OPTION;
GRANT SELECT,REFERENCES ON TABLE sample_materials TO megx_team;


--
-- Name: seq_approaches; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE seq_approaches FROM PUBLIC;
REVOKE ALL ON TABLE seq_approaches FROM rkottman;
GRANT ALL ON TABLE seq_approaches TO rkottman;
GRANT SELECT,REFERENCES ON TABLE seq_approaches TO megx_team;


--
-- Name: seq_methods; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE seq_methods FROM PUBLIC;
REVOKE ALL ON TABLE seq_methods FROM rkottman;
GRANT ALL ON TABLE seq_methods TO rkottman;
GRANT ALL ON TABLE seq_methods TO megdb_admin;
GRANT SELECT ON TABLE seq_methods TO selectors;
GRANT SELECT,REFERENCES ON TABLE seq_methods TO megx_team;


--
-- Name: seq_platforms; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE seq_platforms FROM PUBLIC;
REVOKE ALL ON TABLE seq_platforms FROM rkottman;
GRANT ALL ON TABLE seq_platforms TO rkottman;
GRANT SELECT,REFERENCES ON TABLE seq_platforms TO megx_team;


--
-- Name: unit_definitions; Type: ACL; Schema: cv; Owner: rkottman
--

REVOKE ALL ON TABLE unit_definitions FROM PUBLIC;
REVOKE ALL ON TABLE unit_definitions FROM rkottman;
GRANT ALL ON TABLE unit_definitions TO rkottman;
GRANT SELECT,REFERENCES ON TABLE unit_definitions TO megx_team;


SET search_path = elayers, pg_catalog;

--
-- Name: chlorophyll; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE chlorophyll FROM PUBLIC;
REVOKE ALL ON TABLE chlorophyll FROM rkottman;
GRANT ALL ON TABLE chlorophyll TO rkottman;
GRANT SELECT ON TABLE chlorophyll TO selectors;
GRANT SELECT ON TABLE chlorophyll TO megxuser;


--
-- Name: chlorophyll_gid_seq; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON SEQUENCE chlorophyll_gid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE chlorophyll_gid_seq FROM rkottman;
GRANT ALL ON SEQUENCE chlorophyll_gid_seq TO rkottman;
GRANT SELECT ON SEQUENCE chlorophyll_gid_seq TO selectors;


--
-- Name: country; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE country FROM PUBLIC;
REVOKE ALL ON TABLE country FROM rkottman;
GRANT ALL ON TABLE country TO rkottman;
GRANT SELECT ON TABLE country TO selectors;
GRANT SELECT ON TABLE country TO megxuser;


--
-- Name: lake_quality_po; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE lake_quality_po FROM PUBLIC;
REVOKE ALL ON TABLE lake_quality_po FROM rkottman;
GRANT ALL ON TABLE lake_quality_po TO rkottman;
GRANT SELECT ON TABLE lake_quality_po TO selectors;
GRANT SELECT ON TABLE lake_quality_po TO megxuser;


--
-- Name: longhurst_regions; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE longhurst_regions FROM PUBLIC;
REVOKE ALL ON TABLE longhurst_regions FROM rkottman;
GRANT ALL ON TABLE longhurst_regions TO rkottman;
GRANT SELECT ON TABLE longhurst_regions TO megxuser;
GRANT SELECT,UPDATE ON TABLE longhurst_regions TO curators;


--
-- Name: marine_protected_area; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE marine_protected_area FROM PUBLIC;
REVOKE ALL ON TABLE marine_protected_area FROM rkottman;
GRANT ALL ON TABLE marine_protected_area TO rkottman;
GRANT SELECT ON TABLE marine_protected_area TO selectors;
GRANT SELECT ON TABLE marine_protected_area TO megxuser;


--
-- Name: ocean_limits; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE ocean_limits FROM PUBLIC;
REVOKE ALL ON TABLE ocean_limits FROM rkottman;
GRANT ALL ON TABLE ocean_limits TO rkottman;
GRANT SELECT ON TABLE ocean_limits TO selectors;
GRANT SELECT ON TABLE ocean_limits TO megxuser;


--
-- Name: seasons; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE seasons FROM PUBLIC;
REVOKE ALL ON TABLE seasons FROM rkottman;
GRANT ALL ON TABLE seasons TO rkottman;
GRANT SELECT ON TABLE seasons TO selectors;
GRANT SELECT ON TABLE seasons TO megxuser;


--
-- Name: standard_levels; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE standard_levels FROM PUBLIC;
REVOKE ALL ON TABLE standard_levels FROM rkottman;
GRANT ALL ON TABLE standard_levels TO rkottman;
GRANT SELECT ON TABLE standard_levels TO selectors;
GRANT SELECT ON TABLE standard_levels TO megxuser;


--
-- Name: whale_falls; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE whale_falls FROM PUBLIC;
REVOKE ALL ON TABLE whale_falls FROM rkottman;
GRANT ALL ON TABLE whale_falls TO rkottman;
GRANT SELECT ON TABLE whale_falls TO selectors;


--
-- Name: woa05_nitrate; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE woa05_nitrate FROM PUBLIC;
REVOKE ALL ON TABLE woa05_nitrate FROM rkottman;
GRANT ALL ON TABLE woa05_nitrate TO rkottman;
GRANT SELECT ON TABLE woa05_nitrate TO selectors;
GRANT SELECT ON TABLE woa05_nitrate TO megxuser;


--
-- Name: woa05_nitrate_stability; Type: ACL; Schema: elayers; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_nitrate_stability FROM PUBLIC;
REVOKE ALL ON TABLE woa05_nitrate_stability FROM ikostadi;
GRANT ALL ON TABLE woa05_nitrate_stability TO ikostadi;
GRANT SELECT ON TABLE woa05_nitrate_stability TO selectors;
GRANT SELECT ON TABLE woa05_nitrate_stability TO megx_team;
GRANT SELECT ON TABLE woa05_nitrate_stability TO megxuser;


--
-- Name: woa05_oxygen_dissolved; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE woa05_oxygen_dissolved FROM PUBLIC;
REVOKE ALL ON TABLE woa05_oxygen_dissolved FROM rkottman;
GRANT ALL ON TABLE woa05_oxygen_dissolved TO rkottman;
GRANT SELECT ON TABLE woa05_oxygen_dissolved TO selectors;
GRANT SELECT ON TABLE woa05_oxygen_dissolved TO megxuser;


--
-- Name: woa05_oxygen_dissolved_stability; Type: ACL; Schema: elayers; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_oxygen_dissolved_stability FROM PUBLIC;
REVOKE ALL ON TABLE woa05_oxygen_dissolved_stability FROM ikostadi;
GRANT ALL ON TABLE woa05_oxygen_dissolved_stability TO ikostadi;
GRANT SELECT ON TABLE woa05_oxygen_dissolved_stability TO selectors;
GRANT SELECT ON TABLE woa05_oxygen_dissolved_stability TO megx_team;


--
-- Name: woa05_oxygen_saturation; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE woa05_oxygen_saturation FROM PUBLIC;
REVOKE ALL ON TABLE woa05_oxygen_saturation FROM rkottman;
GRANT ALL ON TABLE woa05_oxygen_saturation TO rkottman;
GRANT SELECT ON TABLE woa05_oxygen_saturation TO selectors;
GRANT SELECT ON TABLE woa05_oxygen_saturation TO megxuser;


--
-- Name: woa05_oxygen_saturation_stability; Type: ACL; Schema: elayers; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_oxygen_saturation_stability FROM PUBLIC;
REVOKE ALL ON TABLE woa05_oxygen_saturation_stability FROM ikostadi;
GRANT ALL ON TABLE woa05_oxygen_saturation_stability TO ikostadi;
GRANT SELECT ON TABLE woa05_oxygen_saturation_stability TO selectors;
GRANT SELECT ON TABLE woa05_oxygen_saturation_stability TO megx_team;


--
-- Name: woa05_oxygen_utilization; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE woa05_oxygen_utilization FROM PUBLIC;
REVOKE ALL ON TABLE woa05_oxygen_utilization FROM rkottman;
GRANT ALL ON TABLE woa05_oxygen_utilization TO rkottman;
GRANT SELECT ON TABLE woa05_oxygen_utilization TO selectors;
GRANT SELECT ON TABLE woa05_oxygen_utilization TO megxuser;


--
-- Name: woa05_oxygen_utilization_stability; Type: ACL; Schema: elayers; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_oxygen_utilization_stability FROM PUBLIC;
REVOKE ALL ON TABLE woa05_oxygen_utilization_stability FROM ikostadi;
GRANT ALL ON TABLE woa05_oxygen_utilization_stability TO ikostadi;
GRANT SELECT ON TABLE woa05_oxygen_utilization_stability TO selectors;
GRANT SELECT ON TABLE woa05_oxygen_utilization_stability TO megx_team;


--
-- Name: woa05_phosphate; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE woa05_phosphate FROM PUBLIC;
REVOKE ALL ON TABLE woa05_phosphate FROM rkottman;
GRANT ALL ON TABLE woa05_phosphate TO rkottman;
GRANT SELECT ON TABLE woa05_phosphate TO selectors;
GRANT SELECT ON TABLE woa05_phosphate TO megxuser;


--
-- Name: woa05_phosphate_stability; Type: ACL; Schema: elayers; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_phosphate_stability FROM PUBLIC;
REVOKE ALL ON TABLE woa05_phosphate_stability FROM ikostadi;
GRANT ALL ON TABLE woa05_phosphate_stability TO ikostadi;
GRANT SELECT ON TABLE woa05_phosphate_stability TO selectors;
GRANT SELECT ON TABLE woa05_phosphate_stability TO megx_team;


--
-- Name: woa05_salinity; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE woa05_salinity FROM PUBLIC;
REVOKE ALL ON TABLE woa05_salinity FROM rkottman;
GRANT ALL ON TABLE woa05_salinity TO rkottman;
GRANT SELECT ON TABLE woa05_salinity TO selectors;
GRANT SELECT ON TABLE woa05_salinity TO megxuser;


--
-- Name: woa05_salinity_stability; Type: ACL; Schema: elayers; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_salinity_stability FROM PUBLIC;
REVOKE ALL ON TABLE woa05_salinity_stability FROM ikostadi;
GRANT ALL ON TABLE woa05_salinity_stability TO ikostadi;
GRANT SELECT ON TABLE woa05_salinity_stability TO selectors;
GRANT SELECT ON TABLE woa05_salinity_stability TO megx_team;


--
-- Name: woa05_silicate; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE woa05_silicate FROM PUBLIC;
REVOKE ALL ON TABLE woa05_silicate FROM rkottman;
GRANT ALL ON TABLE woa05_silicate TO rkottman;
GRANT SELECT ON TABLE woa05_silicate TO selectors;
GRANT SELECT ON TABLE woa05_silicate TO megxuser;


--
-- Name: woa05_silicate_stability; Type: ACL; Schema: elayers; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_silicate_stability FROM PUBLIC;
REVOKE ALL ON TABLE woa05_silicate_stability FROM ikostadi;
GRANT ALL ON TABLE woa05_silicate_stability TO ikostadi;
GRANT SELECT ON TABLE woa05_silicate_stability TO selectors;
GRANT SELECT ON TABLE woa05_silicate_stability TO megx_team;


--
-- Name: woa05_temperature; Type: ACL; Schema: elayers; Owner: rkottman
--

REVOKE ALL ON TABLE woa05_temperature FROM PUBLIC;
REVOKE ALL ON TABLE woa05_temperature FROM rkottman;
GRANT ALL ON TABLE woa05_temperature TO rkottman;
GRANT SELECT ON TABLE woa05_temperature TO selectors;
GRANT SELECT ON TABLE woa05_temperature TO megxuser;


--
-- Name: woa05_temperature_stability; Type: ACL; Schema: elayers; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_temperature_stability FROM PUBLIC;
REVOKE ALL ON TABLE woa05_temperature_stability FROM ikostadi;
GRANT ALL ON TABLE woa05_temperature_stability TO ikostadi;
GRANT SELECT ON TABLE woa05_temperature_stability TO selectors;
GRANT SELECT ON TABLE woa05_temperature_stability TO megx_team;


SET search_path = stage_r8, pg_catalog;

--
-- Name: camera_read_sample; Type: ACL; Schema: stage_r8; Owner: rkottman
--

REVOKE ALL ON TABLE camera_read_sample FROM PUBLIC;
REVOKE ALL ON TABLE camera_read_sample FROM rkottman;
GRANT ALL ON TABLE camera_read_sample TO rkottman;
GRANT SELECT ON TABLE camera_read_sample TO selectors;
GRANT SELECT ON TABLE camera_read_sample TO megx_team WITH GRANT OPTION;


SET search_path = pfam_24, pg_catalog;

--
-- Name: pfama; Type: ACL; Schema: pfam_24; Owner: ikostadi
--

REVOKE ALL ON TABLE pfama FROM PUBLIC;
REVOKE ALL ON TABLE pfama FROM ikostadi;
GRANT ALL ON TABLE pfama TO ikostadi;
GRANT SELECT ON TABLE pfama TO selectors;
GRANT ALL ON TABLE pfama TO pfam_admin;


SET search_path = mfdata, pg_catalog;

--
-- Name: sil_12_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_12_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_12_grid FROM rkottman;
GRANT ALL ON TABLE sil_12_grid TO rkottman;
GRANT SELECT ON TABLE sil_12_grid TO selectors;
GRANT SELECT ON TABLE sil_12_grid TO megxuser;


--
-- Name: b_interpol; Type: ACL; Schema: mfdata; Owner: megxuser
--

REVOKE ALL ON TABLE b_interpol FROM PUBLIC;
REVOKE ALL ON TABLE b_interpol FROM megxuser;
GRANT ALL ON TABLE b_interpol TO megxuser;
GRANT SELECT ON TABLE b_interpol TO selectors;


--
-- Name: chloro_0000_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_0000_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_0000_grid FROM rkottman;
GRANT ALL ON TABLE chloro_0000_grid TO rkottman;
GRANT SELECT ON TABLE chloro_0000_grid TO selectors;
GRANT SELECT ON TABLE chloro_0000_grid TO megxuser;


--
-- Name: chloro_1997_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_1997_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_1997_grid FROM rkottman;
GRANT ALL ON TABLE chloro_1997_grid TO rkottman;
GRANT SELECT ON TABLE chloro_1997_grid TO selectors;
GRANT SELECT ON TABLE chloro_1997_grid TO megxuser;


--
-- Name: chloro_1998_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_1998_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_1998_grid FROM rkottman;
GRANT ALL ON TABLE chloro_1998_grid TO rkottman;
GRANT SELECT ON TABLE chloro_1998_grid TO selectors;
GRANT SELECT ON TABLE chloro_1998_grid TO megxuser;


--
-- Name: chloro_1999_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_1999_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_1999_grid FROM rkottman;
GRANT ALL ON TABLE chloro_1999_grid TO rkottman;
GRANT SELECT ON TABLE chloro_1999_grid TO selectors;
GRANT SELECT ON TABLE chloro_1999_grid TO megxuser;


--
-- Name: chloro_2000_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_2000_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_2000_grid FROM rkottman;
GRANT ALL ON TABLE chloro_2000_grid TO rkottman;
GRANT SELECT ON TABLE chloro_2000_grid TO selectors;
GRANT SELECT ON TABLE chloro_2000_grid TO megxuser;


--
-- Name: chloro_2001_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_2001_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_2001_grid FROM rkottman;
GRANT ALL ON TABLE chloro_2001_grid TO rkottman;
GRANT SELECT ON TABLE chloro_2001_grid TO selectors;
GRANT SELECT ON TABLE chloro_2001_grid TO megxuser;


--
-- Name: chloro_2002_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_2002_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_2002_grid FROM rkottman;
GRANT ALL ON TABLE chloro_2002_grid TO rkottman;
GRANT SELECT ON TABLE chloro_2002_grid TO selectors;
GRANT SELECT ON TABLE chloro_2002_grid TO megxuser;


--
-- Name: chloro_2003_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_2003_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_2003_grid FROM rkottman;
GRANT ALL ON TABLE chloro_2003_grid TO rkottman;
GRANT SELECT ON TABLE chloro_2003_grid TO selectors;
GRANT SELECT ON TABLE chloro_2003_grid TO megxuser;


--
-- Name: chloro_2004_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_2004_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_2004_grid FROM rkottman;
GRANT ALL ON TABLE chloro_2004_grid TO rkottman;
GRANT SELECT ON TABLE chloro_2004_grid TO selectors;
GRANT SELECT ON TABLE chloro_2004_grid TO megxuser;


--
-- Name: chloro_2005_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_2005_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_2005_grid FROM rkottman;
GRANT ALL ON TABLE chloro_2005_grid TO rkottman;
GRANT SELECT ON TABLE chloro_2005_grid TO selectors;
GRANT SELECT ON TABLE chloro_2005_grid TO megxuser;


--
-- Name: chloro_2006_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_2006_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_2006_grid FROM rkottman;
GRANT ALL ON TABLE chloro_2006_grid TO rkottman;
GRANT SELECT ON TABLE chloro_2006_grid TO selectors;
GRANT SELECT ON TABLE chloro_2006_grid TO megxuser;


--
-- Name: chloro_cv_0000_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_cv_0000_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_cv_0000_grid FROM rkottman;
GRANT ALL ON TABLE chloro_cv_0000_grid TO rkottman;
GRANT SELECT ON TABLE chloro_cv_0000_grid TO selectors;
GRANT SELECT ON TABLE chloro_cv_0000_grid TO megxuser;


--
-- Name: chloro_cv_1997_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_cv_1997_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_cv_1997_grid FROM rkottman;
GRANT ALL ON TABLE chloro_cv_1997_grid TO rkottman;
GRANT SELECT ON TABLE chloro_cv_1997_grid TO selectors;
GRANT SELECT ON TABLE chloro_cv_1997_grid TO megxuser;


--
-- Name: chloro_cv_1998_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_cv_1998_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_cv_1998_grid FROM rkottman;
GRANT ALL ON TABLE chloro_cv_1998_grid TO rkottman;
GRANT SELECT ON TABLE chloro_cv_1998_grid TO selectors;
GRANT SELECT ON TABLE chloro_cv_1998_grid TO megxuser;


--
-- Name: chloro_cv_1999_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_cv_1999_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_cv_1999_grid FROM rkottman;
GRANT ALL ON TABLE chloro_cv_1999_grid TO rkottman;
GRANT SELECT ON TABLE chloro_cv_1999_grid TO selectors;
GRANT SELECT ON TABLE chloro_cv_1999_grid TO megxuser;


--
-- Name: chloro_cv_2000_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_cv_2000_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_cv_2000_grid FROM rkottman;
GRANT ALL ON TABLE chloro_cv_2000_grid TO rkottman;
GRANT SELECT ON TABLE chloro_cv_2000_grid TO selectors;
GRANT SELECT ON TABLE chloro_cv_2000_grid TO megxuser;


--
-- Name: chloro_cv_2001_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_cv_2001_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_cv_2001_grid FROM rkottman;
GRANT ALL ON TABLE chloro_cv_2001_grid TO rkottman;
GRANT SELECT ON TABLE chloro_cv_2001_grid TO selectors;
GRANT SELECT ON TABLE chloro_cv_2001_grid TO megxuser;


--
-- Name: chloro_cv_2002_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_cv_2002_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_cv_2002_grid FROM rkottman;
GRANT ALL ON TABLE chloro_cv_2002_grid TO rkottman;
GRANT SELECT ON TABLE chloro_cv_2002_grid TO selectors;
GRANT SELECT ON TABLE chloro_cv_2002_grid TO megxuser;


--
-- Name: chloro_cv_2003_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_cv_2003_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_cv_2003_grid FROM rkottman;
GRANT ALL ON TABLE chloro_cv_2003_grid TO rkottman;
GRANT SELECT ON TABLE chloro_cv_2003_grid TO selectors;
GRANT SELECT ON TABLE chloro_cv_2003_grid TO megxuser;


--
-- Name: chloro_cv_2004_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_cv_2004_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_cv_2004_grid FROM rkottman;
GRANT ALL ON TABLE chloro_cv_2004_grid TO rkottman;
GRANT SELECT ON TABLE chloro_cv_2004_grid TO selectors;
GRANT SELECT ON TABLE chloro_cv_2004_grid TO megxuser;


--
-- Name: chloro_cv_2005_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_cv_2005_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_cv_2005_grid FROM rkottman;
GRANT ALL ON TABLE chloro_cv_2005_grid TO rkottman;
GRANT SELECT ON TABLE chloro_cv_2005_grid TO selectors;
GRANT SELECT ON TABLE chloro_cv_2005_grid TO megxuser;


--
-- Name: chloro_cv_2006_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_cv_2006_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_cv_2006_grid FROM rkottman;
GRANT ALL ON TABLE chloro_cv_2006_grid TO rkottman;
GRANT SELECT ON TABLE chloro_cv_2006_grid TO selectors;
GRANT SELECT ON TABLE chloro_cv_2006_grid TO megxuser;


--
-- Name: chloro_ss_0000_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_ss_0000_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_ss_0000_grid FROM rkottman;
GRANT ALL ON TABLE chloro_ss_0000_grid TO rkottman;
GRANT SELECT ON TABLE chloro_ss_0000_grid TO selectors;
GRANT SELECT ON TABLE chloro_ss_0000_grid TO megxuser;


--
-- Name: chloro_ss_1997_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_ss_1997_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_ss_1997_grid FROM rkottman;
GRANT ALL ON TABLE chloro_ss_1997_grid TO rkottman;
GRANT SELECT ON TABLE chloro_ss_1997_grid TO selectors;
GRANT SELECT ON TABLE chloro_ss_1997_grid TO megxuser;


--
-- Name: chloro_ss_1998_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_ss_1998_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_ss_1998_grid FROM rkottman;
GRANT ALL ON TABLE chloro_ss_1998_grid TO rkottman;
GRANT SELECT ON TABLE chloro_ss_1998_grid TO selectors;
GRANT SELECT ON TABLE chloro_ss_1998_grid TO megxuser;


--
-- Name: chloro_ss_1999_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_ss_1999_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_ss_1999_grid FROM rkottman;
GRANT ALL ON TABLE chloro_ss_1999_grid TO rkottman;
GRANT SELECT ON TABLE chloro_ss_1999_grid TO selectors;
GRANT SELECT ON TABLE chloro_ss_1999_grid TO megxuser;


--
-- Name: chloro_ss_2000_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_ss_2000_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_ss_2000_grid FROM rkottman;
GRANT ALL ON TABLE chloro_ss_2000_grid TO rkottman;
GRANT SELECT ON TABLE chloro_ss_2000_grid TO selectors;
GRANT SELECT ON TABLE chloro_ss_2000_grid TO megxuser;


--
-- Name: chloro_ss_2001_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_ss_2001_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_ss_2001_grid FROM rkottman;
GRANT ALL ON TABLE chloro_ss_2001_grid TO rkottman;
GRANT SELECT ON TABLE chloro_ss_2001_grid TO selectors;
GRANT SELECT ON TABLE chloro_ss_2001_grid TO megxuser;


--
-- Name: chloro_ss_2002_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_ss_2002_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_ss_2002_grid FROM rkottman;
GRANT ALL ON TABLE chloro_ss_2002_grid TO rkottman;
GRANT SELECT ON TABLE chloro_ss_2002_grid TO selectors;
GRANT SELECT ON TABLE chloro_ss_2002_grid TO megxuser;


--
-- Name: chloro_ss_2003_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_ss_2003_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_ss_2003_grid FROM rkottman;
GRANT ALL ON TABLE chloro_ss_2003_grid TO rkottman;
GRANT SELECT ON TABLE chloro_ss_2003_grid TO selectors;
GRANT SELECT ON TABLE chloro_ss_2003_grid TO megxuser;


--
-- Name: chloro_ss_2004_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_ss_2004_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_ss_2004_grid FROM rkottman;
GRANT ALL ON TABLE chloro_ss_2004_grid TO rkottman;
GRANT SELECT ON TABLE chloro_ss_2004_grid TO selectors;
GRANT SELECT ON TABLE chloro_ss_2004_grid TO megxuser;


--
-- Name: chloro_ss_2005_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_ss_2005_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_ss_2005_grid FROM rkottman;
GRANT ALL ON TABLE chloro_ss_2005_grid TO rkottman;
GRANT SELECT ON TABLE chloro_ss_2005_grid TO selectors;
GRANT SELECT ON TABLE chloro_ss_2005_grid TO megxuser;


--
-- Name: chloro_ss_2006_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE chloro_ss_2006_grid FROM PUBLIC;
REVOKE ALL ON TABLE chloro_ss_2006_grid FROM rkottman;
GRANT ALL ON TABLE chloro_ss_2006_grid TO rkottman;
GRANT SELECT ON TABLE chloro_ss_2006_grid TO selectors;
GRANT SELECT ON TABLE chloro_ss_2006_grid TO megxuser;


--
-- Name: nitr_00_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_00_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_00_grid FROM rkottman;
GRANT ALL ON TABLE nitr_00_grid TO rkottman;
GRANT SELECT ON TABLE nitr_00_grid TO selectors;
GRANT SELECT ON TABLE nitr_00_grid TO megxuser;


--
-- Name: nitr_01_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_01_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_01_grid FROM rkottman;
GRANT ALL ON TABLE nitr_01_grid TO rkottman;
GRANT SELECT ON TABLE nitr_01_grid TO selectors;
GRANT SELECT ON TABLE nitr_01_grid TO megxuser;


--
-- Name: nitr_02_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_02_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_02_grid FROM rkottman;
GRANT ALL ON TABLE nitr_02_grid TO rkottman;
GRANT SELECT ON TABLE nitr_02_grid TO selectors;
GRANT SELECT ON TABLE nitr_02_grid TO megxuser;


--
-- Name: nitr_03_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_03_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_03_grid FROM rkottman;
GRANT ALL ON TABLE nitr_03_grid TO rkottman;
GRANT SELECT ON TABLE nitr_03_grid TO selectors;
GRANT SELECT ON TABLE nitr_03_grid TO megxuser;


--
-- Name: nitr_04_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_04_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_04_grid FROM rkottman;
GRANT ALL ON TABLE nitr_04_grid TO rkottman;
GRANT SELECT ON TABLE nitr_04_grid TO selectors;
GRANT SELECT ON TABLE nitr_04_grid TO megxuser;


--
-- Name: nitr_05_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_05_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_05_grid FROM rkottman;
GRANT ALL ON TABLE nitr_05_grid TO rkottman;
GRANT SELECT ON TABLE nitr_05_grid TO selectors;
GRANT SELECT ON TABLE nitr_05_grid TO megxuser;


--
-- Name: nitr_06_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_06_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_06_grid FROM rkottman;
GRANT ALL ON TABLE nitr_06_grid TO rkottman;
GRANT SELECT ON TABLE nitr_06_grid TO selectors;
GRANT SELECT ON TABLE nitr_06_grid TO megxuser;


--
-- Name: nitr_07_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_07_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_07_grid FROM rkottman;
GRANT ALL ON TABLE nitr_07_grid TO rkottman;
GRANT SELECT ON TABLE nitr_07_grid TO selectors;
GRANT SELECT ON TABLE nitr_07_grid TO megxuser;


--
-- Name: nitr_08_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_08_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_08_grid FROM rkottman;
GRANT ALL ON TABLE nitr_08_grid TO rkottman;
GRANT SELECT ON TABLE nitr_08_grid TO selectors;
GRANT SELECT ON TABLE nitr_08_grid TO megxuser;


--
-- Name: nitr_09_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_09_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_09_grid FROM rkottman;
GRANT ALL ON TABLE nitr_09_grid TO rkottman;
GRANT SELECT ON TABLE nitr_09_grid TO selectors;
GRANT SELECT ON TABLE nitr_09_grid TO megxuser;


--
-- Name: nitr_10_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_10_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_10_grid FROM rkottman;
GRANT ALL ON TABLE nitr_10_grid TO rkottman;
GRANT SELECT ON TABLE nitr_10_grid TO selectors;
GRANT SELECT ON TABLE nitr_10_grid TO megxuser;


--
-- Name: nitr_11_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_11_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_11_grid FROM rkottman;
GRANT ALL ON TABLE nitr_11_grid TO rkottman;
GRANT SELECT ON TABLE nitr_11_grid TO selectors;
GRANT SELECT ON TABLE nitr_11_grid TO megxuser;


--
-- Name: nitr_12_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_12_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_12_grid FROM rkottman;
GRANT ALL ON TABLE nitr_12_grid TO rkottman;
GRANT SELECT ON TABLE nitr_12_grid TO selectors;
GRANT SELECT ON TABLE nitr_12_grid TO megxuser;


--
-- Name: nitr_13_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_13_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_13_grid FROM rkottman;
GRANT ALL ON TABLE nitr_13_grid TO rkottman;
GRANT SELECT ON TABLE nitr_13_grid TO selectors;
GRANT SELECT ON TABLE nitr_13_grid TO megxuser;


--
-- Name: nitr_14_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_14_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_14_grid FROM rkottman;
GRANT ALL ON TABLE nitr_14_grid TO rkottman;
GRANT SELECT ON TABLE nitr_14_grid TO selectors;
GRANT SELECT ON TABLE nitr_14_grid TO megxuser;


--
-- Name: nitr_15_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_15_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_15_grid FROM rkottman;
GRANT ALL ON TABLE nitr_15_grid TO rkottman;
GRANT SELECT ON TABLE nitr_15_grid TO selectors;
GRANT SELECT ON TABLE nitr_15_grid TO megxuser;


--
-- Name: nitr_16_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE nitr_16_grid FROM PUBLIC;
REVOKE ALL ON TABLE nitr_16_grid FROM rkottman;
GRANT ALL ON TABLE nitr_16_grid TO rkottman;
GRANT SELECT ON TABLE nitr_16_grid TO selectors;
GRANT SELECT ON TABLE nitr_16_grid TO megxuser;


--
-- Name: oxy_dis_00_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_00_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_00_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_00_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_00_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_00_grid TO megxuser;


--
-- Name: oxy_dis_01_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_01_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_01_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_01_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_01_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_01_grid TO megxuser;


--
-- Name: oxy_dis_02_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_02_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_02_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_02_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_02_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_02_grid TO megxuser;


--
-- Name: oxy_dis_03_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_03_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_03_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_03_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_03_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_03_grid TO megxuser;


--
-- Name: oxy_dis_04_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_04_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_04_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_04_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_04_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_04_grid TO megxuser;


--
-- Name: oxy_dis_05_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_05_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_05_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_05_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_05_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_05_grid TO megxuser;


--
-- Name: oxy_dis_06_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_06_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_06_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_06_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_06_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_06_grid TO megxuser;


--
-- Name: oxy_dis_07_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_07_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_07_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_07_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_07_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_07_grid TO megxuser;


--
-- Name: oxy_dis_08_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_08_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_08_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_08_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_08_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_08_grid TO megxuser;


--
-- Name: oxy_dis_09_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_09_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_09_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_09_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_09_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_09_grid TO megxuser;


--
-- Name: oxy_dis_10_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_10_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_10_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_10_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_10_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_10_grid TO megxuser;


--
-- Name: oxy_dis_11_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_11_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_11_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_11_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_11_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_11_grid TO megxuser;


--
-- Name: oxy_dis_12_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_12_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_12_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_12_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_12_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_12_grid TO megxuser;


--
-- Name: oxy_dis_13_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_13_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_13_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_13_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_13_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_13_grid TO megxuser;


--
-- Name: oxy_dis_14_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_14_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_14_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_14_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_14_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_14_grid TO megxuser;


--
-- Name: oxy_dis_15_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_15_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_15_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_15_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_15_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_15_grid TO megxuser;


--
-- Name: oxy_dis_16_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_dis_16_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_dis_16_grid FROM rkottman;
GRANT ALL ON TABLE oxy_dis_16_grid TO rkottman;
GRANT SELECT ON TABLE oxy_dis_16_grid TO selectors;
GRANT SELECT ON TABLE oxy_dis_16_grid TO megxuser;


--
-- Name: oxy_sat_00_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_00_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_00_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_00_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_00_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_00_grid TO megxuser;


--
-- Name: oxy_sat_01_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_01_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_01_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_01_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_01_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_01_grid TO megxuser;


--
-- Name: oxy_sat_02_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_02_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_02_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_02_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_02_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_02_grid TO megxuser;


--
-- Name: oxy_sat_03_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_03_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_03_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_03_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_03_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_03_grid TO megxuser;


--
-- Name: oxy_sat_04_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_04_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_04_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_04_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_04_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_04_grid TO megxuser;


--
-- Name: oxy_sat_05_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_05_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_05_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_05_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_05_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_05_grid TO megxuser;


--
-- Name: oxy_sat_06_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_06_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_06_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_06_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_06_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_06_grid TO megxuser;


--
-- Name: oxy_sat_07_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_07_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_07_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_07_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_07_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_07_grid TO megxuser;


--
-- Name: oxy_sat_08_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_08_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_08_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_08_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_08_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_08_grid TO megxuser;


--
-- Name: oxy_sat_09_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_09_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_09_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_09_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_09_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_09_grid TO megxuser;


--
-- Name: oxy_sat_10_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_10_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_10_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_10_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_10_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_10_grid TO megxuser;


--
-- Name: oxy_sat_11_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_11_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_11_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_11_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_11_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_11_grid TO megxuser;


--
-- Name: oxy_sat_12_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_12_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_12_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_12_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_12_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_12_grid TO megxuser;


--
-- Name: oxy_sat_13_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_13_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_13_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_13_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_13_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_13_grid TO megxuser;


--
-- Name: oxy_sat_14_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_14_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_14_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_14_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_14_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_14_grid TO megxuser;


--
-- Name: oxy_sat_15_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_15_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_15_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_15_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_15_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_15_grid TO megxuser;


--
-- Name: oxy_sat_16_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_sat_16_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_sat_16_grid FROM rkottman;
GRANT ALL ON TABLE oxy_sat_16_grid TO rkottman;
GRANT SELECT ON TABLE oxy_sat_16_grid TO selectors;
GRANT SELECT ON TABLE oxy_sat_16_grid TO megxuser;


--
-- Name: oxy_util_00_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_00_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_00_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_00_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_00_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_00_grid TO megxuser;


--
-- Name: oxy_util_01_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_01_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_01_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_01_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_01_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_01_grid TO megxuser;


--
-- Name: oxy_util_02_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_02_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_02_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_02_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_02_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_02_grid TO megxuser;


--
-- Name: oxy_util_03_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_03_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_03_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_03_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_03_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_03_grid TO megxuser;


--
-- Name: oxy_util_04_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_04_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_04_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_04_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_04_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_04_grid TO megxuser;


--
-- Name: oxy_util_05_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_05_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_05_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_05_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_05_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_05_grid TO megxuser;


--
-- Name: oxy_util_06_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_06_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_06_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_06_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_06_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_06_grid TO megxuser;


--
-- Name: oxy_util_07_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_07_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_07_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_07_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_07_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_07_grid TO megxuser;


--
-- Name: oxy_util_08_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_08_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_08_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_08_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_08_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_08_grid TO megxuser;


--
-- Name: oxy_util_09_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_09_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_09_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_09_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_09_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_09_grid TO megxuser;


--
-- Name: oxy_util_10_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_10_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_10_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_10_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_10_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_10_grid TO megxuser;


--
-- Name: oxy_util_11_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_11_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_11_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_11_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_11_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_11_grid TO megxuser;


--
-- Name: oxy_util_12_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_12_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_12_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_12_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_12_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_12_grid TO megxuser;


--
-- Name: oxy_util_13_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_13_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_13_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_13_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_13_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_13_grid TO megxuser;


--
-- Name: oxy_util_14_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_14_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_14_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_14_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_14_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_14_grid TO megxuser;


--
-- Name: oxy_util_15_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_15_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_15_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_15_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_15_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_15_grid TO megxuser;


--
-- Name: oxy_util_16_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE oxy_util_16_grid FROM PUBLIC;
REVOKE ALL ON TABLE oxy_util_16_grid FROM rkottman;
GRANT ALL ON TABLE oxy_util_16_grid TO rkottman;
GRANT SELECT ON TABLE oxy_util_16_grid TO selectors;
GRANT SELECT ON TABLE oxy_util_16_grid TO megxuser;


--
-- Name: phosph_00_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_00_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_00_grid FROM rkottman;
GRANT ALL ON TABLE phosph_00_grid TO rkottman;
GRANT SELECT ON TABLE phosph_00_grid TO selectors;
GRANT SELECT ON TABLE phosph_00_grid TO megxuser;


--
-- Name: phosph_01_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_01_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_01_grid FROM rkottman;
GRANT ALL ON TABLE phosph_01_grid TO rkottman;
GRANT SELECT ON TABLE phosph_01_grid TO selectors;
GRANT SELECT ON TABLE phosph_01_grid TO megxuser;


--
-- Name: phosph_02_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_02_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_02_grid FROM rkottman;
GRANT ALL ON TABLE phosph_02_grid TO rkottman;
GRANT SELECT ON TABLE phosph_02_grid TO selectors;
GRANT SELECT ON TABLE phosph_02_grid TO megxuser;


--
-- Name: phosph_03_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_03_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_03_grid FROM rkottman;
GRANT ALL ON TABLE phosph_03_grid TO rkottman;
GRANT SELECT ON TABLE phosph_03_grid TO selectors;
GRANT SELECT ON TABLE phosph_03_grid TO megxuser;


--
-- Name: phosph_04_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_04_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_04_grid FROM rkottman;
GRANT ALL ON TABLE phosph_04_grid TO rkottman;
GRANT SELECT ON TABLE phosph_04_grid TO selectors;
GRANT SELECT ON TABLE phosph_04_grid TO megxuser;


--
-- Name: phosph_05_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_05_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_05_grid FROM rkottman;
GRANT ALL ON TABLE phosph_05_grid TO rkottman;
GRANT SELECT ON TABLE phosph_05_grid TO selectors;
GRANT SELECT ON TABLE phosph_05_grid TO megxuser;


--
-- Name: phosph_06_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_06_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_06_grid FROM rkottman;
GRANT ALL ON TABLE phosph_06_grid TO rkottman;
GRANT SELECT ON TABLE phosph_06_grid TO selectors;
GRANT SELECT ON TABLE phosph_06_grid TO megxuser;


--
-- Name: phosph_07_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_07_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_07_grid FROM rkottman;
GRANT ALL ON TABLE phosph_07_grid TO rkottman;
GRANT SELECT ON TABLE phosph_07_grid TO selectors;
GRANT SELECT ON TABLE phosph_07_grid TO megxuser;


--
-- Name: phosph_08_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_08_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_08_grid FROM rkottman;
GRANT ALL ON TABLE phosph_08_grid TO rkottman;
GRANT SELECT ON TABLE phosph_08_grid TO selectors;
GRANT SELECT ON TABLE phosph_08_grid TO megxuser;


--
-- Name: phosph_09_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_09_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_09_grid FROM rkottman;
GRANT ALL ON TABLE phosph_09_grid TO rkottman;
GRANT SELECT ON TABLE phosph_09_grid TO selectors;
GRANT SELECT ON TABLE phosph_09_grid TO megxuser;


--
-- Name: phosph_10_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_10_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_10_grid FROM rkottman;
GRANT ALL ON TABLE phosph_10_grid TO rkottman;
GRANT SELECT ON TABLE phosph_10_grid TO selectors;
GRANT SELECT ON TABLE phosph_10_grid TO megxuser;


--
-- Name: phosph_11_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_11_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_11_grid FROM rkottman;
GRANT ALL ON TABLE phosph_11_grid TO rkottman;
GRANT SELECT ON TABLE phosph_11_grid TO selectors;
GRANT SELECT ON TABLE phosph_11_grid TO megxuser;


--
-- Name: phosph_12_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_12_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_12_grid FROM rkottman;
GRANT ALL ON TABLE phosph_12_grid TO rkottman;
GRANT SELECT ON TABLE phosph_12_grid TO selectors;
GRANT SELECT ON TABLE phosph_12_grid TO megxuser;


--
-- Name: phosph_13_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_13_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_13_grid FROM rkottman;
GRANT ALL ON TABLE phosph_13_grid TO rkottman;
GRANT SELECT ON TABLE phosph_13_grid TO selectors;
GRANT SELECT ON TABLE phosph_13_grid TO megxuser;


--
-- Name: phosph_14_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_14_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_14_grid FROM rkottman;
GRANT ALL ON TABLE phosph_14_grid TO rkottman;
GRANT SELECT ON TABLE phosph_14_grid TO selectors;
GRANT SELECT ON TABLE phosph_14_grid TO megxuser;


--
-- Name: phosph_15_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_15_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_15_grid FROM rkottman;
GRANT ALL ON TABLE phosph_15_grid TO rkottman;
GRANT SELECT ON TABLE phosph_15_grid TO selectors;
GRANT SELECT ON TABLE phosph_15_grid TO megxuser;


--
-- Name: phosph_16_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE phosph_16_grid FROM PUBLIC;
REVOKE ALL ON TABLE phosph_16_grid FROM rkottman;
GRANT ALL ON TABLE phosph_16_grid TO rkottman;
GRANT SELECT ON TABLE phosph_16_grid TO selectors;
GRANT SELECT ON TABLE phosph_16_grid TO megxuser;


--
-- Name: sal_00_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_00_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_00_grid FROM rkottman;
GRANT ALL ON TABLE sal_00_grid TO rkottman;
GRANT SELECT ON TABLE sal_00_grid TO selectors;
GRANT SELECT ON TABLE sal_00_grid TO megxuser;


--
-- Name: sal_01_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_01_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_01_grid FROM rkottman;
GRANT ALL ON TABLE sal_01_grid TO rkottman;
GRANT SELECT ON TABLE sal_01_grid TO selectors;
GRANT SELECT ON TABLE sal_01_grid TO megxuser;


--
-- Name: sal_02_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_02_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_02_grid FROM rkottman;
GRANT ALL ON TABLE sal_02_grid TO rkottman;
GRANT SELECT ON TABLE sal_02_grid TO selectors;
GRANT SELECT ON TABLE sal_02_grid TO megxuser;


--
-- Name: sal_03_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_03_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_03_grid FROM rkottman;
GRANT ALL ON TABLE sal_03_grid TO rkottman;
GRANT SELECT ON TABLE sal_03_grid TO selectors;
GRANT SELECT ON TABLE sal_03_grid TO megxuser;


--
-- Name: sal_04_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_04_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_04_grid FROM rkottman;
GRANT ALL ON TABLE sal_04_grid TO rkottman;
GRANT SELECT ON TABLE sal_04_grid TO selectors;
GRANT SELECT ON TABLE sal_04_grid TO megxuser;


--
-- Name: sal_05_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_05_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_05_grid FROM rkottman;
GRANT ALL ON TABLE sal_05_grid TO rkottman;
GRANT SELECT ON TABLE sal_05_grid TO selectors;
GRANT SELECT ON TABLE sal_05_grid TO megxuser;


--
-- Name: sal_06_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_06_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_06_grid FROM rkottman;
GRANT ALL ON TABLE sal_06_grid TO rkottman;
GRANT SELECT ON TABLE sal_06_grid TO selectors;
GRANT SELECT ON TABLE sal_06_grid TO megxuser;


--
-- Name: sal_07_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_07_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_07_grid FROM rkottman;
GRANT ALL ON TABLE sal_07_grid TO rkottman;
GRANT SELECT ON TABLE sal_07_grid TO selectors;
GRANT SELECT ON TABLE sal_07_grid TO megxuser;


--
-- Name: sal_08_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_08_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_08_grid FROM rkottman;
GRANT ALL ON TABLE sal_08_grid TO rkottman;
GRANT SELECT ON TABLE sal_08_grid TO selectors;
GRANT SELECT ON TABLE sal_08_grid TO megxuser;


--
-- Name: sal_09_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_09_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_09_grid FROM rkottman;
GRANT ALL ON TABLE sal_09_grid TO rkottman;
GRANT SELECT ON TABLE sal_09_grid TO selectors;
GRANT SELECT ON TABLE sal_09_grid TO megxuser;


--
-- Name: sal_10_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_10_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_10_grid FROM rkottman;
GRANT ALL ON TABLE sal_10_grid TO rkottman;
GRANT SELECT ON TABLE sal_10_grid TO selectors;
GRANT SELECT ON TABLE sal_10_grid TO megxuser;


--
-- Name: sal_11_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_11_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_11_grid FROM rkottman;
GRANT ALL ON TABLE sal_11_grid TO rkottman;
GRANT SELECT ON TABLE sal_11_grid TO selectors;
GRANT SELECT ON TABLE sal_11_grid TO megxuser;


--
-- Name: sal_12_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_12_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_12_grid FROM rkottman;
GRANT ALL ON TABLE sal_12_grid TO rkottman;
GRANT SELECT ON TABLE sal_12_grid TO selectors;
GRANT SELECT ON TABLE sal_12_grid TO megxuser;


--
-- Name: sal_13_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_13_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_13_grid FROM rkottman;
GRANT ALL ON TABLE sal_13_grid TO rkottman;
GRANT SELECT ON TABLE sal_13_grid TO selectors;
GRANT SELECT ON TABLE sal_13_grid TO megxuser;


--
-- Name: sal_14_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_14_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_14_grid FROM rkottman;
GRANT ALL ON TABLE sal_14_grid TO rkottman;
GRANT SELECT ON TABLE sal_14_grid TO selectors;
GRANT SELECT ON TABLE sal_14_grid TO megxuser;


--
-- Name: sal_15_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_15_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_15_grid FROM rkottman;
GRANT ALL ON TABLE sal_15_grid TO rkottman;
GRANT SELECT ON TABLE sal_15_grid TO selectors;
GRANT SELECT ON TABLE sal_15_grid TO megxuser;


--
-- Name: sal_16_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sal_16_grid FROM PUBLIC;
REVOKE ALL ON TABLE sal_16_grid FROM rkottman;
GRANT ALL ON TABLE sal_16_grid TO rkottman;
GRANT SELECT ON TABLE sal_16_grid TO selectors;
GRANT SELECT ON TABLE sal_16_grid TO megxuser;


--
-- Name: seasons; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE seasons FROM PUBLIC;
REVOKE ALL ON TABLE seasons FROM rkottman;
GRANT ALL ON TABLE seasons TO rkottman;
GRANT SELECT ON TABLE seasons TO selectors;
GRANT SELECT ON TABLE seasons TO megxuser;


--
-- Name: sil_00_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_00_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_00_grid FROM rkottman;
GRANT ALL ON TABLE sil_00_grid TO rkottman;
GRANT SELECT ON TABLE sil_00_grid TO selectors;
GRANT SELECT ON TABLE sil_00_grid TO megxuser;


--
-- Name: sil_01_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_01_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_01_grid FROM rkottman;
GRANT ALL ON TABLE sil_01_grid TO rkottman;
GRANT SELECT ON TABLE sil_01_grid TO selectors;
GRANT SELECT ON TABLE sil_01_grid TO megxuser;


--
-- Name: sil_02_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_02_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_02_grid FROM rkottman;
GRANT ALL ON TABLE sil_02_grid TO rkottman;
GRANT SELECT ON TABLE sil_02_grid TO selectors;
GRANT SELECT ON TABLE sil_02_grid TO megxuser;


--
-- Name: sil_03_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_03_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_03_grid FROM rkottman;
GRANT ALL ON TABLE sil_03_grid TO rkottman;
GRANT SELECT ON TABLE sil_03_grid TO selectors;
GRANT SELECT ON TABLE sil_03_grid TO megxuser;


--
-- Name: sil_04_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_04_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_04_grid FROM rkottman;
GRANT ALL ON TABLE sil_04_grid TO rkottman;
GRANT SELECT ON TABLE sil_04_grid TO selectors;
GRANT SELECT ON TABLE sil_04_grid TO megxuser;


--
-- Name: sil_05_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_05_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_05_grid FROM rkottman;
GRANT ALL ON TABLE sil_05_grid TO rkottman;
GRANT SELECT ON TABLE sil_05_grid TO selectors;
GRANT SELECT ON TABLE sil_05_grid TO megxuser;


--
-- Name: sil_06_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_06_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_06_grid FROM rkottman;
GRANT ALL ON TABLE sil_06_grid TO rkottman;
GRANT SELECT ON TABLE sil_06_grid TO selectors;
GRANT SELECT ON TABLE sil_06_grid TO megxuser;


--
-- Name: sil_07_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_07_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_07_grid FROM rkottman;
GRANT ALL ON TABLE sil_07_grid TO rkottman;
GRANT SELECT ON TABLE sil_07_grid TO selectors;
GRANT SELECT ON TABLE sil_07_grid TO megxuser;


--
-- Name: sil_08_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_08_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_08_grid FROM rkottman;
GRANT ALL ON TABLE sil_08_grid TO rkottman;
GRANT SELECT ON TABLE sil_08_grid TO selectors;
GRANT SELECT ON TABLE sil_08_grid TO megxuser;


--
-- Name: sil_09_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_09_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_09_grid FROM rkottman;
GRANT ALL ON TABLE sil_09_grid TO rkottman;
GRANT SELECT ON TABLE sil_09_grid TO selectors;
GRANT SELECT ON TABLE sil_09_grid TO megxuser;


--
-- Name: sil_10_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_10_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_10_grid FROM rkottman;
GRANT ALL ON TABLE sil_10_grid TO rkottman;
GRANT SELECT ON TABLE sil_10_grid TO selectors;
GRANT SELECT ON TABLE sil_10_grid TO megxuser;


--
-- Name: sil_11_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_11_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_11_grid FROM rkottman;
GRANT ALL ON TABLE sil_11_grid TO rkottman;
GRANT SELECT ON TABLE sil_11_grid TO selectors;
GRANT SELECT ON TABLE sil_11_grid TO megxuser;


--
-- Name: sil_13_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_13_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_13_grid FROM rkottman;
GRANT ALL ON TABLE sil_13_grid TO rkottman;
GRANT SELECT ON TABLE sil_13_grid TO selectors;
GRANT SELECT ON TABLE sil_13_grid TO megxuser;


--
-- Name: sil_14_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_14_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_14_grid FROM rkottman;
GRANT ALL ON TABLE sil_14_grid TO rkottman;
GRANT SELECT ON TABLE sil_14_grid TO selectors;
GRANT SELECT ON TABLE sil_14_grid TO megxuser;


--
-- Name: sil_15_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_15_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_15_grid FROM rkottman;
GRANT ALL ON TABLE sil_15_grid TO rkottman;
GRANT SELECT ON TABLE sil_15_grid TO selectors;
GRANT SELECT ON TABLE sil_15_grid TO megxuser;


--
-- Name: sil_16_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE sil_16_grid FROM PUBLIC;
REVOKE ALL ON TABLE sil_16_grid FROM rkottman;
GRANT ALL ON TABLE sil_16_grid TO rkottman;
GRANT SELECT ON TABLE sil_16_grid TO selectors;
GRANT SELECT ON TABLE sil_16_grid TO megxuser;


--
-- Name: standard_levels; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE standard_levels FROM PUBLIC;
REVOKE ALL ON TABLE standard_levels FROM rkottman;
GRANT ALL ON TABLE standard_levels TO rkottman;
GRANT SELECT ON TABLE standard_levels TO selectors;
GRANT SELECT ON TABLE standard_levels TO megxuser;


--
-- Name: temp_00_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_00_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_00_grid FROM rkottman;
GRANT ALL ON TABLE temp_00_grid TO rkottman;
GRANT SELECT ON TABLE temp_00_grid TO selectors;
GRANT SELECT ON TABLE temp_00_grid TO megxuser;


--
-- Name: temp_01_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_01_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_01_grid FROM rkottman;
GRANT ALL ON TABLE temp_01_grid TO rkottman;
GRANT SELECT ON TABLE temp_01_grid TO selectors;
GRANT SELECT ON TABLE temp_01_grid TO megxuser;


--
-- Name: temp_02_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_02_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_02_grid FROM rkottman;
GRANT ALL ON TABLE temp_02_grid TO rkottman;
GRANT SELECT ON TABLE temp_02_grid TO selectors;
GRANT SELECT ON TABLE temp_02_grid TO megxuser;


--
-- Name: temp_03_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_03_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_03_grid FROM rkottman;
GRANT ALL ON TABLE temp_03_grid TO rkottman;
GRANT SELECT ON TABLE temp_03_grid TO selectors;
GRANT SELECT ON TABLE temp_03_grid TO megxuser;


--
-- Name: temp_04_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_04_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_04_grid FROM rkottman;
GRANT ALL ON TABLE temp_04_grid TO rkottman;
GRANT SELECT ON TABLE temp_04_grid TO selectors;
GRANT SELECT ON TABLE temp_04_grid TO megxuser;


--
-- Name: temp_05_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_05_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_05_grid FROM rkottman;
GRANT ALL ON TABLE temp_05_grid TO rkottman;
GRANT SELECT ON TABLE temp_05_grid TO selectors;
GRANT SELECT ON TABLE temp_05_grid TO megxuser;


--
-- Name: temp_06_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_06_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_06_grid FROM rkottman;
GRANT ALL ON TABLE temp_06_grid TO rkottman;
GRANT SELECT ON TABLE temp_06_grid TO selectors;
GRANT SELECT ON TABLE temp_06_grid TO megxuser;


--
-- Name: temp_07_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_07_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_07_grid FROM rkottman;
GRANT ALL ON TABLE temp_07_grid TO rkottman;
GRANT SELECT ON TABLE temp_07_grid TO selectors;
GRANT SELECT ON TABLE temp_07_grid TO megxuser;


--
-- Name: temp_08_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_08_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_08_grid FROM rkottman;
GRANT ALL ON TABLE temp_08_grid TO rkottman;
GRANT SELECT ON TABLE temp_08_grid TO selectors;
GRANT SELECT ON TABLE temp_08_grid TO megxuser;


--
-- Name: temp_09_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_09_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_09_grid FROM rkottman;
GRANT ALL ON TABLE temp_09_grid TO rkottman;
GRANT SELECT ON TABLE temp_09_grid TO selectors;
GRANT SELECT ON TABLE temp_09_grid TO megxuser;


--
-- Name: temp_10_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_10_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_10_grid FROM rkottman;
GRANT ALL ON TABLE temp_10_grid TO rkottman;
GRANT SELECT ON TABLE temp_10_grid TO selectors;
GRANT SELECT ON TABLE temp_10_grid TO megxuser;


--
-- Name: temp_11_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_11_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_11_grid FROM rkottman;
GRANT ALL ON TABLE temp_11_grid TO rkottman;
GRANT SELECT ON TABLE temp_11_grid TO selectors;
GRANT SELECT ON TABLE temp_11_grid TO megxuser;


--
-- Name: temp_12_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_12_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_12_grid FROM rkottman;
GRANT ALL ON TABLE temp_12_grid TO rkottman;
GRANT SELECT ON TABLE temp_12_grid TO selectors;
GRANT SELECT ON TABLE temp_12_grid TO megxuser;


--
-- Name: temp_13_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_13_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_13_grid FROM rkottman;
GRANT ALL ON TABLE temp_13_grid TO rkottman;
GRANT SELECT ON TABLE temp_13_grid TO selectors;
GRANT SELECT ON TABLE temp_13_grid TO megxuser;


--
-- Name: temp_14_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_14_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_14_grid FROM rkottman;
GRANT ALL ON TABLE temp_14_grid TO rkottman;
GRANT SELECT ON TABLE temp_14_grid TO selectors;
GRANT SELECT ON TABLE temp_14_grid TO megxuser;


--
-- Name: temp_15_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_15_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_15_grid FROM rkottman;
GRANT ALL ON TABLE temp_15_grid TO rkottman;
GRANT SELECT ON TABLE temp_15_grid TO selectors;
GRANT SELECT ON TABLE temp_15_grid TO megxuser;


--
-- Name: temp_16_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE temp_16_grid FROM PUBLIC;
REVOKE ALL ON TABLE temp_16_grid FROM rkottman;
GRANT ALL ON TABLE temp_16_grid TO rkottman;
GRANT SELECT ON TABLE temp_16_grid TO selectors;
GRANT SELECT ON TABLE temp_16_grid TO megxuser;


--
-- Name: units; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE units FROM PUBLIC;
REVOKE ALL ON TABLE units FROM rkottman;
GRANT ALL ON TABLE units TO rkottman;
GRANT SELECT ON TABLE units TO selectors;
GRANT SELECT ON TABLE units TO megxuser;


--
-- Name: woa05_grid_gid_seq; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE woa05_grid_gid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE woa05_grid_gid_seq FROM rkottman;
GRANT ALL ON SEQUENCE woa05_grid_gid_seq TO rkottman;
GRANT SELECT ON SEQUENCE woa05_grid_gid_seq TO selectors;
GRANT SELECT ON SEQUENCE woa05_grid_gid_seq TO megxuser;


--
-- Name: woa05_grid; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE woa05_grid FROM PUBLIC;
REVOKE ALL ON TABLE woa05_grid FROM rkottman;
GRANT ALL ON TABLE woa05_grid TO rkottman;
GRANT SELECT ON TABLE woa05_grid TO selectors;
GRANT SELECT ON TABLE woa05_grid TO megxuser;


--
-- Name: woa05_level; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE woa05_level FROM PUBLIC;
REVOKE ALL ON TABLE woa05_level FROM rkottman;
GRANT ALL ON TABLE woa05_level TO rkottman;
GRANT SELECT ON TABLE woa05_level TO selectors;
GRANT SELECT ON TABLE woa05_level TO megxuser;


--
-- Name: woa05_variable; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON TABLE woa05_variable FROM PUBLIC;
REVOKE ALL ON TABLE woa05_variable FROM rkottman;
GRANT ALL ON TABLE woa05_variable TO rkottman;
GRANT SELECT ON TABLE woa05_variable TO selectors;
GRANT SELECT ON TABLE woa05_variable TO megxuser;


--
-- Name: wod05_osd_all_wod05_2id_seq; Type: ACL; Schema: mfdata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE wod05_osd_all_wod05_2id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE wod05_osd_all_wod05_2id_seq FROM rkottman;
GRANT ALL ON SEQUENCE wod05_osd_all_wod05_2id_seq TO rkottman;
GRANT SELECT ON SEQUENCE wod05_osd_all_wod05_2id_seq TO selectors;
GRANT SELECT ON SEQUENCE wod05_osd_all_wod05_2id_seq TO megxuser;


SET search_path = mflayers, pg_catalog;

--
-- Name: boundaries; Type: ACL; Schema: mflayers; Owner: rkottman
--

REVOKE ALL ON TABLE boundaries FROM PUBLIC;
REVOKE ALL ON TABLE boundaries FROM rkottman;
GRANT ALL ON TABLE boundaries TO rkottman;
GRANT SELECT ON TABLE boundaries TO selectors;


--
-- Name: boundaries_gid_seq; Type: ACL; Schema: mflayers; Owner: rkottman
--

REVOKE ALL ON SEQUENCE boundaries_gid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE boundaries_gid_seq FROM rkottman;
GRANT ALL ON SEQUENCE boundaries_gid_seq TO rkottman;
GRANT SELECT ON SEQUENCE boundaries_gid_seq TO selectors;


--
-- Name: coordinates; Type: ACL; Schema: mflayers; Owner: rkottman
--

REVOKE ALL ON TABLE coordinates FROM PUBLIC;
REVOKE ALL ON TABLE coordinates FROM rkottman;
GRANT ALL ON TABLE coordinates TO rkottman;
GRANT SELECT ON TABLE coordinates TO selectors;


--
-- Name: lakes; Type: ACL; Schema: mflayers; Owner: rkottman
--

REVOKE ALL ON TABLE lakes FROM PUBLIC;
REVOKE ALL ON TABLE lakes FROM rkottman;
GRANT ALL ON TABLE lakes TO rkottman;
GRANT SELECT ON TABLE lakes TO selectors;


--
-- Name: lakes_gid_seq; Type: ACL; Schema: mflayers; Owner: rkottman
--

REVOKE ALL ON SEQUENCE lakes_gid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE lakes_gid_seq FROM rkottman;
GRANT ALL ON SEQUENCE lakes_gid_seq TO rkottman;
GRANT SELECT ON SEQUENCE lakes_gid_seq TO selectors;


--
-- Name: undersea_arc; Type: ACL; Schema: mflayers; Owner: rkottman
--

REVOKE ALL ON TABLE undersea_arc FROM PUBLIC;
REVOKE ALL ON TABLE undersea_arc FROM rkottman;
GRANT ALL ON TABLE undersea_arc TO rkottman;
GRANT SELECT ON TABLE undersea_arc TO selectors;


--
-- Name: undersea_arc_gid_seq; Type: ACL; Schema: mflayers; Owner: rkottman
--

REVOKE ALL ON SEQUENCE undersea_arc_gid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE undersea_arc_gid_seq FROM rkottman;
GRANT ALL ON SEQUENCE undersea_arc_gid_seq TO rkottman;
GRANT SELECT ON SEQUENCE undersea_arc_gid_seq TO selectors;


--
-- Name: undersea_point; Type: ACL; Schema: mflayers; Owner: rkottman
--

REVOKE ALL ON TABLE undersea_point FROM PUBLIC;
REVOKE ALL ON TABLE undersea_point FROM rkottman;
GRANT ALL ON TABLE undersea_point TO rkottman;
GRANT SELECT ON TABLE undersea_point TO selectors;


--
-- Name: undersea_point_gid_seq; Type: ACL; Schema: mflayers; Owner: rkottman
--

REVOKE ALL ON SEQUENCE undersea_point_gid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE undersea_point_gid_seq FROM rkottman;
GRANT ALL ON SEQUENCE undersea_point_gid_seq TO rkottman;
GRANT SELECT ON SEQUENCE undersea_point_gid_seq TO selectors;


SET search_path = mfmetadata, pg_catalog;

--
-- Name: cl_address_id_cl_address_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE cl_address_id_cl_address_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cl_address_id_cl_address_seq FROM rkottman;
GRANT ALL ON SEQUENCE cl_address_id_cl_address_seq TO rkottman;
GRANT SELECT ON SEQUENCE cl_address_id_cl_address_seq TO selectors;


--
-- Name: cl_address; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE cl_address FROM PUBLIC;
REVOKE ALL ON TABLE cl_address FROM rkottman;
GRANT ALL ON TABLE cl_address TO rkottman;
GRANT SELECT ON TABLE cl_address TO selectors;


--
-- Name: cl_citation_id_cl_citation_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE cl_citation_id_cl_citation_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cl_citation_id_cl_citation_seq FROM rkottman;
GRANT ALL ON SEQUENCE cl_citation_id_cl_citation_seq TO rkottman;
GRANT SELECT ON SEQUENCE cl_citation_id_cl_citation_seq TO selectors;


--
-- Name: cl_citation; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE cl_citation FROM PUBLIC;
REVOKE ALL ON TABLE cl_citation FROM rkottman;
GRANT ALL ON TABLE cl_citation TO rkottman;
GRANT SELECT ON TABLE cl_citation TO selectors;


--
-- Name: cl_contact_id_cl_contact_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE cl_contact_id_cl_contact_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cl_contact_id_cl_contact_seq FROM rkottman;
GRANT ALL ON SEQUENCE cl_contact_id_cl_contact_seq TO rkottman;
GRANT SELECT ON SEQUENCE cl_contact_id_cl_contact_seq TO selectors;


--
-- Name: cl_contact; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE cl_contact FROM PUBLIC;
REVOKE ALL ON TABLE cl_contact FROM rkottman;
GRANT ALL ON TABLE cl_contact TO rkottman;
GRANT SELECT ON TABLE cl_contact TO selectors;


--
-- Name: cl_onlineresource_id_cl_onlineresource_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE cl_onlineresource_id_cl_onlineresource_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cl_onlineresource_id_cl_onlineresource_seq FROM rkottman;
GRANT ALL ON SEQUENCE cl_onlineresource_id_cl_onlineresource_seq TO rkottman;
GRANT SELECT ON SEQUENCE cl_onlineresource_id_cl_onlineresource_seq TO selectors;


--
-- Name: cl_onlineresource; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE cl_onlineresource FROM PUBLIC;
REVOKE ALL ON TABLE cl_onlineresource FROM rkottman;
GRANT ALL ON TABLE cl_onlineresource TO rkottman;
GRANT SELECT ON TABLE cl_onlineresource TO selectors;


--
-- Name: cl_responsibleparty_id_cl_responsibleparty_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE cl_responsibleparty_id_cl_responsibleparty_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cl_responsibleparty_id_cl_responsibleparty_seq FROM rkottman;
GRANT ALL ON SEQUENCE cl_responsibleparty_id_cl_responsibleparty_seq TO rkottman;
GRANT SELECT ON SEQUENCE cl_responsibleparty_id_cl_responsibleparty_seq TO selectors;


--
-- Name: cl_responsibleparty; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE cl_responsibleparty FROM PUBLIC;
REVOKE ALL ON TABLE cl_responsibleparty FROM rkottman;
GRANT ALL ON TABLE cl_responsibleparty TO rkottman;
GRANT SELECT ON TABLE cl_responsibleparty TO selectors;


--
-- Name: cl_rolecode_id_cl_rolecode_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE cl_rolecode_id_cl_rolecode_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cl_rolecode_id_cl_rolecode_seq FROM rkottman;
GRANT ALL ON SEQUENCE cl_rolecode_id_cl_rolecode_seq TO rkottman;
GRANT SELECT ON SEQUENCE cl_rolecode_id_cl_rolecode_seq TO selectors;


--
-- Name: cl_rolecode; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE cl_rolecode FROM PUBLIC;
REVOKE ALL ON TABLE cl_rolecode FROM rkottman;
GRANT ALL ON TABLE cl_rolecode TO rkottman;
GRANT SELECT ON TABLE cl_rolecode TO selectors;


--
-- Name: cl_telephone_id_cl_telephone_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE cl_telephone_id_cl_telephone_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE cl_telephone_id_cl_telephone_seq FROM rkottman;
GRANT ALL ON SEQUENCE cl_telephone_id_cl_telephone_seq TO rkottman;
GRANT SELECT ON SEQUENCE cl_telephone_id_cl_telephone_seq TO selectors;


--
-- Name: cl_telephone; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE cl_telephone FROM PUBLIC;
REVOKE ALL ON TABLE cl_telephone FROM rkottman;
GRANT ALL ON TABLE cl_telephone TO rkottman;
GRANT SELECT ON TABLE cl_telephone TO selectors;


--
-- Name: dq_dataquality_id_dq_quality_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE dq_dataquality_id_dq_quality_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE dq_dataquality_id_dq_quality_seq FROM rkottman;
GRANT ALL ON SEQUENCE dq_dataquality_id_dq_quality_seq TO rkottman;
GRANT SELECT ON SEQUENCE dq_dataquality_id_dq_quality_seq TO selectors;


--
-- Name: dq_dataquality; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE dq_dataquality FROM PUBLIC;
REVOKE ALL ON TABLE dq_dataquality FROM rkottman;
GRANT ALL ON TABLE dq_dataquality TO rkottman;
GRANT SELECT ON TABLE dq_dataquality TO selectors;


--
-- Name: ex_extent_id_ex_extent_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE ex_extent_id_ex_extent_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE ex_extent_id_ex_extent_seq FROM rkottman;
GRANT ALL ON SEQUENCE ex_extent_id_ex_extent_seq TO rkottman;
GRANT SELECT ON SEQUENCE ex_extent_id_ex_extent_seq TO selectors;


--
-- Name: ex_extent; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE ex_extent FROM PUBLIC;
REVOKE ALL ON TABLE ex_extent FROM rkottman;
GRANT ALL ON TABLE ex_extent TO rkottman;
GRANT SELECT ON TABLE ex_extent TO selectors;


--
-- Name: li_lineage_id_li_lineage_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE li_lineage_id_li_lineage_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE li_lineage_id_li_lineage_seq FROM rkottman;
GRANT ALL ON SEQUENCE li_lineage_id_li_lineage_seq TO rkottman;
GRANT SELECT ON SEQUENCE li_lineage_id_li_lineage_seq TO selectors;


--
-- Name: li_lineage; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE li_lineage FROM PUBLIC;
REVOKE ALL ON TABLE li_lineage FROM rkottman;
GRANT ALL ON TABLE li_lineage TO rkottman;
GRANT SELECT ON TABLE li_lineage TO selectors;


--
-- Name: md_charactersetcode_id_md_charactersetcode_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE md_charactersetcode_id_md_charactersetcode_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_charactersetcode_id_md_charactersetcode_seq FROM rkottman;
GRANT ALL ON SEQUENCE md_charactersetcode_id_md_charactersetcode_seq TO rkottman;
GRANT SELECT ON SEQUENCE md_charactersetcode_id_md_charactersetcode_seq TO selectors;


--
-- Name: md_charactersetcode; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE md_charactersetcode FROM PUBLIC;
REVOKE ALL ON TABLE md_charactersetcode FROM rkottman;
GRANT ALL ON TABLE md_charactersetcode TO rkottman;
GRANT SELECT ON TABLE md_charactersetcode TO selectors;


--
-- Name: md_digitaltransferoptions_id_md_digitaltransferoptions_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE md_digitaltransferoptions_id_md_digitaltransferoptions_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_digitaltransferoptions_id_md_digitaltransferoptions_seq FROM rkottman;
GRANT ALL ON SEQUENCE md_digitaltransferoptions_id_md_digitaltransferoptions_seq TO rkottman;
GRANT SELECT ON SEQUENCE md_digitaltransferoptions_id_md_digitaltransferoptions_seq TO selectors;


--
-- Name: md_digitaltransferoptions; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE md_digitaltransferoptions FROM PUBLIC;
REVOKE ALL ON TABLE md_digitaltransferoptions FROM rkottman;
GRANT ALL ON TABLE md_digitaltransferoptions TO rkottman;
GRANT SELECT ON TABLE md_digitaltransferoptions TO selectors;


--
-- Name: md_distribution_id_md_distribution_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE md_distribution_id_md_distribution_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_distribution_id_md_distribution_seq FROM rkottman;
GRANT ALL ON SEQUENCE md_distribution_id_md_distribution_seq TO rkottman;
GRANT SELECT ON SEQUENCE md_distribution_id_md_distribution_seq TO selectors;


--
-- Name: md_distribution; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE md_distribution FROM PUBLIC;
REVOKE ALL ON TABLE md_distribution FROM rkottman;
GRANT ALL ON TABLE md_distribution TO rkottman;
GRANT SELECT ON TABLE md_distribution TO selectors;


--
-- Name: md_format_id_md_format_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE md_format_id_md_format_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_format_id_md_format_seq FROM rkottman;
GRANT ALL ON SEQUENCE md_format_id_md_format_seq TO rkottman;
GRANT SELECT ON SEQUENCE md_format_id_md_format_seq TO selectors;


--
-- Name: md_format; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE md_format FROM PUBLIC;
REVOKE ALL ON TABLE md_format FROM rkottman;
GRANT ALL ON TABLE md_format TO rkottman;
GRANT SELECT ON TABLE md_format TO selectors;


--
-- Name: md_identification_id_md_identification_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE md_identification_id_md_identification_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_identification_id_md_identification_seq FROM rkottman;
GRANT ALL ON SEQUENCE md_identification_id_md_identification_seq TO rkottman;
GRANT SELECT ON SEQUENCE md_identification_id_md_identification_seq TO selectors;


--
-- Name: md_identification; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE md_identification FROM PUBLIC;
REVOKE ALL ON TABLE md_identification FROM rkottman;
GRANT ALL ON TABLE md_identification TO rkottman;
GRANT SELECT ON TABLE md_identification TO selectors;


--
-- Name: md_metadata_mdfileid_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE md_metadata_mdfileid_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_metadata_mdfileid_seq FROM rkottman;
GRANT ALL ON SEQUENCE md_metadata_mdfileid_seq TO rkottman;
GRANT SELECT ON SEQUENCE md_metadata_mdfileid_seq TO selectors;


--
-- Name: md_metadata; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE md_metadata FROM PUBLIC;
REVOKE ALL ON TABLE md_metadata FROM rkottman;
GRANT ALL ON TABLE md_metadata TO rkottman;
GRANT SELECT ON TABLE md_metadata TO selectors;


--
-- Name: md_referencesystem_id_md_referencesystem_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE md_referencesystem_id_md_referencesystem_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_referencesystem_id_md_referencesystem_seq FROM rkottman;
GRANT ALL ON SEQUENCE md_referencesystem_id_md_referencesystem_seq TO rkottman;
GRANT SELECT ON SEQUENCE md_referencesystem_id_md_referencesystem_seq TO selectors;


--
-- Name: md_referencesystem; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE md_referencesystem FROM PUBLIC;
REVOKE ALL ON TABLE md_referencesystem FROM rkottman;
GRANT ALL ON TABLE md_referencesystem TO rkottman;
GRANT SELECT ON TABLE md_referencesystem TO selectors;


--
-- Name: md_resolution_id_md_resolution_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE md_resolution_id_md_resolution_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_resolution_id_md_resolution_seq FROM rkottman;
GRANT ALL ON SEQUENCE md_resolution_id_md_resolution_seq TO rkottman;
GRANT SELECT ON SEQUENCE md_resolution_id_md_resolution_seq TO selectors;


--
-- Name: md_resolution; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE md_resolution FROM PUBLIC;
REVOKE ALL ON TABLE md_resolution FROM rkottman;
GRANT ALL ON TABLE md_resolution TO rkottman;
GRANT SELECT ON TABLE md_resolution TO selectors;


--
-- Name: md_spatialrepresentationtypec_id_spatialrepresentationtypec_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE md_spatialrepresentationtypec_id_spatialrepresentationtypec_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_spatialrepresentationtypec_id_spatialrepresentationtypec_seq FROM rkottman;
GRANT ALL ON SEQUENCE md_spatialrepresentationtypec_id_spatialrepresentationtypec_seq TO rkottman;
GRANT SELECT ON SEQUENCE md_spatialrepresentationtypec_id_spatialrepresentationtypec_seq TO selectors;


--
-- Name: md_spatialrepresentationtypecode; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE md_spatialrepresentationtypecode FROM PUBLIC;
REVOKE ALL ON TABLE md_spatialrepresentationtypecode FROM rkottman;
GRANT ALL ON TABLE md_spatialrepresentationtypecode TO rkottman;
GRANT SELECT ON TABLE md_spatialrepresentationtypecode TO selectors;


--
-- Name: md_topiccategorycode_id_md_topiccategorycode_seq; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON SEQUENCE md_topiccategorycode_id_md_topiccategorycode_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE md_topiccategorycode_id_md_topiccategorycode_seq FROM rkottman;
GRANT ALL ON SEQUENCE md_topiccategorycode_id_md_topiccategorycode_seq TO rkottman;
GRANT SELECT ON SEQUENCE md_topiccategorycode_id_md_topiccategorycode_seq TO selectors;


--
-- Name: md_topiccategorycode; Type: ACL; Schema: mfmetadata; Owner: rkottman
--

REVOKE ALL ON TABLE md_topiccategorycode FROM PUBLIC;
REVOKE ALL ON TABLE md_topiccategorycode FROM rkottman;
GRANT ALL ON TABLE md_topiccategorycode TO rkottman;
GRANT SELECT ON TABLE md_topiccategorycode TO selectors;


SET search_path = mfresults, pg_catalog;

--
-- Name: user_chloro; Type: ACL; Schema: mfresults; Owner: megxuser
--

REVOKE ALL ON TABLE user_chloro FROM PUBLIC;
REVOKE ALL ON TABLE user_chloro FROM megxuser;
GRANT ALL ON TABLE user_chloro TO megxuser;


--
-- Name: user_interpol; Type: ACL; Schema: mfresults; Owner: megxuser
--

REVOKE ALL ON TABLE user_interpol FROM PUBLIC;
REVOKE ALL ON TABLE user_interpol FROM megxuser;
GRANT ALL ON TABLE user_interpol TO megxuser;


--
-- Name: user_ss; Type: ACL; Schema: mfresults; Owner: megxuser
--

REVOKE ALL ON TABLE user_ss FROM PUBLIC;
REVOKE ALL ON TABLE user_ss FROM megxuser;
GRANT ALL ON TABLE user_ss TO megxuser;


--
-- Name: user_ss_vision; Type: ACL; Schema: mfresults; Owner: megxuser
--

REVOKE ALL ON TABLE user_ss_vision FROM PUBLIC;
REVOKE ALL ON TABLE user_ss_vision FROM megxuser;
GRANT ALL ON TABLE user_ss_vision TO megxuser;
GRANT SELECT ON TABLE user_ss_vision TO selectors;


--
-- Name: user_woa; Type: ACL; Schema: mfresults; Owner: megxuser
--

REVOKE ALL ON TABLE user_woa FROM PUBLIC;
REVOKE ALL ON TABLE user_woa FROM megxuser;
GRANT ALL ON TABLE user_woa TO megxuser;


--
-- Name: user_woa_copy; Type: ACL; Schema: mfresults; Owner: rkottman
--

REVOKE ALL ON TABLE user_woa_copy FROM PUBLIC;
REVOKE ALL ON TABLE user_woa_copy FROM rkottman;
GRANT ALL ON TABLE user_woa_copy TO rkottman;
GRANT SELECT ON TABLE user_woa_copy TO selectors;
GRANT SELECT ON TABLE user_woa_copy TO megxuser;


--
-- Name: woa_id; Type: ACL; Schema: mfresults; Owner: megxuser
--

REVOKE ALL ON TABLE woa_id FROM PUBLIC;
REVOKE ALL ON TABLE woa_id FROM megxuser;
GRANT ALL ON TABLE woa_id TO megxuser;


--
-- Name: woa_res; Type: ACL; Schema: mfresults; Owner: megxuser
--

REVOKE ALL ON TABLE woa_res FROM PUBLIC;
REVOKE ALL ON TABLE woa_res FROM megxuser;
GRANT ALL ON TABLE woa_res TO megxuser;


--
-- Name: wod_averages; Type: ACL; Schema: mfresults; Owner: megxuser
--

REVOKE ALL ON TABLE wod_averages FROM PUBLIC;
REVOKE ALL ON TABLE wod_averages FROM megxuser;
GRANT ALL ON TABLE wod_averages TO megxuser;
GRANT SELECT ON TABLE wod_averages TO selectors;


--
-- Name: wod_raw_tot; Type: ACL; Schema: mfresults; Owner: megxuser
--

REVOKE ALL ON TABLE wod_raw_tot FROM PUBLIC;
REVOKE ALL ON TABLE wod_raw_tot FROM megxuser;
GRANT ALL ON TABLE wod_raw_tot TO megxuser;
GRANT SELECT ON TABLE wod_raw_tot TO selectors;


SET search_path = pfam_23, pg_catalog;

--
-- Name: architecture; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE architecture FROM PUBLIC;
REVOKE ALL ON TABLE architecture FROM pfam_admin;
GRANT ALL ON TABLE architecture TO pfam_admin;
GRANT SELECT ON TABLE architecture TO selectors;


--
-- Name: dead_clans; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE dead_clans FROM PUBLIC;
REVOKE ALL ON TABLE dead_clans FROM pfam_admin;
GRANT ALL ON TABLE dead_clans TO pfam_admin;
GRANT SELECT ON TABLE dead_clans TO selectors;


--
-- Name: dead_families; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE dead_families FROM PUBLIC;
REVOKE ALL ON TABLE dead_families FROM pfam_admin;
GRANT ALL ON TABLE dead_families TO pfam_admin;
GRANT SELECT ON TABLE dead_families TO selectors;


--
-- Name: genome_seqs; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE genome_seqs FROM PUBLIC;
REVOKE ALL ON TABLE genome_seqs FROM pfam_admin;
GRANT ALL ON TABLE genome_seqs TO pfam_admin;
GRANT SELECT ON TABLE genome_seqs TO selectors;


--
-- Name: genome_species; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE genome_species FROM PUBLIC;
REVOKE ALL ON TABLE genome_species FROM pfam_admin;
GRANT ALL ON TABLE genome_species TO pfam_admin;
GRANT SELECT ON TABLE genome_species TO selectors;


--
-- Name: megx_annotations; Type: ACL; Schema: pfam_23; Owner: pbuttigi
--

REVOKE ALL ON TABLE megx_annotations FROM PUBLIC;
REVOKE ALL ON TABLE megx_annotations FROM pbuttigi;
GRANT ALL ON TABLE megx_annotations TO pbuttigi;
GRANT ALL ON TABLE megx_annotations TO pfam_admin WITH GRANT OPTION;
GRANT SELECT ON TABLE megx_annotations TO selectors;


--
-- Name: ncbi_map; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE ncbi_map FROM PUBLIC;
REVOKE ALL ON TABLE ncbi_map FROM pfam_admin;
GRANT ALL ON TABLE ncbi_map TO pfam_admin;
GRANT SELECT ON TABLE ncbi_map TO selectors;


--
-- Name: ncbi_taxonomy; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE ncbi_taxonomy FROM PUBLIC;
REVOKE ALL ON TABLE ncbi_taxonomy FROM pfam_admin;
GRANT ALL ON TABLE ncbi_taxonomy TO pfam_admin;
GRANT SELECT ON TABLE ncbi_taxonomy TO selectors;


--
-- Name: nested_domains; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE nested_domains FROM PUBLIC;
REVOKE ALL ON TABLE nested_domains FROM pfam_admin;
GRANT ALL ON TABLE nested_domains TO pfam_admin;
GRANT SELECT ON TABLE nested_domains TO selectors;


--
-- Name: pdb; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE pdb FROM PUBLIC;
REVOKE ALL ON TABLE pdb FROM pfam_admin;
GRANT ALL ON TABLE pdb TO pfam_admin;
GRANT SELECT ON TABLE pdb TO selectors;


--
-- Name: pfama; Type: ACL; Schema: pfam_23; Owner: ikostadi
--

REVOKE ALL ON TABLE pfama FROM PUBLIC;
REVOKE ALL ON TABLE pfama FROM ikostadi;
GRANT ALL ON TABLE pfama TO ikostadi;
GRANT ALL ON TABLE pfama TO curation_admin;
GRANT ALL ON TABLE pfama TO schema_admin;
GRANT SELECT ON TABLE pfama TO selectors;
GRANT ALL ON TABLE pfama TO pfam_admin;


--
-- Name: pfama_architecture; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE pfama_architecture FROM PUBLIC;
REVOKE ALL ON TABLE pfama_architecture FROM pfam_admin;
GRANT ALL ON TABLE pfama_architecture TO pfam_admin;
GRANT SELECT ON TABLE pfama_architecture TO selectors;


--
-- Name: pfama_auto_pfama_seq; Type: ACL; Schema: pfam_23; Owner: ikostadi
--

REVOKE ALL ON SEQUENCE pfama_auto_pfama_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pfama_auto_pfama_seq FROM ikostadi;
GRANT ALL ON SEQUENCE pfama_auto_pfama_seq TO ikostadi;
GRANT ALL ON SEQUENCE pfama_auto_pfama_seq TO curation_admin;
GRANT ALL ON SEQUENCE pfama_auto_pfama_seq TO schema_admin;
GRANT ALL ON SEQUENCE pfama_auto_pfama_seq TO pfam_admin;


--
-- Name: pfama_hmm_fs; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE pfama_hmm_fs FROM PUBLIC;
REVOKE ALL ON TABLE pfama_hmm_fs FROM pfam_admin;
GRANT ALL ON TABLE pfama_hmm_fs TO pfam_admin;
GRANT SELECT ON TABLE pfama_hmm_fs TO selectors;


--
-- Name: pfama_hmm_ls; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE pfama_hmm_ls FROM PUBLIC;
REVOKE ALL ON TABLE pfama_hmm_ls FROM pfam_admin;
GRANT ALL ON TABLE pfama_hmm_ls TO pfam_admin;
GRANT SELECT ON TABLE pfama_hmm_ls TO selectors;


--
-- Name: pfama_literature_references; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE pfama_literature_references FROM PUBLIC;
REVOKE ALL ON TABLE pfama_literature_references FROM pfam_admin;
GRANT ALL ON TABLE pfama_literature_references TO pfam_admin;
GRANT SELECT ON TABLE pfama_literature_references TO selectors;


--
-- Name: pfama_reg_full; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE pfama_reg_full FROM PUBLIC;
REVOKE ALL ON TABLE pfama_reg_full FROM pfam_admin;
GRANT ALL ON TABLE pfama_reg_full TO pfam_admin;
GRANT SELECT ON TABLE pfama_reg_full TO selectors;


--
-- Name: pfama_reg_seed; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE pfama_reg_seed FROM PUBLIC;
REVOKE ALL ON TABLE pfama_reg_seed FROM pfam_admin;
GRANT ALL ON TABLE pfama_reg_seed TO pfam_admin;
GRANT SELECT ON TABLE pfama_reg_seed TO selectors;


--
-- Name: pfamseq; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE pfamseq FROM PUBLIC;
REVOKE ALL ON TABLE pfamseq FROM pfam_admin;
GRANT ALL ON TABLE pfamseq TO pfam_admin;
GRANT SELECT ON TABLE pfamseq TO selectors;


--
-- Name: secondary_pfamseq_acc; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE secondary_pfamseq_acc FROM PUBLIC;
REVOKE ALL ON TABLE secondary_pfamseq_acc FROM pfam_admin;
GRANT ALL ON TABLE secondary_pfamseq_acc TO pfam_admin;
GRANT SELECT ON TABLE secondary_pfamseq_acc TO selectors;


--
-- Name: version; Type: ACL; Schema: pfam_23; Owner: pfam_admin
--

REVOKE ALL ON TABLE version FROM PUBLIC;
REVOKE ALL ON TABLE version FROM pfam_admin;
GRANT ALL ON TABLE version TO pfam_admin;
GRANT SELECT ON TABLE version TO selectors;


SET search_path = pfam_stage, pg_catalog;

--
-- Name: architecture_auto_architecture_seq; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON SEQUENCE architecture_auto_architecture_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE architecture_auto_architecture_seq FROM pbuttigi;
GRANT ALL ON SEQUENCE architecture_auto_architecture_seq TO pbuttigi;
GRANT SELECT ON SEQUENCE architecture_auto_architecture_seq TO selectors;


--
-- Name: architecture; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE architecture FROM PUBLIC;
REVOKE ALL ON TABLE architecture FROM pbuttigi;
GRANT ALL ON TABLE architecture TO pbuttigi;
GRANT SELECT ON TABLE architecture TO selectors;


--
-- Name: dead_clans; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE dead_clans FROM PUBLIC;
REVOKE ALL ON TABLE dead_clans FROM pbuttigi;
GRANT ALL ON TABLE dead_clans TO pbuttigi;
GRANT SELECT ON TABLE dead_clans TO selectors;


--
-- Name: dead_families; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE dead_families FROM PUBLIC;
REVOKE ALL ON TABLE dead_families FROM pbuttigi;
GRANT ALL ON TABLE dead_families TO pbuttigi;
GRANT SELECT ON TABLE dead_families TO selectors;


--
-- Name: genome_seqs; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE genome_seqs FROM PUBLIC;
REVOKE ALL ON TABLE genome_seqs FROM pbuttigi;
GRANT ALL ON TABLE genome_seqs TO pbuttigi;
GRANT SELECT ON TABLE genome_seqs TO selectors;


--
-- Name: genome_species; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE genome_species FROM PUBLIC;
REVOKE ALL ON TABLE genome_species FROM pbuttigi;
GRANT ALL ON TABLE genome_species TO pbuttigi;
GRANT SELECT ON TABLE genome_species TO selectors;


--
-- Name: ncbi_map; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE ncbi_map FROM PUBLIC;
REVOKE ALL ON TABLE ncbi_map FROM pbuttigi;
GRANT ALL ON TABLE ncbi_map TO pbuttigi;
GRANT SELECT ON TABLE ncbi_map TO selectors;


--
-- Name: ncbi_taxonomy; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE ncbi_taxonomy FROM PUBLIC;
REVOKE ALL ON TABLE ncbi_taxonomy FROM pbuttigi;
GRANT ALL ON TABLE ncbi_taxonomy TO pbuttigi;
GRANT SELECT ON TABLE ncbi_taxonomy TO selectors;


--
-- Name: nested_domains; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE nested_domains FROM PUBLIC;
REVOKE ALL ON TABLE nested_domains FROM pbuttigi;
GRANT ALL ON TABLE nested_domains TO pbuttigi;
GRANT SELECT ON TABLE nested_domains TO selectors;


--
-- Name: pdb_auto_pdb_seq; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON SEQUENCE pdb_auto_pdb_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pdb_auto_pdb_seq FROM pbuttigi;
GRANT ALL ON SEQUENCE pdb_auto_pdb_seq TO pbuttigi;
GRANT SELECT ON SEQUENCE pdb_auto_pdb_seq TO selectors;


--
-- Name: pdb; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE pdb FROM PUBLIC;
REVOKE ALL ON TABLE pdb FROM pbuttigi;
GRANT ALL ON TABLE pdb TO pbuttigi;
GRANT SELECT ON TABLE pdb TO selectors;


--
-- Name: pfama; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE pfama FROM PUBLIC;
REVOKE ALL ON TABLE pfama FROM pbuttigi;
GRANT ALL ON TABLE pfama TO pbuttigi;
GRANT SELECT ON TABLE pfama TO selectors;


--
-- Name: pfama_architecture; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE pfama_architecture FROM PUBLIC;
REVOKE ALL ON TABLE pfama_architecture FROM pbuttigi;
GRANT ALL ON TABLE pfama_architecture TO pbuttigi;
GRANT SELECT ON TABLE pfama_architecture TO selectors;


--
-- Name: pfama_auto_pfama_seq; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON SEQUENCE pfama_auto_pfama_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pfama_auto_pfama_seq FROM pbuttigi;
GRANT ALL ON SEQUENCE pfama_auto_pfama_seq TO pbuttigi;
GRANT SELECT ON SEQUENCE pfama_auto_pfama_seq TO selectors;


--
-- Name: pfama_hmm_fs; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE pfama_hmm_fs FROM PUBLIC;
REVOKE ALL ON TABLE pfama_hmm_fs FROM pbuttigi;
GRANT ALL ON TABLE pfama_hmm_fs TO pbuttigi;
GRANT SELECT ON TABLE pfama_hmm_fs TO selectors;


--
-- Name: pfama_hmm_ls; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE pfama_hmm_ls FROM PUBLIC;
REVOKE ALL ON TABLE pfama_hmm_ls FROM pbuttigi;
GRANT ALL ON TABLE pfama_hmm_ls TO pbuttigi;
GRANT SELECT ON TABLE pfama_hmm_ls TO selectors;


--
-- Name: pfama_literature_references; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE pfama_literature_references FROM PUBLIC;
REVOKE ALL ON TABLE pfama_literature_references FROM pbuttigi;
GRANT ALL ON TABLE pfama_literature_references TO pbuttigi;
GRANT SELECT ON TABLE pfama_literature_references TO selectors;


--
-- Name: pfama_reg_full_auto_pfama_reg_full_seq; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON SEQUENCE pfama_reg_full_auto_pfama_reg_full_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pfama_reg_full_auto_pfama_reg_full_seq FROM pbuttigi;
GRANT ALL ON SEQUENCE pfama_reg_full_auto_pfama_reg_full_seq TO pbuttigi;
GRANT SELECT ON SEQUENCE pfama_reg_full_auto_pfama_reg_full_seq TO selectors;


--
-- Name: pfama_reg_full; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE pfama_reg_full FROM PUBLIC;
REVOKE ALL ON TABLE pfama_reg_full FROM pbuttigi;
GRANT ALL ON TABLE pfama_reg_full TO pbuttigi;
GRANT SELECT ON TABLE pfama_reg_full TO selectors;


--
-- Name: pfama_reg_seed; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE pfama_reg_seed FROM PUBLIC;
REVOKE ALL ON TABLE pfama_reg_seed FROM pbuttigi;
GRANT ALL ON TABLE pfama_reg_seed TO pbuttigi;
GRANT SELECT ON TABLE pfama_reg_seed TO selectors;


--
-- Name: pfamseq_auto_pfamseq_seq; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON SEQUENCE pfamseq_auto_pfamseq_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE pfamseq_auto_pfamseq_seq FROM pbuttigi;
GRANT ALL ON SEQUENCE pfamseq_auto_pfamseq_seq TO pbuttigi;
GRANT SELECT ON SEQUENCE pfamseq_auto_pfamseq_seq TO selectors;


--
-- Name: pfamseq; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE pfamseq FROM PUBLIC;
REVOKE ALL ON TABLE pfamseq FROM pbuttigi;
GRANT ALL ON TABLE pfamseq TO pbuttigi;
GRANT SELECT ON TABLE pfamseq TO selectors;


--
-- Name: secondary_pfamseq_acc; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE secondary_pfamseq_acc FROM PUBLIC;
REVOKE ALL ON TABLE secondary_pfamseq_acc FROM pbuttigi;
GRANT ALL ON TABLE secondary_pfamseq_acc TO pbuttigi;
GRANT SELECT ON TABLE secondary_pfamseq_acc TO selectors;


--
-- Name: version; Type: ACL; Schema: pfam_stage; Owner: pbuttigi
--

REVOKE ALL ON TABLE version FROM PUBLIC;
REVOKE ALL ON TABLE version FROM pbuttigi;
GRANT ALL ON TABLE version TO pbuttigi;
GRANT SELECT ON TABLE version TO selectors;


SET search_path = pgq, pg_catalog;

--
-- Name: batch_id_seq; Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON SEQUENCE batch_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE batch_id_seq FROM rkottman;
GRANT ALL ON SEQUENCE batch_id_seq TO rkottman;
GRANT ALL ON SEQUENCE batch_id_seq TO pgqueue;


--
-- Name: consumer; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON TABLE consumer FROM PUBLIC;
REVOKE ALL ON TABLE consumer FROM pgqueue;
GRANT ALL ON TABLE consumer TO pgqueue;
GRANT SELECT ON TABLE consumer TO PUBLIC;


--
-- Name: consumer_co_id_seq; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON SEQUENCE consumer_co_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE consumer_co_id_seq FROM pgqueue;
GRANT ALL ON SEQUENCE consumer_co_id_seq TO pgqueue;


--
-- Name: event_template; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON TABLE event_template FROM PUBLIC;
REVOKE ALL ON TABLE event_template FROM pgqueue;
GRANT ALL ON TABLE event_template TO pgqueue;
GRANT SELECT ON TABLE event_template TO PUBLIC;


--
-- Name: event_1; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON TABLE event_1 FROM PUBLIC;
REVOKE ALL ON TABLE event_1 FROM pgqueue;
GRANT ALL ON TABLE event_1 TO pgqueue;
GRANT SELECT ON TABLE event_1 TO PUBLIC;


--
-- Name: event_1_id_seq; Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON SEQUENCE event_1_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE event_1_id_seq FROM rkottman;
GRANT ALL ON SEQUENCE event_1_id_seq TO rkottman;
GRANT SELECT ON SEQUENCE event_1_id_seq TO PUBLIC;
GRANT ALL ON SEQUENCE event_1_id_seq TO pgqueue;


--
-- Name: event_1_0; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON TABLE event_1_0 FROM PUBLIC;
REVOKE ALL ON TABLE event_1_0 FROM pgqueue;
GRANT ALL ON TABLE event_1_0 TO pgqueue;
GRANT SELECT ON TABLE event_1_0 TO PUBLIC;


--
-- Name: event_1_1; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON TABLE event_1_1 FROM PUBLIC;
REVOKE ALL ON TABLE event_1_1 FROM pgqueue;
GRANT ALL ON TABLE event_1_1 TO pgqueue;
GRANT SELECT ON TABLE event_1_1 TO PUBLIC;


--
-- Name: event_1_2; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON TABLE event_1_2 FROM PUBLIC;
REVOKE ALL ON TABLE event_1_2 FROM pgqueue;
GRANT ALL ON TABLE event_1_2 TO pgqueue;
GRANT SELECT ON TABLE event_1_2 TO PUBLIC;


--
-- Name: event_1_tick_seq; Type: ACL; Schema: pgq; Owner: rkottman
--

REVOKE ALL ON SEQUENCE event_1_tick_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE event_1_tick_seq FROM rkottman;
GRANT ALL ON SEQUENCE event_1_tick_seq TO rkottman;
GRANT SELECT ON SEQUENCE event_1_tick_seq TO PUBLIC;
GRANT ALL ON SEQUENCE event_1_tick_seq TO pgqueue;


--
-- Name: queue; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON TABLE queue FROM PUBLIC;
REVOKE ALL ON TABLE queue FROM pgqueue;
GRANT ALL ON TABLE queue TO pgqueue;
GRANT SELECT ON TABLE queue TO PUBLIC;


--
-- Name: queue_queue_id_seq; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON SEQUENCE queue_queue_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE queue_queue_id_seq FROM pgqueue;
GRANT ALL ON SEQUENCE queue_queue_id_seq TO pgqueue;


--
-- Name: retry_queue; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON TABLE retry_queue FROM PUBLIC;
REVOKE ALL ON TABLE retry_queue FROM pgqueue;
GRANT ALL ON TABLE retry_queue TO pgqueue;
GRANT SELECT ON TABLE retry_queue TO PUBLIC;


--
-- Name: subscription; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON TABLE subscription FROM PUBLIC;
REVOKE ALL ON TABLE subscription FROM pgqueue;
GRANT ALL ON TABLE subscription TO pgqueue;
GRANT SELECT ON TABLE subscription TO PUBLIC;


--
-- Name: subscription_sub_id_seq; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON SEQUENCE subscription_sub_id_seq FROM PUBLIC;
REVOKE ALL ON SEQUENCE subscription_sub_id_seq FROM pgqueue;
GRANT ALL ON SEQUENCE subscription_sub_id_seq TO pgqueue;


--
-- Name: tick; Type: ACL; Schema: pgq; Owner: pgqueue
--

REVOKE ALL ON TABLE tick FROM PUBLIC;
REVOKE ALL ON TABLE tick FROM pgqueue;
GRANT ALL ON TABLE tick TO pgqueue;
GRANT SELECT ON TABLE tick TO PUBLIC;


SET search_path = pgq_ext, pg_catalog;

--
-- Name: completed_batch; Type: ACL; Schema: pgq_ext; Owner: rkottman
--

REVOKE ALL ON TABLE completed_batch FROM PUBLIC;
REVOKE ALL ON TABLE completed_batch FROM rkottman;
GRANT ALL ON TABLE completed_batch TO rkottman;
GRANT SELECT,INSERT,DELETE,TRIGGER,UPDATE ON TABLE completed_batch TO pgqueue;


--
-- Name: completed_event; Type: ACL; Schema: pgq_ext; Owner: rkottman
--

REVOKE ALL ON TABLE completed_event FROM PUBLIC;
REVOKE ALL ON TABLE completed_event FROM rkottman;
GRANT ALL ON TABLE completed_event TO rkottman;
GRANT SELECT,INSERT,DELETE,TRIGGER,UPDATE ON TABLE completed_event TO pgqueue;


--
-- Name: completed_tick; Type: ACL; Schema: pgq_ext; Owner: rkottman
--

REVOKE ALL ON TABLE completed_tick FROM PUBLIC;
REVOKE ALL ON TABLE completed_tick FROM rkottman;
GRANT ALL ON TABLE completed_tick TO rkottman;
GRANT SELECT,INSERT,DELETE,TRIGGER,UPDATE ON TABLE completed_tick TO pgqueue;


--
-- Name: partial_batch; Type: ACL; Schema: pgq_ext; Owner: rkottman
--

REVOKE ALL ON TABLE partial_batch FROM PUBLIC;
REVOKE ALL ON TABLE partial_batch FROM rkottman;
GRANT ALL ON TABLE partial_batch TO rkottman;
GRANT SELECT,INSERT,DELETE,TRIGGER,UPDATE ON TABLE partial_batch TO pgqueue;


SET search_path = stage_r8, pg_catalog;

--
-- Name: gold_2010_05_18; Type: ACL; Schema: stage_r8; Owner: rkottman
--

REVOKE ALL ON TABLE gold_2010_05_18 FROM PUBLIC;
REVOKE ALL ON TABLE gold_2010_05_18 FROM rkottman;
GRANT ALL ON TABLE gold_2010_05_18 TO rkottman;
GRANT SELECT ON TABLE gold_2010_05_18 TO megx_team WITH GRANT OPTION;


SET search_path = silva_r102_lsu, pg_catalog;

--
-- Name: publication; Type: ACL; Schema: silva_r102_lsu; Owner: pyilmaz
--

REVOKE ALL ON TABLE publication FROM PUBLIC;
REVOKE ALL ON TABLE publication FROM pyilmaz;
GRANT ALL ON TABLE publication TO pyilmaz;
GRANT ALL ON TABLE publication TO silva_admin;
GRANT SELECT ON TABLE publication TO megx_team;


--
-- Name: region; Type: ACL; Schema: silva_r102_lsu; Owner: pyilmaz
--

REVOKE ALL ON TABLE region FROM PUBLIC;
REVOKE ALL ON TABLE region FROM pyilmaz;
GRANT ALL ON TABLE region TO pyilmaz;
GRANT ALL ON TABLE region TO silva_admin;
GRANT SELECT ON TABLE region TO megx_team;


--
-- Name: sequenceentry; Type: ACL; Schema: silva_r102_lsu; Owner: pyilmaz
--

REVOKE ALL ON TABLE sequenceentry FROM PUBLIC;
REVOKE ALL ON TABLE sequenceentry FROM pyilmaz;
GRANT ALL ON TABLE sequenceentry TO pyilmaz;
GRANT ALL ON TABLE sequenceentry TO silva_admin;
GRANT SELECT ON TABLE sequenceentry TO megx_team;


--
-- Name: straininfo; Type: ACL; Schema: silva_r102_lsu; Owner: pyilmaz
--

REVOKE ALL ON TABLE straininfo FROM PUBLIC;
REVOKE ALL ON TABLE straininfo FROM pyilmaz;
GRANT ALL ON TABLE straininfo TO pyilmaz;
GRANT ALL ON TABLE straininfo TO silva_admin;
GRANT SELECT ON TABLE straininfo TO megx_team;


--
-- Name: taxmap; Type: ACL; Schema: silva_r102_lsu; Owner: pyilmaz
--

REVOKE ALL ON TABLE taxmap FROM PUBLIC;
REVOKE ALL ON TABLE taxmap FROM pyilmaz;
GRANT ALL ON TABLE taxmap TO pyilmaz;
GRANT ALL ON TABLE taxmap TO silva_admin;
GRANT SELECT ON TABLE taxmap TO megx_team;


--
-- Name: taxonomy; Type: ACL; Schema: silva_r102_lsu; Owner: pyilmaz
--

REVOKE ALL ON TABLE taxonomy FROM PUBLIC;
REVOKE ALL ON TABLE taxonomy FROM pyilmaz;
GRANT ALL ON TABLE taxonomy TO pyilmaz;
GRANT ALL ON TABLE taxonomy TO silva_admin;
GRANT SELECT ON TABLE taxonomy TO megx_team;


SET search_path = silva_r102_ssu, pg_catalog;

--
-- Name: publication; Type: ACL; Schema: silva_r102_ssu; Owner: pyilmaz
--

REVOKE ALL ON TABLE publication FROM PUBLIC;
REVOKE ALL ON TABLE publication FROM pyilmaz;
GRANT ALL ON TABLE publication TO pyilmaz;
GRANT ALL ON TABLE publication TO silva_admin;
GRANT SELECT ON TABLE publication TO megx_team;


--
-- Name: region; Type: ACL; Schema: silva_r102_ssu; Owner: pyilmaz
--

REVOKE ALL ON TABLE region FROM PUBLIC;
REVOKE ALL ON TABLE region FROM pyilmaz;
GRANT ALL ON TABLE region TO pyilmaz;
GRANT ALL ON TABLE region TO silva_admin;
GRANT SELECT ON TABLE region TO megx_team;


--
-- Name: sequenceentry; Type: ACL; Schema: silva_r102_ssu; Owner: pyilmaz
--

REVOKE ALL ON TABLE sequenceentry FROM PUBLIC;
REVOKE ALL ON TABLE sequenceentry FROM pyilmaz;
GRANT ALL ON TABLE sequenceentry TO pyilmaz;
GRANT ALL ON TABLE sequenceentry TO silva_admin;
GRANT SELECT ON TABLE sequenceentry TO megx_team;


--
-- Name: straininfo; Type: ACL; Schema: silva_r102_ssu; Owner: pyilmaz
--

REVOKE ALL ON TABLE straininfo FROM PUBLIC;
REVOKE ALL ON TABLE straininfo FROM pyilmaz;
GRANT ALL ON TABLE straininfo TO pyilmaz;
GRANT ALL ON TABLE straininfo TO silva_admin;
GRANT SELECT ON TABLE straininfo TO megx_team;


--
-- Name: taxmap; Type: ACL; Schema: silva_r102_ssu; Owner: pyilmaz
--

REVOKE ALL ON TABLE taxmap FROM PUBLIC;
REVOKE ALL ON TABLE taxmap FROM pyilmaz;
GRANT ALL ON TABLE taxmap TO pyilmaz;
GRANT ALL ON TABLE taxmap TO silva_admin;
GRANT SELECT ON TABLE taxmap TO megx_team;


--
-- Name: taxonomy; Type: ACL; Schema: silva_r102_ssu; Owner: pyilmaz
--

REVOKE ALL ON TABLE taxonomy FROM PUBLIC;
REVOKE ALL ON TABLE taxonomy FROM pyilmaz;
GRANT ALL ON TABLE taxonomy TO pyilmaz;
GRANT ALL ON TABLE taxonomy TO silva_admin;
GRANT SELECT ON TABLE taxonomy TO megx_team;


SET search_path = stage_r8, pg_catalog;

--
-- Name: envogenomes_ba; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE envogenomes_ba FROM PUBLIC;
REVOKE ALL ON TABLE envogenomes_ba FROM pbuttigi;
GRANT ALL ON TABLE envogenomes_ba TO pbuttigi;
GRANT SELECT ON TABLE envogenomes_ba TO megx_team WITH GRANT OPTION;


--
-- Name: img_taxonomy; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_taxonomy FROM PUBLIC;
REVOKE ALL ON TABLE img_taxonomy FROM pbuttigi;
GRANT ALL ON TABLE img_taxonomy TO pbuttigi;
GRANT SELECT ON TABLE img_taxonomy TO megx_team WITH GRANT OPTION;


--
-- Name: envogenomes_trim; Type: ACL; Schema: stage_r8; Owner: kbseah
--

REVOKE ALL ON TABLE envogenomes_trim FROM PUBLIC;
REVOKE ALL ON TABLE envogenomes_trim FROM kbseah;
GRANT ALL ON TABLE envogenomes_trim TO kbseah;
GRANT SELECT ON TABLE envogenomes_trim TO megx_team WITH GRANT OPTION;


--
-- Name: img_taxon; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_taxon FROM PUBLIC;
REVOKE ALL ON TABLE img_taxon FROM pbuttigi;
GRANT ALL ON TABLE img_taxon TO pbuttigi;
GRANT SELECT ON TABLE img_taxon TO megx_team WITH GRANT OPTION;


--
-- Name: envogenomes_trim2; Type: ACL; Schema: stage_r8; Owner: kbseah
--

REVOKE ALL ON TABLE envogenomes_trim2 FROM PUBLIC;
REVOKE ALL ON TABLE envogenomes_trim2 FROM kbseah;
GRANT ALL ON TABLE envogenomes_trim2 TO kbseah;
GRANT SELECT ON TABLE envogenomes_trim2 TO megx_team WITH GRANT OPTION;


--
-- Name: taxonomy_trim2; Type: ACL; Schema: stage_r8; Owner: kbseah
--

REVOKE ALL ON TABLE taxonomy_trim2 FROM PUBLIC;
REVOKE ALL ON TABLE taxonomy_trim2 FROM kbseah;
GRANT ALL ON TABLE taxonomy_trim2 TO kbseah;
GRANT SELECT ON TABLE taxonomy_trim2 TO megx_team WITH GRANT OPTION;


--
-- Name: finished_taxonomy_trim2; Type: ACL; Schema: stage_r8; Owner: kbseah
--

REVOKE ALL ON TABLE finished_taxonomy_trim2 FROM PUBLIC;
REVOKE ALL ON TABLE finished_taxonomy_trim2 FROM kbseah;
GRANT ALL ON TABLE finished_taxonomy_trim2 TO kbseah;
GRANT SELECT ON TABLE finished_taxonomy_trim2 TO megx_team WITH GRANT OPTION;


--
-- Name: gold; Type: ACL; Schema: stage_r8; Owner: rkottman
--

REVOKE ALL ON TABLE gold FROM PUBLIC;
REVOKE ALL ON TABLE gold FROM rkottman;
GRANT ALL ON TABLE gold TO rkottman;
GRANT SELECT ON TABLE gold TO megx_team WITH GRANT OPTION;


--
-- Name: gprj_complete_genomes; Type: ACL; Schema: stage_r8; Owner: rkottman
--

REVOKE ALL ON TABLE gprj_complete_genomes FROM PUBLIC;
REVOKE ALL ON TABLE gprj_complete_genomes FROM rkottman;
GRANT ALL ON TABLE gprj_complete_genomes TO rkottman;
GRANT SELECT ON TABLE gprj_complete_genomes TO megx_team WITH GRANT OPTION;


--
-- Name: gprj_draft_genomes; Type: ACL; Schema: stage_r8; Owner: rkottman
--

REVOKE ALL ON TABLE gprj_draft_genomes FROM PUBLIC;
REVOKE ALL ON TABLE gprj_draft_genomes FROM rkottman;
GRANT ALL ON TABLE gprj_draft_genomes TO rkottman;
GRANT SELECT ON TABLE gprj_draft_genomes TO megx_team WITH GRANT OPTION;


--
-- Name: gprj_genome_info; Type: ACL; Schema: stage_r8; Owner: rkottman
--

REVOKE ALL ON TABLE gprj_genome_info FROM PUBLIC;
REVOKE ALL ON TABLE gprj_genome_info FROM rkottman;
GRANT ALL ON TABLE gprj_genome_info TO rkottman;
GRANT SELECT ON TABLE gprj_genome_info TO megx_team WITH GRANT OPTION;


--
-- Name: gprj_genome_md5; Type: ACL; Schema: stage_r8; Owner: rkottman
--

REVOKE ALL ON TABLE gprj_genome_md5 FROM PUBLIC;
REVOKE ALL ON TABLE gprj_genome_md5 FROM rkottman;
GRANT ALL ON TABLE gprj_genome_md5 TO rkottman;
GRANT SELECT ON TABLE gprj_genome_md5 TO megx_team WITH GRANT OPTION;


--
-- Name: gprj_gff; Type: ACL; Schema: stage_r8; Owner: rkottman
--

REVOKE ALL ON TABLE gprj_gff FROM PUBLIC;
REVOKE ALL ON TABLE gprj_gff FROM rkottman;
GRANT ALL ON TABLE gprj_gff TO rkottman;
GRANT SELECT ON TABLE gprj_gff TO megx_team WITH GRANT OPTION;


--
-- Name: img_cog; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_cog FROM PUBLIC;
REVOKE ALL ON TABLE img_cog FROM pbuttigi;
GRANT ALL ON TABLE img_cog TO pbuttigi;
GRANT SELECT ON TABLE img_cog TO megx_team WITH GRANT OPTION;


--
-- Name: img_genes; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_genes FROM PUBLIC;
REVOKE ALL ON TABLE img_genes FROM pbuttigi;
GRANT ALL ON TABLE img_genes TO pbuttigi;
GRANT SELECT ON TABLE img_genes TO megx_team WITH GRANT OPTION;


--
-- Name: img_gff; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_gff FROM PUBLIC;
REVOKE ALL ON TABLE img_gff FROM pbuttigi;
GRANT ALL ON TABLE img_gff TO pbuttigi;
GRANT SELECT ON TABLE img_gff TO megx_team WITH GRANT OPTION;


--
-- Name: img_ipr; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_ipr FROM PUBLIC;
REVOKE ALL ON TABLE img_ipr FROM pbuttigi;
GRANT ALL ON TABLE img_ipr TO pbuttigi;
GRANT SELECT ON TABLE img_ipr TO megx_team WITH GRANT OPTION;


--
-- Name: img_ko; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_ko FROM PUBLIC;
REVOKE ALL ON TABLE img_ko FROM pbuttigi;
GRANT ALL ON TABLE img_ko TO pbuttigi;
GRANT SELECT ON TABLE img_ko TO megx_team WITH GRANT OPTION;


--
-- Name: img_kog; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_kog FROM PUBLIC;
REVOKE ALL ON TABLE img_kog FROM pbuttigi;
GRANT ALL ON TABLE img_kog TO pbuttigi;
GRANT SELECT ON TABLE img_kog TO megx_team WITH GRANT OPTION;


--
-- Name: img_map; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_map FROM PUBLIC;
REVOKE ALL ON TABLE img_map FROM pbuttigi;
GRANT ALL ON TABLE img_map TO pbuttigi;
GRANT SELECT ON TABLE img_map TO megx_team WITH GRANT OPTION;


--
-- Name: img_pfam; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_pfam FROM PUBLIC;
REVOKE ALL ON TABLE img_pfam FROM pbuttigi;
GRANT ALL ON TABLE img_pfam TO pbuttigi;
GRANT SELECT ON TABLE img_pfam TO megx_team WITH GRANT OPTION;


--
-- Name: img_pfam_cats; Type: ACL; Schema: stage_r8; Owner: kbseah
--

REVOKE ALL ON TABLE img_pfam_cats FROM PUBLIC;
REVOKE ALL ON TABLE img_pfam_cats FROM kbseah;
GRANT ALL ON TABLE img_pfam_cats TO kbseah;
GRANT SELECT ON TABLE img_pfam_cats TO megx_team WITH GRANT OPTION;


--
-- Name: img_signalp; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_signalp FROM PUBLIC;
REVOKE ALL ON TABLE img_signalp FROM pbuttigi;
GRANT ALL ON TABLE img_signalp TO pbuttigi;
GRANT SELECT ON TABLE img_signalp TO megx_team WITH GRANT OPTION;


--
-- Name: img_tigrfam; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_tigrfam FROM PUBLIC;
REVOKE ALL ON TABLE img_tigrfam FROM pbuttigi;
GRANT ALL ON TABLE img_tigrfam TO pbuttigi;
GRANT SELECT ON TABLE img_tigrfam TO megx_team WITH GRANT OPTION;


--
-- Name: img_tmhmm; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_tmhmm FROM PUBLIC;
REVOKE ALL ON TABLE img_tmhmm FROM pbuttigi;
GRANT ALL ON TABLE img_tmhmm TO pbuttigi;
GRANT SELECT ON TABLE img_tmhmm TO megx_team WITH GRANT OPTION;


--
-- Name: img_xref; Type: ACL; Schema: stage_r8; Owner: pbuttigi
--

REVOKE ALL ON TABLE img_xref FROM PUBLIC;
REVOKE ALL ON TABLE img_xref FROM pbuttigi;
GRANT ALL ON TABLE img_xref TO pbuttigi;
GRANT SELECT ON TABLE img_xref TO megx_team WITH GRANT OPTION;


--
-- Name: marine_phages; Type: ACL; Schema: stage_r8; Owner: rkottman
--

REVOKE ALL ON TABLE marine_phages FROM PUBLIC;
REVOKE ALL ON TABLE marine_phages FROM rkottman;
GRANT ALL ON TABLE marine_phages TO rkottman;
GRANT ALL ON TABLE marine_phages TO mduhaime;
GRANT SELECT ON TABLE marine_phages TO megxuser;
GRANT SELECT ON TABLE marine_phages TO megx_team WITH GRANT OPTION;


--
-- Name: michi_genomes; Type: ACL; Schema: stage_r8; Owner: rkottman
--

REVOKE ALL ON TABLE michi_genomes FROM PUBLIC;
REVOKE ALL ON TABLE michi_genomes FROM rkottman;
GRANT ALL ON TABLE michi_genomes TO rkottman;
GRANT SELECT ON TABLE michi_genomes TO megx_team WITH GRANT OPTION;


--
-- Name: taxonomy_by_envolite; Type: ACL; Schema: stage_r8; Owner: kbseah
--

REVOKE ALL ON TABLE taxonomy_by_envolite FROM PUBLIC;
REVOKE ALL ON TABLE taxonomy_by_envolite FROM kbseah;
GRANT ALL ON TABLE taxonomy_by_envolite TO kbseah;
GRANT SELECT ON TABLE taxonomy_by_envolite TO megx_team WITH GRANT OPTION;


--
-- Name: tpommier_ip; Type: ACL; Schema: stage_r8; Owner: rkottman
--

REVOKE ALL ON TABLE tpommier_ip FROM PUBLIC;
REVOKE ALL ON TABLE tpommier_ip FROM rkottman;
GRANT ALL ON TABLE tpommier_ip TO rkottman;
GRANT SELECT ON TABLE tpommier_ip TO megx_team WITH GRANT OPTION;


--
-- Name: unique_ko_envolite; Type: ACL; Schema: stage_r8; Owner: kbseah
--

REVOKE ALL ON TABLE unique_ko_envolite FROM PUBLIC;
REVOKE ALL ON TABLE unique_ko_envolite FROM kbseah;
GRANT ALL ON TABLE unique_ko_envolite TO kbseah;
GRANT SELECT ON TABLE unique_ko_envolite TO megx_team WITH GRANT OPTION;


--
-- Name: unique_pfam_envolite; Type: ACL; Schema: stage_r8; Owner: kbseah
--

REVOKE ALL ON TABLE unique_pfam_envolite FROM PUBLIC;
REVOKE ALL ON TABLE unique_pfam_envolite FROM kbseah;
GRANT ALL ON TABLE unique_pfam_envolite TO kbseah;
GRANT SELECT ON TABLE unique_pfam_envolite TO megx_team WITH GRANT OPTION;


--
-- Name: unique_taxon_envolite; Type: ACL; Schema: stage_r8; Owner: kbseah
--

REVOKE ALL ON TABLE unique_taxon_envolite FROM PUBLIC;
REVOKE ALL ON TABLE unique_taxon_envolite FROM kbseah;
GRANT ALL ON TABLE unique_taxon_envolite TO kbseah;
GRANT SELECT ON TABLE unique_taxon_envolite TO megx_team WITH GRANT OPTION;


--
-- Name: unique_taxon_envolite2; Type: ACL; Schema: stage_r8; Owner: kbseah
--

REVOKE ALL ON TABLE unique_taxon_envolite2 FROM PUBLIC;
REVOKE ALL ON TABLE unique_taxon_envolite2 FROM kbseah;
GRANT ALL ON TABLE unique_taxon_envolite2 TO kbseah;
GRANT SELECT ON TABLE unique_taxon_envolite2 TO megx_team WITH GRANT OPTION;


--
-- Name: viral_metagenomes; Type: ACL; Schema: stage_r8; Owner: mduhaime
--

REVOKE ALL ON TABLE viral_metagenomes FROM PUBLIC;
REVOKE ALL ON TABLE viral_metagenomes FROM mduhaime;
GRANT ALL ON TABLE viral_metagenomes TO mduhaime;
GRANT SELECT ON TABLE viral_metagenomes TO megx_team WITH GRANT OPTION;


--
-- Name: whale_falls; Type: ACL; Schema: stage_r8; Owner: rkottman
--

REVOKE ALL ON TABLE whale_falls FROM PUBLIC;
REVOKE ALL ON TABLE whale_falls FROM rkottman;
GRANT ALL ON TABLE whale_falls TO rkottman;
GRANT SELECT ON TABLE whale_falls TO megx_team WITH GRANT OPTION;


SET search_path = web, pg_catalog;

--
-- Name: blast_genomes; Type: ACL; Schema: web; Owner: ikostadi
--

REVOKE ALL ON TABLE blast_genomes FROM PUBLIC;
REVOKE ALL ON TABLE blast_genomes FROM ikostadi;
GRANT ALL ON TABLE blast_genomes TO ikostadi;
GRANT SELECT ON TABLE blast_genomes TO selectors;
GRANT SELECT ON TABLE blast_genomes TO megx_team;


--
-- Name: blast_gos; Type: ACL; Schema: web; Owner: ikostadi
--

REVOKE ALL ON TABLE blast_gos FROM PUBLIC;
REVOKE ALL ON TABLE blast_gos FROM ikostadi;
GRANT ALL ON TABLE blast_gos TO ikostadi;
GRANT SELECT ON TABLE blast_gos TO selectors;
GRANT SELECT ON TABLE blast_gos TO megx_team;


--
-- Name: silva; Type: ACL; Schema: web; Owner: ikostadi
--

REVOKE ALL ON TABLE silva FROM PUBLIC;
REVOKE ALL ON TABLE silva FROM ikostadi;
GRANT ALL ON TABLE silva TO ikostadi;
GRANT SELECT ON TABLE silva TO megx_team;
GRANT SELECT ON TABLE silva TO megxuser;


--
-- Name: silva_100_dnas; Type: ACL; Schema: web; Owner: rkottman
--

REVOKE ALL ON TABLE silva_100_dnas FROM PUBLIC;
REVOKE ALL ON TABLE silva_100_dnas FROM rkottman;
GRANT ALL ON TABLE silva_100_dnas TO rkottman;
GRANT SELECT ON TABLE silva_100_dnas TO megx_team;


--
-- Name: blast_silva; Type: ACL; Schema: web; Owner: ikostadi
--

REVOKE ALL ON TABLE blast_silva FROM PUBLIC;
REVOKE ALL ON TABLE blast_silva FROM ikostadi;
GRANT ALL ON TABLE blast_silva TO ikostadi;
GRANT SELECT ON TABLE blast_silva TO selectors;
GRANT SELECT ON TABLE blast_silva TO megx_team;


--
-- Name: genomes; Type: ACL; Schema: web; Owner: ikostadi
--

REVOKE ALL ON TABLE genomes FROM PUBLIC;
REVOKE ALL ON TABLE genomes FROM ikostadi;
GRANT ALL ON TABLE genomes TO ikostadi;
GRANT SELECT ON TABLE genomes TO selectors;
GRANT SELECT ON TABLE genomes TO megx_team;


--
-- Name: idgen; Type: ACL; Schema: web; Owner: rkottman
--

REVOKE ALL ON SEQUENCE idgen FROM PUBLIC;
REVOKE ALL ON SEQUENCE idgen FROM rkottman;
GRANT ALL ON SEQUENCE idgen TO rkottman;
GRANT USAGE ON SEQUENCE idgen TO megxuser;


--
-- Name: silva_100_samples; Type: ACL; Schema: web; Owner: rkottman
--

REVOKE ALL ON TABLE silva_100_samples FROM PUBLIC;
REVOKE ALL ON TABLE silva_100_samples FROM rkottman;
GRANT ALL ON TABLE silva_100_samples TO rkottman;
GRANT SELECT ON TABLE silva_100_samples TO megx_team;


SET search_path = web_r8, pg_catalog;

--
-- Name: blast_job_details; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE blast_job_details FROM PUBLIC;
REVOKE ALL ON TABLE blast_job_details FROM ikostadi;
GRANT ALL ON TABLE blast_job_details TO ikostadi;
GRANT SELECT ON TABLE blast_job_details TO megxuser;
GRANT SELECT ON TABLE blast_job_details TO selectors;
GRANT SELECT ON TABLE blast_job_details TO megx_team;


--
-- Name: genomes; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE genomes FROM PUBLIC;
REVOKE ALL ON TABLE genomes FROM ikostadi;
GRANT ALL ON TABLE genomes TO ikostadi;
GRANT SELECT ON TABLE genomes TO selectors;
GRANT SELECT ON TABLE genomes TO megx_team;
GRANT SELECT ON TABLE genomes TO megxuser;


--
-- Name: marine_phages; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE marine_phages FROM PUBLIC;
REVOKE ALL ON TABLE marine_phages FROM ikostadi;
GRANT ALL ON TABLE marine_phages TO ikostadi;
GRANT SELECT ON TABLE marine_phages TO selectors;
GRANT SELECT ON TABLE marine_phages TO megx_team;
GRANT SELECT ON TABLE marine_phages TO megxuser;


--
-- Name: metagenomes; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE metagenomes FROM PUBLIC;
REVOKE ALL ON TABLE metagenomes FROM ikostadi;
GRANT ALL ON TABLE metagenomes TO ikostadi;
GRANT SELECT ON TABLE metagenomes TO selectors;
GRANT SELECT ON TABLE metagenomes TO megx_team;
GRANT SELECT ON TABLE metagenomes TO megxuser;


--
-- Name: silva; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE silva FROM PUBLIC;
REVOKE ALL ON TABLE silva FROM ikostadi;
GRANT ALL ON TABLE silva TO ikostadi;
GRANT SELECT ON TABLE silva TO selectors;
GRANT SELECT ON TABLE silva TO megxuser;
GRANT SELECT ON TABLE silva TO megx_team;


--
-- Name: samples; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE samples FROM PUBLIC;
REVOKE ALL ON TABLE samples FROM ikostadi;
GRANT ALL ON TABLE samples TO ikostadi;
GRANT SELECT ON TABLE samples TO selectors;
GRANT SELECT ON TABLE samples TO megxuser;
GRANT SELECT ON TABLE samples TO megx_team;


--
-- Name: gms_samples; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE gms_samples FROM PUBLIC;
REVOKE ALL ON TABLE gms_samples FROM ikostadi;
GRANT ALL ON TABLE gms_samples TO ikostadi;
GRANT SELECT ON TABLE gms_samples TO selectors;
GRANT SELECT ON TABLE gms_samples TO megxuser;
GRANT SELECT ON TABLE gms_samples TO megx_team;


--
-- Name: longhurst_regions; Type: ACL; Schema: web_r8; Owner: rkottman
--

REVOKE ALL ON TABLE longhurst_regions FROM PUBLIC;
REVOKE ALL ON TABLE longhurst_regions FROM rkottman;
GRANT ALL ON TABLE longhurst_regions TO rkottman;
GRANT SELECT ON TABLE longhurst_regions TO selectors;
GRANT SELECT ON TABLE longhurst_regions TO megxuser;
GRANT ALL ON TABLE longhurst_regions TO afernand;


--
-- Name: silva_overview; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE silva_overview FROM PUBLIC;
REVOKE ALL ON TABLE silva_overview FROM ikostadi;
GRANT ALL ON TABLE silva_overview TO ikostadi;
GRANT SELECT ON TABLE silva_overview TO megxuser;
GRANT SELECT ON TABLE silva_overview TO megx_team;


--
-- Name: tags; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE tags FROM PUBLIC;
REVOKE ALL ON TABLE tags FROM ikostadi;
GRANT ALL ON TABLE tags TO ikostadi;
GRANT SELECT ON TABLE tags TO megxuser;
GRANT SELECT ON TABLE tags TO selectors;


--
-- Name: tools; Type: ACL; Schema: web_r8; Owner: rkottman
--

REVOKE ALL ON TABLE tools FROM PUBLIC;
REVOKE ALL ON TABLE tools FROM rkottman;
GRANT ALL ON TABLE tools TO rkottman;
GRANT SELECT ON TABLE tools TO megxuser;


--
-- Name: whale_falls; Type: ACL; Schema: web_r8; Owner: rkottman
--

REVOKE ALL ON TABLE whale_falls FROM PUBLIC;
REVOKE ALL ON TABLE whale_falls FROM rkottman;
GRANT ALL ON TABLE whale_falls TO rkottman;
GRANT SELECT ON TABLE whale_falls TO selectors;


--
-- Name: woa05_nitrate; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_nitrate FROM PUBLIC;
REVOKE ALL ON TABLE woa05_nitrate FROM ikostadi;
GRANT ALL ON TABLE woa05_nitrate TO ikostadi;
GRANT SELECT ON TABLE woa05_nitrate TO selectors;
GRANT SELECT ON TABLE woa05_nitrate TO megx_team;


--
-- Name: woa05_oxygen_dissolved; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_oxygen_dissolved FROM PUBLIC;
REVOKE ALL ON TABLE woa05_oxygen_dissolved FROM ikostadi;
GRANT ALL ON TABLE woa05_oxygen_dissolved TO ikostadi;
GRANT SELECT ON TABLE woa05_oxygen_dissolved TO selectors;
GRANT SELECT ON TABLE woa05_oxygen_dissolved TO megx_team;
GRANT SELECT ON TABLE woa05_oxygen_dissolved TO megxuser;


--
-- Name: woa05_oxygen_saturation; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_oxygen_saturation FROM PUBLIC;
REVOKE ALL ON TABLE woa05_oxygen_saturation FROM ikostadi;
GRANT ALL ON TABLE woa05_oxygen_saturation TO ikostadi;
GRANT SELECT ON TABLE woa05_oxygen_saturation TO selectors;
GRANT SELECT ON TABLE woa05_oxygen_saturation TO megx_team;
GRANT SELECT ON TABLE woa05_oxygen_saturation TO megxuser;


--
-- Name: woa05_oxygen_utilization; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_oxygen_utilization FROM PUBLIC;
REVOKE ALL ON TABLE woa05_oxygen_utilization FROM ikostadi;
GRANT ALL ON TABLE woa05_oxygen_utilization TO ikostadi;
GRANT SELECT ON TABLE woa05_oxygen_utilization TO selectors;
GRANT SELECT ON TABLE woa05_oxygen_utilization TO megx_team;
GRANT SELECT ON TABLE woa05_oxygen_utilization TO megxuser;


--
-- Name: woa05_phosphate; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_phosphate FROM PUBLIC;
REVOKE ALL ON TABLE woa05_phosphate FROM ikostadi;
GRANT ALL ON TABLE woa05_phosphate TO ikostadi;
GRANT SELECT ON TABLE woa05_phosphate TO selectors;
GRANT SELECT ON TABLE woa05_phosphate TO megx_team;
GRANT SELECT ON TABLE woa05_phosphate TO megxuser;


--
-- Name: woa05_salinity; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_salinity FROM PUBLIC;
REVOKE ALL ON TABLE woa05_salinity FROM ikostadi;
GRANT ALL ON TABLE woa05_salinity TO ikostadi;
GRANT SELECT ON TABLE woa05_salinity TO selectors;
GRANT SELECT ON TABLE woa05_salinity TO megx_team;
GRANT SELECT ON TABLE woa05_salinity TO megxuser;


--
-- Name: woa05_silicate; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_silicate FROM PUBLIC;
REVOKE ALL ON TABLE woa05_silicate FROM ikostadi;
GRANT ALL ON TABLE woa05_silicate TO ikostadi;
GRANT SELECT ON TABLE woa05_silicate TO selectors;
GRANT SELECT ON TABLE woa05_silicate TO megx_team;
GRANT SELECT ON TABLE woa05_silicate TO megxuser;


--
-- Name: woa05_temperature; Type: ACL; Schema: web_r8; Owner: ikostadi
--

REVOKE ALL ON TABLE woa05_temperature FROM PUBLIC;
REVOKE ALL ON TABLE woa05_temperature FROM ikostadi;
GRANT ALL ON TABLE woa05_temperature TO ikostadi;
GRANT SELECT ON TABLE woa05_temperature TO selectors;
GRANT SELECT ON TABLE woa05_temperature TO megx_team;
GRANT SELECT ON TABLE woa05_temperature TO megxuser;


--
-- Name: world_regions; Type: ACL; Schema: web_r8; Owner: rkottman
--

REVOKE ALL ON TABLE world_regions FROM PUBLIC;
REVOKE ALL ON TABLE world_regions FROM rkottman;
GRANT ALL ON TABLE world_regions TO rkottman;
GRANT SELECT ON TABLE world_regions TO selectors;
GRANT SELECT ON TABLE world_regions TO megx_team;
GRANT SELECT ON TABLE world_regions TO megxuser;


--
-- PostgreSQL database dump complete
--

COMMIT;